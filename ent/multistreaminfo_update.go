// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/multistreaminfo"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/predicate"
)

// MultistreamInfoUpdate is the builder for updating MultistreamInfo entities.
type MultistreamInfoUpdate struct {
	config
	hooks    []Hook
	mutation *MultistreamInfoMutation
}

// Where appends a list predicates to the MultistreamInfoUpdate builder.
func (_u *MultistreamInfoUpdate) Where(ps ...predicate.MultistreamInfo) *MultistreamInfoUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDelayMs sets the "delay_ms" field.
func (_u *MultistreamInfoUpdate) SetDelayMs(v int) *MultistreamInfoUpdate {
	_u.mutation.ResetDelayMs()
	_u.mutation.SetDelayMs(v)
	return _u
}

// SetNillableDelayMs sets the "delay_ms" field if the given value is not nil.
func (_u *MultistreamInfoUpdate) SetNillableDelayMs(v *int) *MultistreamInfoUpdate {
	if v != nil {
		_u.SetDelayMs(*v)
	}
	return _u
}

// AddDelayMs adds value to the "delay_ms" field.
func (_u *MultistreamInfoUpdate) AddDelayMs(v int) *MultistreamInfoUpdate {
	_u.mutation.AddDelayMs(v)
	return _u
}

// ClearDelayMs clears the value of the "delay_ms" field.
func (_u *MultistreamInfoUpdate) ClearDelayMs() *MultistreamInfoUpdate {
	_u.mutation.ClearDelayMs()
	return _u
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by ID.
func (_u *MultistreamInfoUpdate) SetPlaylistID(id uuid.UUID) *MultistreamInfoUpdate {
	_u.mutation.SetPlaylistID(id)
	return _u
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (_u *MultistreamInfoUpdate) SetPlaylist(v *Playlist) *MultistreamInfoUpdate {
	return _u.SetPlaylistID(v.ID)
}

// Mutation returns the MultistreamInfoMutation object of the builder.
func (_u *MultistreamInfoUpdate) Mutation() *MultistreamInfoMutation {
	return _u.mutation
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (_u *MultistreamInfoUpdate) ClearPlaylist() *MultistreamInfoUpdate {
	_u.mutation.ClearPlaylist()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MultistreamInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MultistreamInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MultistreamInfoUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MultistreamInfoUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MultistreamInfoUpdate) check() error {
	if _u.mutation.VodCleared() && len(_u.mutation.VodIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MultistreamInfo.vod"`)
	}
	if _u.mutation.PlaylistCleared() && len(_u.mutation.PlaylistIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MultistreamInfo.playlist"`)
	}
	return nil
}

func (_u *MultistreamInfoUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(multistreaminfo.Table, multistreaminfo.Columns, sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DelayMs(); ok {
		_spec.SetField(multistreaminfo.FieldDelayMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDelayMs(); ok {
		_spec.AddField(multistreaminfo.FieldDelayMs, field.TypeInt, value)
	}
	if _u.mutation.DelayMsCleared() {
		_spec.ClearField(multistreaminfo.FieldDelayMs, field.TypeInt)
	}
	if _u.mutation.PlaylistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multistreaminfo.PlaylistTable,
			Columns: []string{multistreaminfo.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multistreaminfo.PlaylistTable,
			Columns: []string{multistreaminfo.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{multistreaminfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MultistreamInfoUpdateOne is the builder for updating a single MultistreamInfo entity.
type MultistreamInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MultistreamInfoMutation
}

// SetDelayMs sets the "delay_ms" field.
func (_u *MultistreamInfoUpdateOne) SetDelayMs(v int) *MultistreamInfoUpdateOne {
	_u.mutation.ResetDelayMs()
	_u.mutation.SetDelayMs(v)
	return _u
}

// SetNillableDelayMs sets the "delay_ms" field if the given value is not nil.
func (_u *MultistreamInfoUpdateOne) SetNillableDelayMs(v *int) *MultistreamInfoUpdateOne {
	if v != nil {
		_u.SetDelayMs(*v)
	}
	return _u
}

// AddDelayMs adds value to the "delay_ms" field.
func (_u *MultistreamInfoUpdateOne) AddDelayMs(v int) *MultistreamInfoUpdateOne {
	_u.mutation.AddDelayMs(v)
	return _u
}

// ClearDelayMs clears the value of the "delay_ms" field.
func (_u *MultistreamInfoUpdateOne) ClearDelayMs() *MultistreamInfoUpdateOne {
	_u.mutation.ClearDelayMs()
	return _u
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by ID.
func (_u *MultistreamInfoUpdateOne) SetPlaylistID(id uuid.UUID) *MultistreamInfoUpdateOne {
	_u.mutation.SetPlaylistID(id)
	return _u
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (_u *MultistreamInfoUpdateOne) SetPlaylist(v *Playlist) *MultistreamInfoUpdateOne {
	return _u.SetPlaylistID(v.ID)
}

// Mutation returns the MultistreamInfoMutation object of the builder.
func (_u *MultistreamInfoUpdateOne) Mutation() *MultistreamInfoMutation {
	return _u.mutation
}

// ClearPlaylist clears the "playlist" edge to the Playlist entity.
func (_u *MultistreamInfoUpdateOne) ClearPlaylist() *MultistreamInfoUpdateOne {
	_u.mutation.ClearPlaylist()
	return _u
}

// Where appends a list predicates to the MultistreamInfoUpdate builder.
func (_u *MultistreamInfoUpdateOne) Where(ps ...predicate.MultistreamInfo) *MultistreamInfoUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MultistreamInfoUpdateOne) Select(field string, fields ...string) *MultistreamInfoUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated MultistreamInfo entity.
func (_u *MultistreamInfoUpdateOne) Save(ctx context.Context) (*MultistreamInfo, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MultistreamInfoUpdateOne) SaveX(ctx context.Context) *MultistreamInfo {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MultistreamInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MultistreamInfoUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MultistreamInfoUpdateOne) check() error {
	if _u.mutation.VodCleared() && len(_u.mutation.VodIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MultistreamInfo.vod"`)
	}
	if _u.mutation.PlaylistCleared() && len(_u.mutation.PlaylistIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MultistreamInfo.playlist"`)
	}
	return nil
}

func (_u *MultistreamInfoUpdateOne) sqlSave(ctx context.Context) (_node *MultistreamInfo, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(multistreaminfo.Table, multistreaminfo.Columns, sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MultistreamInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, multistreaminfo.FieldID)
		for _, f := range fields {
			if !multistreaminfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != multistreaminfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.DelayMs(); ok {
		_spec.SetField(multistreaminfo.FieldDelayMs, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDelayMs(); ok {
		_spec.AddField(multistreaminfo.FieldDelayMs, field.TypeInt, value)
	}
	if _u.mutation.DelayMsCleared() {
		_spec.ClearField(multistreaminfo.FieldDelayMs, field.TypeInt)
	}
	if _u.mutation.PlaylistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multistreaminfo.PlaylistTable,
			Columns: []string{multistreaminfo.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multistreaminfo.PlaylistTable,
			Columns: []string{multistreaminfo.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MultistreamInfo{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{multistreaminfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
