// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/chapter"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/vod"
)

// ChapterUpdate is the builder for updating Chapter entities.
type ChapterUpdate struct {
	config
	hooks    []Hook
	mutation *ChapterMutation
}

// Where appends a list predicates to the ChapterUpdate builder.
func (_u *ChapterUpdate) Where(ps ...predicate.Chapter) *ChapterUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetType sets the "type" field.
func (_u *ChapterUpdate) SetType(v string) *ChapterUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ChapterUpdate) SetNillableType(v *string) *ChapterUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *ChapterUpdate) ClearType() *ChapterUpdate {
	_u.mutation.ClearType()
	return _u
}

// SetTitle sets the "title" field.
func (_u *ChapterUpdate) SetTitle(v string) *ChapterUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ChapterUpdate) SetNillableTitle(v *string) *ChapterUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *ChapterUpdate) ClearTitle() *ChapterUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetStart sets the "start" field.
func (_u *ChapterUpdate) SetStart(v int) *ChapterUpdate {
	_u.mutation.ResetStart()
	_u.mutation.SetStart(v)
	return _u
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (_u *ChapterUpdate) SetNillableStart(v *int) *ChapterUpdate {
	if v != nil {
		_u.SetStart(*v)
	}
	return _u
}

// AddStart adds value to the "start" field.
func (_u *ChapterUpdate) AddStart(v int) *ChapterUpdate {
	_u.mutation.AddStart(v)
	return _u
}

// ClearStart clears the value of the "start" field.
func (_u *ChapterUpdate) ClearStart() *ChapterUpdate {
	_u.mutation.ClearStart()
	return _u
}

// SetEnd sets the "end" field.
func (_u *ChapterUpdate) SetEnd(v int) *ChapterUpdate {
	_u.mutation.ResetEnd()
	_u.mutation.SetEnd(v)
	return _u
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (_u *ChapterUpdate) SetNillableEnd(v *int) *ChapterUpdate {
	if v != nil {
		_u.SetEnd(*v)
	}
	return _u
}

// AddEnd adds value to the "end" field.
func (_u *ChapterUpdate) AddEnd(v int) *ChapterUpdate {
	_u.mutation.AddEnd(v)
	return _u
}

// ClearEnd clears the value of the "end" field.
func (_u *ChapterUpdate) ClearEnd() *ChapterUpdate {
	_u.mutation.ClearEnd()
	return _u
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (_u *ChapterUpdate) SetVodID(id uuid.UUID) *ChapterUpdate {
	_u.mutation.SetVodID(id)
	return _u
}

// SetVod sets the "vod" edge to the Vod entity.
func (_u *ChapterUpdate) SetVod(v *Vod) *ChapterUpdate {
	return _u.SetVodID(v.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (_u *ChapterUpdate) Mutation() *ChapterMutation {
	return _u.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (_u *ChapterUpdate) ClearVod() *ChapterUpdate {
	_u.mutation.ClearVod()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ChapterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChapterUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ChapterUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChapterUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChapterUpdate) check() error {
	if _u.mutation.VodCleared() && len(_u.mutation.VodIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chapter.vod"`)
	}
	return nil
}

func (_u *ChapterUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chapter.Table, chapter.Columns, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(chapter.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(chapter.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(chapter.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(chapter.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Start(); ok {
		_spec.SetField(chapter.FieldStart, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStart(); ok {
		_spec.AddField(chapter.FieldStart, field.TypeInt, value)
	}
	if _u.mutation.StartCleared() {
		_spec.ClearField(chapter.FieldStart, field.TypeInt)
	}
	if value, ok := _u.mutation.End(); ok {
		_spec.SetField(chapter.FieldEnd, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEnd(); ok {
		_spec.AddField(chapter.FieldEnd, field.TypeInt, value)
	}
	if _u.mutation.EndCleared() {
		_spec.ClearField(chapter.FieldEnd, field.TypeInt)
	}
	if _u.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.VodTable,
			Columns: []string{chapter.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.VodTable,
			Columns: []string{chapter.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ChapterUpdateOne is the builder for updating a single Chapter entity.
type ChapterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChapterMutation
}

// SetType sets the "type" field.
func (_u *ChapterUpdateOne) SetType(v string) *ChapterUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *ChapterUpdateOne) SetNillableType(v *string) *ChapterUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// ClearType clears the value of the "type" field.
func (_u *ChapterUpdateOne) ClearType() *ChapterUpdateOne {
	_u.mutation.ClearType()
	return _u
}

// SetTitle sets the "title" field.
func (_u *ChapterUpdateOne) SetTitle(v string) *ChapterUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ChapterUpdateOne) SetNillableTitle(v *string) *ChapterUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *ChapterUpdateOne) ClearTitle() *ChapterUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetStart sets the "start" field.
func (_u *ChapterUpdateOne) SetStart(v int) *ChapterUpdateOne {
	_u.mutation.ResetStart()
	_u.mutation.SetStart(v)
	return _u
}

// SetNillableStart sets the "start" field if the given value is not nil.
func (_u *ChapterUpdateOne) SetNillableStart(v *int) *ChapterUpdateOne {
	if v != nil {
		_u.SetStart(*v)
	}
	return _u
}

// AddStart adds value to the "start" field.
func (_u *ChapterUpdateOne) AddStart(v int) *ChapterUpdateOne {
	_u.mutation.AddStart(v)
	return _u
}

// ClearStart clears the value of the "start" field.
func (_u *ChapterUpdateOne) ClearStart() *ChapterUpdateOne {
	_u.mutation.ClearStart()
	return _u
}

// SetEnd sets the "end" field.
func (_u *ChapterUpdateOne) SetEnd(v int) *ChapterUpdateOne {
	_u.mutation.ResetEnd()
	_u.mutation.SetEnd(v)
	return _u
}

// SetNillableEnd sets the "end" field if the given value is not nil.
func (_u *ChapterUpdateOne) SetNillableEnd(v *int) *ChapterUpdateOne {
	if v != nil {
		_u.SetEnd(*v)
	}
	return _u
}

// AddEnd adds value to the "end" field.
func (_u *ChapterUpdateOne) AddEnd(v int) *ChapterUpdateOne {
	_u.mutation.AddEnd(v)
	return _u
}

// ClearEnd clears the value of the "end" field.
func (_u *ChapterUpdateOne) ClearEnd() *ChapterUpdateOne {
	_u.mutation.ClearEnd()
	return _u
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (_u *ChapterUpdateOne) SetVodID(id uuid.UUID) *ChapterUpdateOne {
	_u.mutation.SetVodID(id)
	return _u
}

// SetVod sets the "vod" edge to the Vod entity.
func (_u *ChapterUpdateOne) SetVod(v *Vod) *ChapterUpdateOne {
	return _u.SetVodID(v.ID)
}

// Mutation returns the ChapterMutation object of the builder.
func (_u *ChapterUpdateOne) Mutation() *ChapterMutation {
	return _u.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (_u *ChapterUpdateOne) ClearVod() *ChapterUpdateOne {
	_u.mutation.ClearVod()
	return _u
}

// Where appends a list predicates to the ChapterUpdate builder.
func (_u *ChapterUpdateOne) Where(ps ...predicate.Chapter) *ChapterUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ChapterUpdateOne) Select(field string, fields ...string) *ChapterUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Chapter entity.
func (_u *ChapterUpdateOne) Save(ctx context.Context) (*Chapter, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ChapterUpdateOne) SaveX(ctx context.Context) *Chapter {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ChapterUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ChapterUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ChapterUpdateOne) check() error {
	if _u.mutation.VodCleared() && len(_u.mutation.VodIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Chapter.vod"`)
	}
	return nil
}

func (_u *ChapterUpdateOne) sqlSave(ctx context.Context) (_node *Chapter, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chapter.Table, chapter.Columns, sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chapter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chapter.FieldID)
		for _, f := range fields {
			if !chapter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chapter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(chapter.FieldType, field.TypeString, value)
	}
	if _u.mutation.TypeCleared() {
		_spec.ClearField(chapter.FieldType, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(chapter.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(chapter.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Start(); ok {
		_spec.SetField(chapter.FieldStart, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedStart(); ok {
		_spec.AddField(chapter.FieldStart, field.TypeInt, value)
	}
	if _u.mutation.StartCleared() {
		_spec.ClearField(chapter.FieldStart, field.TypeInt)
	}
	if value, ok := _u.mutation.End(); ok {
		_spec.SetField(chapter.FieldEnd, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedEnd(); ok {
		_spec.AddField(chapter.FieldEnd, field.TypeInt, value)
	}
	if _u.mutation.EndCleared() {
		_spec.ClearField(chapter.FieldEnd, field.TypeInt)
	}
	if _u.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.VodTable,
			Columns: []string{chapter.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chapter.VodTable,
			Columns: []string{chapter.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chapter{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chapter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
