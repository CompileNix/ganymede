// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livecategory"
	"github.com/zibbp/ganymede/ent/livetitleregex"
	"github.com/zibbp/ganymede/ent/predicate"
)

// LiveUpdate is the builder for updating Live entities.
type LiveUpdate struct {
	config
	hooks    []Hook
	mutation *LiveMutation
}

// Where appends a list predicates to the LiveUpdate builder.
func (_u *LiveUpdate) Where(ps ...predicate.Live) *LiveUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetWatchLive sets the "watch_live" field.
func (_u *LiveUpdate) SetWatchLive(v bool) *LiveUpdate {
	_u.mutation.SetWatchLive(v)
	return _u
}

// SetNillableWatchLive sets the "watch_live" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableWatchLive(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetWatchLive(*v)
	}
	return _u
}

// SetWatchVod sets the "watch_vod" field.
func (_u *LiveUpdate) SetWatchVod(v bool) *LiveUpdate {
	_u.mutation.SetWatchVod(v)
	return _u
}

// SetNillableWatchVod sets the "watch_vod" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableWatchVod(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetWatchVod(*v)
	}
	return _u
}

// SetDownloadArchives sets the "download_archives" field.
func (_u *LiveUpdate) SetDownloadArchives(v bool) *LiveUpdate {
	_u.mutation.SetDownloadArchives(v)
	return _u
}

// SetNillableDownloadArchives sets the "download_archives" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableDownloadArchives(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetDownloadArchives(*v)
	}
	return _u
}

// SetDownloadHighlights sets the "download_highlights" field.
func (_u *LiveUpdate) SetDownloadHighlights(v bool) *LiveUpdate {
	_u.mutation.SetDownloadHighlights(v)
	return _u
}

// SetNillableDownloadHighlights sets the "download_highlights" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableDownloadHighlights(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetDownloadHighlights(*v)
	}
	return _u
}

// SetDownloadUploads sets the "download_uploads" field.
func (_u *LiveUpdate) SetDownloadUploads(v bool) *LiveUpdate {
	_u.mutation.SetDownloadUploads(v)
	return _u
}

// SetNillableDownloadUploads sets the "download_uploads" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableDownloadUploads(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetDownloadUploads(*v)
	}
	return _u
}

// SetDownloadSubOnly sets the "download_sub_only" field.
func (_u *LiveUpdate) SetDownloadSubOnly(v bool) *LiveUpdate {
	_u.mutation.SetDownloadSubOnly(v)
	return _u
}

// SetNillableDownloadSubOnly sets the "download_sub_only" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableDownloadSubOnly(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetDownloadSubOnly(*v)
	}
	return _u
}

// SetIsLive sets the "is_live" field.
func (_u *LiveUpdate) SetIsLive(v bool) *LiveUpdate {
	_u.mutation.SetIsLive(v)
	return _u
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableIsLive(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetIsLive(*v)
	}
	return _u
}

// SetArchiveChat sets the "archive_chat" field.
func (_u *LiveUpdate) SetArchiveChat(v bool) *LiveUpdate {
	_u.mutation.SetArchiveChat(v)
	return _u
}

// SetNillableArchiveChat sets the "archive_chat" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableArchiveChat(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetArchiveChat(*v)
	}
	return _u
}

// SetResolution sets the "resolution" field.
func (_u *LiveUpdate) SetResolution(v string) *LiveUpdate {
	_u.mutation.SetResolution(v)
	return _u
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableResolution(v *string) *LiveUpdate {
	if v != nil {
		_u.SetResolution(*v)
	}
	return _u
}

// ClearResolution clears the value of the "resolution" field.
func (_u *LiveUpdate) ClearResolution() *LiveUpdate {
	_u.mutation.ClearResolution()
	return _u
}

// SetLastLive sets the "last_live" field.
func (_u *LiveUpdate) SetLastLive(v time.Time) *LiveUpdate {
	_u.mutation.SetLastLive(v)
	return _u
}

// SetNillableLastLive sets the "last_live" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableLastLive(v *time.Time) *LiveUpdate {
	if v != nil {
		_u.SetLastLive(*v)
	}
	return _u
}

// SetRenderChat sets the "render_chat" field.
func (_u *LiveUpdate) SetRenderChat(v bool) *LiveUpdate {
	_u.mutation.SetRenderChat(v)
	return _u
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableRenderChat(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetRenderChat(*v)
	}
	return _u
}

// SetVideoAge sets the "video_age" field.
func (_u *LiveUpdate) SetVideoAge(v int64) *LiveUpdate {
	_u.mutation.ResetVideoAge()
	_u.mutation.SetVideoAge(v)
	return _u
}

// SetNillableVideoAge sets the "video_age" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableVideoAge(v *int64) *LiveUpdate {
	if v != nil {
		_u.SetVideoAge(*v)
	}
	return _u
}

// AddVideoAge adds value to the "video_age" field.
func (_u *LiveUpdate) AddVideoAge(v int64) *LiveUpdate {
	_u.mutation.AddVideoAge(v)
	return _u
}

// SetApplyCategoriesToLive sets the "apply_categories_to_live" field.
func (_u *LiveUpdate) SetApplyCategoriesToLive(v bool) *LiveUpdate {
	_u.mutation.SetApplyCategoriesToLive(v)
	return _u
}

// SetNillableApplyCategoriesToLive sets the "apply_categories_to_live" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableApplyCategoriesToLive(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetApplyCategoriesToLive(*v)
	}
	return _u
}

// SetStrictCategoriesLive sets the "strict_categories_live" field.
func (_u *LiveUpdate) SetStrictCategoriesLive(v bool) *LiveUpdate {
	_u.mutation.SetStrictCategoriesLive(v)
	return _u
}

// SetNillableStrictCategoriesLive sets the "strict_categories_live" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableStrictCategoriesLive(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetStrictCategoriesLive(*v)
	}
	return _u
}

// SetBlacklistCategoriesLive sets the "blacklist_categories_live" field.
func (_u *LiveUpdate) SetBlacklistCategoriesLive(v bool) *LiveUpdate {
	_u.mutation.SetBlacklistCategoriesLive(v)
	return _u
}

// SetNillableBlacklistCategoriesLive sets the "blacklist_categories_live" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableBlacklistCategoriesLive(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetBlacklistCategoriesLive(*v)
	}
	return _u
}

// SetWatchClips sets the "watch_clips" field.
func (_u *LiveUpdate) SetWatchClips(v bool) *LiveUpdate {
	_u.mutation.SetWatchClips(v)
	return _u
}

// SetNillableWatchClips sets the "watch_clips" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableWatchClips(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetWatchClips(*v)
	}
	return _u
}

// SetClipsLimit sets the "clips_limit" field.
func (_u *LiveUpdate) SetClipsLimit(v int) *LiveUpdate {
	_u.mutation.ResetClipsLimit()
	_u.mutation.SetClipsLimit(v)
	return _u
}

// SetNillableClipsLimit sets the "clips_limit" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableClipsLimit(v *int) *LiveUpdate {
	if v != nil {
		_u.SetClipsLimit(*v)
	}
	return _u
}

// AddClipsLimit adds value to the "clips_limit" field.
func (_u *LiveUpdate) AddClipsLimit(v int) *LiveUpdate {
	_u.mutation.AddClipsLimit(v)
	return _u
}

// SetClipsIntervalDays sets the "clips_interval_days" field.
func (_u *LiveUpdate) SetClipsIntervalDays(v int) *LiveUpdate {
	_u.mutation.ResetClipsIntervalDays()
	_u.mutation.SetClipsIntervalDays(v)
	return _u
}

// SetNillableClipsIntervalDays sets the "clips_interval_days" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableClipsIntervalDays(v *int) *LiveUpdate {
	if v != nil {
		_u.SetClipsIntervalDays(*v)
	}
	return _u
}

// AddClipsIntervalDays adds value to the "clips_interval_days" field.
func (_u *LiveUpdate) AddClipsIntervalDays(v int) *LiveUpdate {
	_u.mutation.AddClipsIntervalDays(v)
	return _u
}

// SetClipsLastChecked sets the "clips_last_checked" field.
func (_u *LiveUpdate) SetClipsLastChecked(v time.Time) *LiveUpdate {
	_u.mutation.SetClipsLastChecked(v)
	return _u
}

// SetNillableClipsLastChecked sets the "clips_last_checked" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableClipsLastChecked(v *time.Time) *LiveUpdate {
	if v != nil {
		_u.SetClipsLastChecked(*v)
	}
	return _u
}

// ClearClipsLastChecked clears the value of the "clips_last_checked" field.
func (_u *LiveUpdate) ClearClipsLastChecked() *LiveUpdate {
	_u.mutation.ClearClipsLastChecked()
	return _u
}

// SetClipsIgnoreLastChecked sets the "clips_ignore_last_checked" field.
func (_u *LiveUpdate) SetClipsIgnoreLastChecked(v bool) *LiveUpdate {
	_u.mutation.SetClipsIgnoreLastChecked(v)
	return _u
}

// SetNillableClipsIgnoreLastChecked sets the "clips_ignore_last_checked" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableClipsIgnoreLastChecked(v *bool) *LiveUpdate {
	if v != nil {
		_u.SetClipsIgnoreLastChecked(*v)
	}
	return _u
}

// SetUpdateMetadataMinutes sets the "update_metadata_minutes" field.
func (_u *LiveUpdate) SetUpdateMetadataMinutes(v int) *LiveUpdate {
	_u.mutation.ResetUpdateMetadataMinutes()
	_u.mutation.SetUpdateMetadataMinutes(v)
	return _u
}

// SetNillableUpdateMetadataMinutes sets the "update_metadata_minutes" field if the given value is not nil.
func (_u *LiveUpdate) SetNillableUpdateMetadataMinutes(v *int) *LiveUpdate {
	if v != nil {
		_u.SetUpdateMetadataMinutes(*v)
	}
	return _u
}

// AddUpdateMetadataMinutes adds value to the "update_metadata_minutes" field.
func (_u *LiveUpdate) AddUpdateMetadataMinutes(v int) *LiveUpdate {
	_u.mutation.AddUpdateMetadataMinutes(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LiveUpdate) SetUpdatedAt(v time.Time) *LiveUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (_u *LiveUpdate) SetChannelID(id uuid.UUID) *LiveUpdate {
	_u.mutation.SetChannelID(id)
	return _u
}

// SetChannel sets the "channel" edge to the Channel entity.
func (_u *LiveUpdate) SetChannel(v *Channel) *LiveUpdate {
	return _u.SetChannelID(v.ID)
}

// AddCategoryIDs adds the "categories" edge to the LiveCategory entity by IDs.
func (_u *LiveUpdate) AddCategoryIDs(ids ...uuid.UUID) *LiveUpdate {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategories adds the "categories" edges to the LiveCategory entity.
func (_u *LiveUpdate) AddCategories(v ...*LiveCategory) *LiveUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// AddTitleRegexIDs adds the "title_regex" edge to the LiveTitleRegex entity by IDs.
func (_u *LiveUpdate) AddTitleRegexIDs(ids ...uuid.UUID) *LiveUpdate {
	_u.mutation.AddTitleRegexIDs(ids...)
	return _u
}

// AddTitleRegex adds the "title_regex" edges to the LiveTitleRegex entity.
func (_u *LiveUpdate) AddTitleRegex(v ...*LiveTitleRegex) *LiveUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTitleRegexIDs(ids...)
}

// Mutation returns the LiveMutation object of the builder.
func (_u *LiveUpdate) Mutation() *LiveMutation {
	return _u.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (_u *LiveUpdate) ClearChannel() *LiveUpdate {
	_u.mutation.ClearChannel()
	return _u
}

// ClearCategories clears all "categories" edges to the LiveCategory entity.
func (_u *LiveUpdate) ClearCategories() *LiveUpdate {
	_u.mutation.ClearCategories()
	return _u
}

// RemoveCategoryIDs removes the "categories" edge to LiveCategory entities by IDs.
func (_u *LiveUpdate) RemoveCategoryIDs(ids ...uuid.UUID) *LiveUpdate {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategories removes "categories" edges to LiveCategory entities.
func (_u *LiveUpdate) RemoveCategories(v ...*LiveCategory) *LiveUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearTitleRegex clears all "title_regex" edges to the LiveTitleRegex entity.
func (_u *LiveUpdate) ClearTitleRegex() *LiveUpdate {
	_u.mutation.ClearTitleRegex()
	return _u
}

// RemoveTitleRegexIDs removes the "title_regex" edge to LiveTitleRegex entities by IDs.
func (_u *LiveUpdate) RemoveTitleRegexIDs(ids ...uuid.UUID) *LiveUpdate {
	_u.mutation.RemoveTitleRegexIDs(ids...)
	return _u
}

// RemoveTitleRegex removes "title_regex" edges to LiveTitleRegex entities.
func (_u *LiveUpdate) RemoveTitleRegex(v ...*LiveTitleRegex) *LiveUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTitleRegexIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *LiveUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LiveUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *LiveUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LiveUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LiveUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := live.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LiveUpdate) check() error {
	if v, ok := _u.mutation.UpdateMetadataMinutes(); ok {
		if err := live.UpdateMetadataMinutesValidator(v); err != nil {
			return &ValidationError{Name: "update_metadata_minutes", err: fmt.Errorf(`ent: validator failed for field "Live.update_metadata_minutes": %w`, err)}
		}
	}
	if _u.mutation.ChannelCleared() && len(_u.mutation.ChannelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Live.channel"`)
	}
	return nil
}

func (_u *LiveUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(live.Table, live.Columns, sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.WatchLive(); ok {
		_spec.SetField(live.FieldWatchLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.WatchVod(); ok {
		_spec.SetField(live.FieldWatchVod, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadArchives(); ok {
		_spec.SetField(live.FieldDownloadArchives, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadHighlights(); ok {
		_spec.SetField(live.FieldDownloadHighlights, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadUploads(); ok {
		_spec.SetField(live.FieldDownloadUploads, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadSubOnly(); ok {
		_spec.SetField(live.FieldDownloadSubOnly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsLive(); ok {
		_spec.SetField(live.FieldIsLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ArchiveChat(); ok {
		_spec.SetField(live.FieldArchiveChat, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Resolution(); ok {
		_spec.SetField(live.FieldResolution, field.TypeString, value)
	}
	if _u.mutation.ResolutionCleared() {
		_spec.ClearField(live.FieldResolution, field.TypeString)
	}
	if value, ok := _u.mutation.LastLive(); ok {
		_spec.SetField(live.FieldLastLive, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenderChat(); ok {
		_spec.SetField(live.FieldRenderChat, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VideoAge(); ok {
		_spec.SetField(live.FieldVideoAge, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVideoAge(); ok {
		_spec.AddField(live.FieldVideoAge, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ApplyCategoriesToLive(); ok {
		_spec.SetField(live.FieldApplyCategoriesToLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.StrictCategoriesLive(); ok {
		_spec.SetField(live.FieldStrictCategoriesLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.BlacklistCategoriesLive(); ok {
		_spec.SetField(live.FieldBlacklistCategoriesLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.WatchClips(); ok {
		_spec.SetField(live.FieldWatchClips, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ClipsLimit(); ok {
		_spec.SetField(live.FieldClipsLimit, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedClipsLimit(); ok {
		_spec.AddField(live.FieldClipsLimit, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ClipsIntervalDays(); ok {
		_spec.SetField(live.FieldClipsIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedClipsIntervalDays(); ok {
		_spec.AddField(live.FieldClipsIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ClipsLastChecked(); ok {
		_spec.SetField(live.FieldClipsLastChecked, field.TypeTime, value)
	}
	if _u.mutation.ClipsLastCheckedCleared() {
		_spec.ClearField(live.FieldClipsLastChecked, field.TypeTime)
	}
	if value, ok := _u.mutation.ClipsIgnoreLastChecked(); ok {
		_spec.SetField(live.FieldClipsIgnoreLastChecked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdateMetadataMinutes(); ok {
		_spec.SetField(live.FieldUpdateMetadataMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUpdateMetadataMinutes(); ok {
		_spec.AddField(live.FieldUpdateMetadataMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(live.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   live.ChannelTable,
			Columns: []string{live.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   live.ChannelTable,
			Columns: []string{live.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.CategoriesTable,
			Columns: []string{live.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !_u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.CategoriesTable,
			Columns: []string{live.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.CategoriesTable,
			Columns: []string{live.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TitleRegexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.TitleRegexTable,
			Columns: []string{live.TitleRegexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTitleRegexIDs(); len(nodes) > 0 && !_u.mutation.TitleRegexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.TitleRegexTable,
			Columns: []string{live.TitleRegexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TitleRegexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.TitleRegexTable,
			Columns: []string{live.TitleRegexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{live.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// LiveUpdateOne is the builder for updating a single Live entity.
type LiveUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LiveMutation
}

// SetWatchLive sets the "watch_live" field.
func (_u *LiveUpdateOne) SetWatchLive(v bool) *LiveUpdateOne {
	_u.mutation.SetWatchLive(v)
	return _u
}

// SetNillableWatchLive sets the "watch_live" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableWatchLive(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetWatchLive(*v)
	}
	return _u
}

// SetWatchVod sets the "watch_vod" field.
func (_u *LiveUpdateOne) SetWatchVod(v bool) *LiveUpdateOne {
	_u.mutation.SetWatchVod(v)
	return _u
}

// SetNillableWatchVod sets the "watch_vod" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableWatchVod(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetWatchVod(*v)
	}
	return _u
}

// SetDownloadArchives sets the "download_archives" field.
func (_u *LiveUpdateOne) SetDownloadArchives(v bool) *LiveUpdateOne {
	_u.mutation.SetDownloadArchives(v)
	return _u
}

// SetNillableDownloadArchives sets the "download_archives" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableDownloadArchives(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetDownloadArchives(*v)
	}
	return _u
}

// SetDownloadHighlights sets the "download_highlights" field.
func (_u *LiveUpdateOne) SetDownloadHighlights(v bool) *LiveUpdateOne {
	_u.mutation.SetDownloadHighlights(v)
	return _u
}

// SetNillableDownloadHighlights sets the "download_highlights" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableDownloadHighlights(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetDownloadHighlights(*v)
	}
	return _u
}

// SetDownloadUploads sets the "download_uploads" field.
func (_u *LiveUpdateOne) SetDownloadUploads(v bool) *LiveUpdateOne {
	_u.mutation.SetDownloadUploads(v)
	return _u
}

// SetNillableDownloadUploads sets the "download_uploads" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableDownloadUploads(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetDownloadUploads(*v)
	}
	return _u
}

// SetDownloadSubOnly sets the "download_sub_only" field.
func (_u *LiveUpdateOne) SetDownloadSubOnly(v bool) *LiveUpdateOne {
	_u.mutation.SetDownloadSubOnly(v)
	return _u
}

// SetNillableDownloadSubOnly sets the "download_sub_only" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableDownloadSubOnly(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetDownloadSubOnly(*v)
	}
	return _u
}

// SetIsLive sets the "is_live" field.
func (_u *LiveUpdateOne) SetIsLive(v bool) *LiveUpdateOne {
	_u.mutation.SetIsLive(v)
	return _u
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableIsLive(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetIsLive(*v)
	}
	return _u
}

// SetArchiveChat sets the "archive_chat" field.
func (_u *LiveUpdateOne) SetArchiveChat(v bool) *LiveUpdateOne {
	_u.mutation.SetArchiveChat(v)
	return _u
}

// SetNillableArchiveChat sets the "archive_chat" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableArchiveChat(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetArchiveChat(*v)
	}
	return _u
}

// SetResolution sets the "resolution" field.
func (_u *LiveUpdateOne) SetResolution(v string) *LiveUpdateOne {
	_u.mutation.SetResolution(v)
	return _u
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableResolution(v *string) *LiveUpdateOne {
	if v != nil {
		_u.SetResolution(*v)
	}
	return _u
}

// ClearResolution clears the value of the "resolution" field.
func (_u *LiveUpdateOne) ClearResolution() *LiveUpdateOne {
	_u.mutation.ClearResolution()
	return _u
}

// SetLastLive sets the "last_live" field.
func (_u *LiveUpdateOne) SetLastLive(v time.Time) *LiveUpdateOne {
	_u.mutation.SetLastLive(v)
	return _u
}

// SetNillableLastLive sets the "last_live" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableLastLive(v *time.Time) *LiveUpdateOne {
	if v != nil {
		_u.SetLastLive(*v)
	}
	return _u
}

// SetRenderChat sets the "render_chat" field.
func (_u *LiveUpdateOne) SetRenderChat(v bool) *LiveUpdateOne {
	_u.mutation.SetRenderChat(v)
	return _u
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableRenderChat(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetRenderChat(*v)
	}
	return _u
}

// SetVideoAge sets the "video_age" field.
func (_u *LiveUpdateOne) SetVideoAge(v int64) *LiveUpdateOne {
	_u.mutation.ResetVideoAge()
	_u.mutation.SetVideoAge(v)
	return _u
}

// SetNillableVideoAge sets the "video_age" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableVideoAge(v *int64) *LiveUpdateOne {
	if v != nil {
		_u.SetVideoAge(*v)
	}
	return _u
}

// AddVideoAge adds value to the "video_age" field.
func (_u *LiveUpdateOne) AddVideoAge(v int64) *LiveUpdateOne {
	_u.mutation.AddVideoAge(v)
	return _u
}

// SetApplyCategoriesToLive sets the "apply_categories_to_live" field.
func (_u *LiveUpdateOne) SetApplyCategoriesToLive(v bool) *LiveUpdateOne {
	_u.mutation.SetApplyCategoriesToLive(v)
	return _u
}

// SetNillableApplyCategoriesToLive sets the "apply_categories_to_live" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableApplyCategoriesToLive(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetApplyCategoriesToLive(*v)
	}
	return _u
}

// SetStrictCategoriesLive sets the "strict_categories_live" field.
func (_u *LiveUpdateOne) SetStrictCategoriesLive(v bool) *LiveUpdateOne {
	_u.mutation.SetStrictCategoriesLive(v)
	return _u
}

// SetNillableStrictCategoriesLive sets the "strict_categories_live" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableStrictCategoriesLive(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetStrictCategoriesLive(*v)
	}
	return _u
}

// SetBlacklistCategoriesLive sets the "blacklist_categories_live" field.
func (_u *LiveUpdateOne) SetBlacklistCategoriesLive(v bool) *LiveUpdateOne {
	_u.mutation.SetBlacklistCategoriesLive(v)
	return _u
}

// SetNillableBlacklistCategoriesLive sets the "blacklist_categories_live" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableBlacklistCategoriesLive(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetBlacklistCategoriesLive(*v)
	}
	return _u
}

// SetWatchClips sets the "watch_clips" field.
func (_u *LiveUpdateOne) SetWatchClips(v bool) *LiveUpdateOne {
	_u.mutation.SetWatchClips(v)
	return _u
}

// SetNillableWatchClips sets the "watch_clips" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableWatchClips(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetWatchClips(*v)
	}
	return _u
}

// SetClipsLimit sets the "clips_limit" field.
func (_u *LiveUpdateOne) SetClipsLimit(v int) *LiveUpdateOne {
	_u.mutation.ResetClipsLimit()
	_u.mutation.SetClipsLimit(v)
	return _u
}

// SetNillableClipsLimit sets the "clips_limit" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableClipsLimit(v *int) *LiveUpdateOne {
	if v != nil {
		_u.SetClipsLimit(*v)
	}
	return _u
}

// AddClipsLimit adds value to the "clips_limit" field.
func (_u *LiveUpdateOne) AddClipsLimit(v int) *LiveUpdateOne {
	_u.mutation.AddClipsLimit(v)
	return _u
}

// SetClipsIntervalDays sets the "clips_interval_days" field.
func (_u *LiveUpdateOne) SetClipsIntervalDays(v int) *LiveUpdateOne {
	_u.mutation.ResetClipsIntervalDays()
	_u.mutation.SetClipsIntervalDays(v)
	return _u
}

// SetNillableClipsIntervalDays sets the "clips_interval_days" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableClipsIntervalDays(v *int) *LiveUpdateOne {
	if v != nil {
		_u.SetClipsIntervalDays(*v)
	}
	return _u
}

// AddClipsIntervalDays adds value to the "clips_interval_days" field.
func (_u *LiveUpdateOne) AddClipsIntervalDays(v int) *LiveUpdateOne {
	_u.mutation.AddClipsIntervalDays(v)
	return _u
}

// SetClipsLastChecked sets the "clips_last_checked" field.
func (_u *LiveUpdateOne) SetClipsLastChecked(v time.Time) *LiveUpdateOne {
	_u.mutation.SetClipsLastChecked(v)
	return _u
}

// SetNillableClipsLastChecked sets the "clips_last_checked" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableClipsLastChecked(v *time.Time) *LiveUpdateOne {
	if v != nil {
		_u.SetClipsLastChecked(*v)
	}
	return _u
}

// ClearClipsLastChecked clears the value of the "clips_last_checked" field.
func (_u *LiveUpdateOne) ClearClipsLastChecked() *LiveUpdateOne {
	_u.mutation.ClearClipsLastChecked()
	return _u
}

// SetClipsIgnoreLastChecked sets the "clips_ignore_last_checked" field.
func (_u *LiveUpdateOne) SetClipsIgnoreLastChecked(v bool) *LiveUpdateOne {
	_u.mutation.SetClipsIgnoreLastChecked(v)
	return _u
}

// SetNillableClipsIgnoreLastChecked sets the "clips_ignore_last_checked" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableClipsIgnoreLastChecked(v *bool) *LiveUpdateOne {
	if v != nil {
		_u.SetClipsIgnoreLastChecked(*v)
	}
	return _u
}

// SetUpdateMetadataMinutes sets the "update_metadata_minutes" field.
func (_u *LiveUpdateOne) SetUpdateMetadataMinutes(v int) *LiveUpdateOne {
	_u.mutation.ResetUpdateMetadataMinutes()
	_u.mutation.SetUpdateMetadataMinutes(v)
	return _u
}

// SetNillableUpdateMetadataMinutes sets the "update_metadata_minutes" field if the given value is not nil.
func (_u *LiveUpdateOne) SetNillableUpdateMetadataMinutes(v *int) *LiveUpdateOne {
	if v != nil {
		_u.SetUpdateMetadataMinutes(*v)
	}
	return _u
}

// AddUpdateMetadataMinutes adds value to the "update_metadata_minutes" field.
func (_u *LiveUpdateOne) AddUpdateMetadataMinutes(v int) *LiveUpdateOne {
	_u.mutation.AddUpdateMetadataMinutes(v)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *LiveUpdateOne) SetUpdatedAt(v time.Time) *LiveUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (_u *LiveUpdateOne) SetChannelID(id uuid.UUID) *LiveUpdateOne {
	_u.mutation.SetChannelID(id)
	return _u
}

// SetChannel sets the "channel" edge to the Channel entity.
func (_u *LiveUpdateOne) SetChannel(v *Channel) *LiveUpdateOne {
	return _u.SetChannelID(v.ID)
}

// AddCategoryIDs adds the "categories" edge to the LiveCategory entity by IDs.
func (_u *LiveUpdateOne) AddCategoryIDs(ids ...uuid.UUID) *LiveUpdateOne {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategories adds the "categories" edges to the LiveCategory entity.
func (_u *LiveUpdateOne) AddCategories(v ...*LiveCategory) *LiveUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// AddTitleRegexIDs adds the "title_regex" edge to the LiveTitleRegex entity by IDs.
func (_u *LiveUpdateOne) AddTitleRegexIDs(ids ...uuid.UUID) *LiveUpdateOne {
	_u.mutation.AddTitleRegexIDs(ids...)
	return _u
}

// AddTitleRegex adds the "title_regex" edges to the LiveTitleRegex entity.
func (_u *LiveUpdateOne) AddTitleRegex(v ...*LiveTitleRegex) *LiveUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTitleRegexIDs(ids...)
}

// Mutation returns the LiveMutation object of the builder.
func (_u *LiveUpdateOne) Mutation() *LiveMutation {
	return _u.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (_u *LiveUpdateOne) ClearChannel() *LiveUpdateOne {
	_u.mutation.ClearChannel()
	return _u
}

// ClearCategories clears all "categories" edges to the LiveCategory entity.
func (_u *LiveUpdateOne) ClearCategories() *LiveUpdateOne {
	_u.mutation.ClearCategories()
	return _u
}

// RemoveCategoryIDs removes the "categories" edge to LiveCategory entities by IDs.
func (_u *LiveUpdateOne) RemoveCategoryIDs(ids ...uuid.UUID) *LiveUpdateOne {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategories removes "categories" edges to LiveCategory entities.
func (_u *LiveUpdateOne) RemoveCategories(v ...*LiveCategory) *LiveUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearTitleRegex clears all "title_regex" edges to the LiveTitleRegex entity.
func (_u *LiveUpdateOne) ClearTitleRegex() *LiveUpdateOne {
	_u.mutation.ClearTitleRegex()
	return _u
}

// RemoveTitleRegexIDs removes the "title_regex" edge to LiveTitleRegex entities by IDs.
func (_u *LiveUpdateOne) RemoveTitleRegexIDs(ids ...uuid.UUID) *LiveUpdateOne {
	_u.mutation.RemoveTitleRegexIDs(ids...)
	return _u
}

// RemoveTitleRegex removes "title_regex" edges to LiveTitleRegex entities.
func (_u *LiveUpdateOne) RemoveTitleRegex(v ...*LiveTitleRegex) *LiveUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTitleRegexIDs(ids...)
}

// Where appends a list predicates to the LiveUpdate builder.
func (_u *LiveUpdateOne) Where(ps ...predicate.Live) *LiveUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *LiveUpdateOne) Select(field string, fields ...string) *LiveUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Live entity.
func (_u *LiveUpdateOne) Save(ctx context.Context) (*Live, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *LiveUpdateOne) SaveX(ctx context.Context) *Live {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *LiveUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *LiveUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *LiveUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := live.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *LiveUpdateOne) check() error {
	if v, ok := _u.mutation.UpdateMetadataMinutes(); ok {
		if err := live.UpdateMetadataMinutesValidator(v); err != nil {
			return &ValidationError{Name: "update_metadata_minutes", err: fmt.Errorf(`ent: validator failed for field "Live.update_metadata_minutes": %w`, err)}
		}
	}
	if _u.mutation.ChannelCleared() && len(_u.mutation.ChannelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Live.channel"`)
	}
	return nil
}

func (_u *LiveUpdateOne) sqlSave(ctx context.Context) (_node *Live, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(live.Table, live.Columns, sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Live.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, live.FieldID)
		for _, f := range fields {
			if !live.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != live.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.WatchLive(); ok {
		_spec.SetField(live.FieldWatchLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.WatchVod(); ok {
		_spec.SetField(live.FieldWatchVod, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadArchives(); ok {
		_spec.SetField(live.FieldDownloadArchives, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadHighlights(); ok {
		_spec.SetField(live.FieldDownloadHighlights, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadUploads(); ok {
		_spec.SetField(live.FieldDownloadUploads, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DownloadSubOnly(); ok {
		_spec.SetField(live.FieldDownloadSubOnly, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsLive(); ok {
		_spec.SetField(live.FieldIsLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ArchiveChat(); ok {
		_spec.SetField(live.FieldArchiveChat, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Resolution(); ok {
		_spec.SetField(live.FieldResolution, field.TypeString, value)
	}
	if _u.mutation.ResolutionCleared() {
		_spec.ClearField(live.FieldResolution, field.TypeString)
	}
	if value, ok := _u.mutation.LastLive(); ok {
		_spec.SetField(live.FieldLastLive, field.TypeTime, value)
	}
	if value, ok := _u.mutation.RenderChat(); ok {
		_spec.SetField(live.FieldRenderChat, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VideoAge(); ok {
		_spec.SetField(live.FieldVideoAge, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVideoAge(); ok {
		_spec.AddField(live.FieldVideoAge, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.ApplyCategoriesToLive(); ok {
		_spec.SetField(live.FieldApplyCategoriesToLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.StrictCategoriesLive(); ok {
		_spec.SetField(live.FieldStrictCategoriesLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.BlacklistCategoriesLive(); ok {
		_spec.SetField(live.FieldBlacklistCategoriesLive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.WatchClips(); ok {
		_spec.SetField(live.FieldWatchClips, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ClipsLimit(); ok {
		_spec.SetField(live.FieldClipsLimit, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedClipsLimit(); ok {
		_spec.AddField(live.FieldClipsLimit, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ClipsIntervalDays(); ok {
		_spec.SetField(live.FieldClipsIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedClipsIntervalDays(); ok {
		_spec.AddField(live.FieldClipsIntervalDays, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ClipsLastChecked(); ok {
		_spec.SetField(live.FieldClipsLastChecked, field.TypeTime, value)
	}
	if _u.mutation.ClipsLastCheckedCleared() {
		_spec.ClearField(live.FieldClipsLastChecked, field.TypeTime)
	}
	if value, ok := _u.mutation.ClipsIgnoreLastChecked(); ok {
		_spec.SetField(live.FieldClipsIgnoreLastChecked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdateMetadataMinutes(); ok {
		_spec.SetField(live.FieldUpdateMetadataMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedUpdateMetadataMinutes(); ok {
		_spec.AddField(live.FieldUpdateMetadataMinutes, field.TypeInt, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(live.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   live.ChannelTable,
			Columns: []string{live.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   live.ChannelTable,
			Columns: []string{live.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.CategoriesTable,
			Columns: []string{live.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !_u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.CategoriesTable,
			Columns: []string{live.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.CategoriesTable,
			Columns: []string{live.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TitleRegexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.TitleRegexTable,
			Columns: []string{live.TitleRegexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTitleRegexIDs(); len(nodes) > 0 && !_u.mutation.TitleRegexCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.TitleRegexTable,
			Columns: []string{live.TitleRegexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TitleRegexIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   live.TitleRegexTable,
			Columns: []string{live.TitleRegexColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(livetitleregex.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Live{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{live.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
