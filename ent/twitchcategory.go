// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/zibbp/ganymede/ent/twitchcategory"
)

// TwitchCategory is the model entity for the TwitchCategory schema.
type TwitchCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// BoxArtURL holds the value of the "box_art_url" field.
	BoxArtURL string `json:"box_art_url,omitempty"`
	// IgdbID holds the value of the "igdb_id" field.
	IgdbID string `json:"igdb_id,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TwitchCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case twitchcategory.FieldID, twitchcategory.FieldName, twitchcategory.FieldBoxArtURL, twitchcategory.FieldIgdbID:
			values[i] = new(sql.NullString)
		case twitchcategory.FieldUpdatedAt, twitchcategory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TwitchCategory fields.
func (_m *TwitchCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case twitchcategory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case twitchcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case twitchcategory.FieldBoxArtURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field box_art_url", values[i])
			} else if value.Valid {
				_m.BoxArtURL = value.String
			}
		case twitchcategory.FieldIgdbID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field igdb_id", values[i])
			} else if value.Valid {
				_m.IgdbID = value.String
			}
		case twitchcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case twitchcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TwitchCategory.
// This includes values selected through modifiers, order, etc.
func (_m *TwitchCategory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this TwitchCategory.
// Note that you need to call TwitchCategory.Unwrap() before calling this method if this TwitchCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TwitchCategory) Update() *TwitchCategoryUpdateOne {
	return NewTwitchCategoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TwitchCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TwitchCategory) Unwrap() *TwitchCategory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TwitchCategory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TwitchCategory) String() string {
	var builder strings.Builder
	builder.WriteString("TwitchCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("box_art_url=")
	builder.WriteString(_m.BoxArtURL)
	builder.WriteString(", ")
	builder.WriteString("igdb_id=")
	builder.WriteString(_m.IgdbID)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TwitchCategories is a parsable slice of TwitchCategory.
type TwitchCategories []*TwitchCategory
