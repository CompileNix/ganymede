// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playlistrule"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
	"github.com/zibbp/ganymede/internal/utils"
)

// PlaylistRule is the model entity for the PlaylistRule schema.
type PlaylistRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The name of the rule, used for display purposes.
	Name string `json:"name,omitempty"`
	// The field of the rule, used to determine which property of the VOD the rule applies to.
	Field utils.PlaylistRuleField `json:"field,omitempty"`
	// The operator of the rule, used to determine how the rule is applied.
	Operator utils.PlaylistRuleOperator `json:"operator,omitempty"`
	// Value to match against.
	Value string `json:"value,omitempty"`
	// Order within group
	Position int `json:"position,omitempty"`
	// Is the rule active?
	Enabled bool `json:"enabled,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistRuleQuery when eager-loading is set.
	Edges                     PlaylistRuleEdges `json:"edges"`
	playlist_rule_group_rules *uuid.UUID
	selectValues              sql.SelectValues
}

// PlaylistRuleEdges holds the relations/edges for other nodes in the graph.
type PlaylistRuleEdges struct {
	// Group holds the value of the group edge.
	Group *PlaylistRuleGroup `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistRuleEdges) GroupOrErr() (*PlaylistRuleGroup, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: playlistrulegroup.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaylistRule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlistrule.FieldEnabled:
			values[i] = new(sql.NullBool)
		case playlistrule.FieldPosition:
			values[i] = new(sql.NullInt64)
		case playlistrule.FieldName, playlistrule.FieldField, playlistrule.FieldOperator, playlistrule.FieldValue:
			values[i] = new(sql.NullString)
		case playlistrule.FieldID:
			values[i] = new(uuid.UUID)
		case playlistrule.ForeignKeys[0]: // playlist_rule_group_rules
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaylistRule fields.
func (pr *PlaylistRule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlistrule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case playlistrule.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case playlistrule.FieldField:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field field", values[i])
			} else if value.Valid {
				pr.Field = utils.PlaylistRuleField(value.String)
			}
		case playlistrule.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				pr.Operator = utils.PlaylistRuleOperator(value.String)
			}
		case playlistrule.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				pr.Value = value.String
			}
		case playlistrule.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				pr.Position = int(value.Int64)
			}
		case playlistrule.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				pr.Enabled = value.Bool
			}
		case playlistrule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field playlist_rule_group_rules", values[i])
			} else if value.Valid {
				pr.playlist_rule_group_rules = new(uuid.UUID)
				*pr.playlist_rule_group_rules = *value.S.(*uuid.UUID)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the PlaylistRule.
// This includes values selected through modifiers, order, etc.
func (pr *PlaylistRule) GetValue(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the PlaylistRule entity.
func (pr *PlaylistRule) QueryGroup() *PlaylistRuleGroupQuery {
	return NewPlaylistRuleClient(pr.config).QueryGroup(pr)
}

// Update returns a builder for updating this PlaylistRule.
// Note that you need to call PlaylistRule.Unwrap() before calling this method if this PlaylistRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PlaylistRule) Update() *PlaylistRuleUpdateOne {
	return NewPlaylistRuleClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PlaylistRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PlaylistRule) Unwrap() *PlaylistRule {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaylistRule is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PlaylistRule) String() string {
	var builder strings.Builder
	builder.WriteString("PlaylistRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("field=")
	builder.WriteString(fmt.Sprintf("%v", pr.Field))
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(fmt.Sprintf("%v", pr.Operator))
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(pr.Value)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", pr.Position))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", pr.Enabled))
	builder.WriteByte(')')
	return builder.String()
}

// PlaylistRules is a parsable slice of PlaylistRule.
type PlaylistRules []*PlaylistRule
