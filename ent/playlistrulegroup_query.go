// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/playlistrule"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
	"github.com/zibbp/ganymede/ent/predicate"
)

// PlaylistRuleGroupQuery is the builder for querying PlaylistRuleGroup entities.
type PlaylistRuleGroupQuery struct {
	config
	ctx          *QueryContext
	order        []playlistrulegroup.OrderOption
	inters       []Interceptor
	predicates   []predicate.PlaylistRuleGroup
	withPlaylist *PlaylistQuery
	withRules    *PlaylistRuleQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlaylistRuleGroupQuery builder.
func (prgq *PlaylistRuleGroupQuery) Where(ps ...predicate.PlaylistRuleGroup) *PlaylistRuleGroupQuery {
	prgq.predicates = append(prgq.predicates, ps...)
	return prgq
}

// Limit the number of records to be returned by this query.
func (prgq *PlaylistRuleGroupQuery) Limit(limit int) *PlaylistRuleGroupQuery {
	prgq.ctx.Limit = &limit
	return prgq
}

// Offset to start from.
func (prgq *PlaylistRuleGroupQuery) Offset(offset int) *PlaylistRuleGroupQuery {
	prgq.ctx.Offset = &offset
	return prgq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (prgq *PlaylistRuleGroupQuery) Unique(unique bool) *PlaylistRuleGroupQuery {
	prgq.ctx.Unique = &unique
	return prgq
}

// Order specifies how the records should be ordered.
func (prgq *PlaylistRuleGroupQuery) Order(o ...playlistrulegroup.OrderOption) *PlaylistRuleGroupQuery {
	prgq.order = append(prgq.order, o...)
	return prgq
}

// QueryPlaylist chains the current query on the "playlist" edge.
func (prgq *PlaylistRuleGroupQuery) QueryPlaylist() *PlaylistQuery {
	query := (&PlaylistClient{config: prgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playlistrulegroup.Table, playlistrulegroup.FieldID, selector),
			sqlgraph.To(playlist.Table, playlist.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playlistrulegroup.PlaylistTable, playlistrulegroup.PlaylistColumn),
		)
		fromU = sqlgraph.SetNeighbors(prgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRules chains the current query on the "rules" edge.
func (prgq *PlaylistRuleGroupQuery) QueryRules() *PlaylistRuleQuery {
	query := (&PlaylistRuleClient{config: prgq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := prgq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := prgq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playlistrulegroup.Table, playlistrulegroup.FieldID, selector),
			sqlgraph.To(playlistrule.Table, playlistrule.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playlistrulegroup.RulesTable, playlistrulegroup.RulesColumn),
		)
		fromU = sqlgraph.SetNeighbors(prgq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlaylistRuleGroup entity from the query.
// Returns a *NotFoundError when no PlaylistRuleGroup was found.
func (prgq *PlaylistRuleGroupQuery) First(ctx context.Context) (*PlaylistRuleGroup, error) {
	nodes, err := prgq.Limit(1).All(setContextOp(ctx, prgq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{playlistrulegroup.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) FirstX(ctx context.Context) *PlaylistRuleGroup {
	node, err := prgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlaylistRuleGroup ID from the query.
// Returns a *NotFoundError when no PlaylistRuleGroup ID was found.
func (prgq *PlaylistRuleGroupQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = prgq.Limit(1).IDs(setContextOp(ctx, prgq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{playlistrulegroup.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := prgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlaylistRuleGroup entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlaylistRuleGroup entity is found.
// Returns a *NotFoundError when no PlaylistRuleGroup entities are found.
func (prgq *PlaylistRuleGroupQuery) Only(ctx context.Context) (*PlaylistRuleGroup, error) {
	nodes, err := prgq.Limit(2).All(setContextOp(ctx, prgq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{playlistrulegroup.Label}
	default:
		return nil, &NotSingularError{playlistrulegroup.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) OnlyX(ctx context.Context) *PlaylistRuleGroup {
	node, err := prgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlaylistRuleGroup ID in the query.
// Returns a *NotSingularError when more than one PlaylistRuleGroup ID is found.
// Returns a *NotFoundError when no entities are found.
func (prgq *PlaylistRuleGroupQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = prgq.Limit(2).IDs(setContextOp(ctx, prgq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{playlistrulegroup.Label}
	default:
		err = &NotSingularError{playlistrulegroup.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := prgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlaylistRuleGroups.
func (prgq *PlaylistRuleGroupQuery) All(ctx context.Context) ([]*PlaylistRuleGroup, error) {
	ctx = setContextOp(ctx, prgq.ctx, ent.OpQueryAll)
	if err := prgq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PlaylistRuleGroup, *PlaylistRuleGroupQuery]()
	return withInterceptors[[]*PlaylistRuleGroup](ctx, prgq, qr, prgq.inters)
}

// AllX is like All, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) AllX(ctx context.Context) []*PlaylistRuleGroup {
	nodes, err := prgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlaylistRuleGroup IDs.
func (prgq *PlaylistRuleGroupQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if prgq.ctx.Unique == nil && prgq.path != nil {
		prgq.Unique(true)
	}
	ctx = setContextOp(ctx, prgq.ctx, ent.OpQueryIDs)
	if err = prgq.Select(playlistrulegroup.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := prgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (prgq *PlaylistRuleGroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, prgq.ctx, ent.OpQueryCount)
	if err := prgq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, prgq, querierCount[*PlaylistRuleGroupQuery](), prgq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) CountX(ctx context.Context) int {
	count, err := prgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (prgq *PlaylistRuleGroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, prgq.ctx, ent.OpQueryExist)
	switch _, err := prgq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (prgq *PlaylistRuleGroupQuery) ExistX(ctx context.Context) bool {
	exist, err := prgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlaylistRuleGroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (prgq *PlaylistRuleGroupQuery) Clone() *PlaylistRuleGroupQuery {
	if prgq == nil {
		return nil
	}
	return &PlaylistRuleGroupQuery{
		config:       prgq.config,
		ctx:          prgq.ctx.Clone(),
		order:        append([]playlistrulegroup.OrderOption{}, prgq.order...),
		inters:       append([]Interceptor{}, prgq.inters...),
		predicates:   append([]predicate.PlaylistRuleGroup{}, prgq.predicates...),
		withPlaylist: prgq.withPlaylist.Clone(),
		withRules:    prgq.withRules.Clone(),
		// clone intermediate query.
		sql:  prgq.sql.Clone(),
		path: prgq.path,
	}
}

// WithPlaylist tells the query-builder to eager-load the nodes that are connected to
// the "playlist" edge. The optional arguments are used to configure the query builder of the edge.
func (prgq *PlaylistRuleGroupQuery) WithPlaylist(opts ...func(*PlaylistQuery)) *PlaylistRuleGroupQuery {
	query := (&PlaylistClient{config: prgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prgq.withPlaylist = query
	return prgq
}

// WithRules tells the query-builder to eager-load the nodes that are connected to
// the "rules" edge. The optional arguments are used to configure the query builder of the edge.
func (prgq *PlaylistRuleGroupQuery) WithRules(opts ...func(*PlaylistRuleQuery)) *PlaylistRuleGroupQuery {
	query := (&PlaylistRuleClient{config: prgq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	prgq.withRules = query
	return prgq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Operator playlistrulegroup.Operator `json:"operator,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlaylistRuleGroup.Query().
//		GroupBy(playlistrulegroup.FieldOperator).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (prgq *PlaylistRuleGroupQuery) GroupBy(field string, fields ...string) *PlaylistRuleGroupGroupBy {
	prgq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PlaylistRuleGroupGroupBy{build: prgq}
	grbuild.flds = &prgq.ctx.Fields
	grbuild.label = playlistrulegroup.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Operator playlistrulegroup.Operator `json:"operator,omitempty"`
//	}
//
//	client.PlaylistRuleGroup.Query().
//		Select(playlistrulegroup.FieldOperator).
//		Scan(ctx, &v)
func (prgq *PlaylistRuleGroupQuery) Select(fields ...string) *PlaylistRuleGroupSelect {
	prgq.ctx.Fields = append(prgq.ctx.Fields, fields...)
	sbuild := &PlaylistRuleGroupSelect{PlaylistRuleGroupQuery: prgq}
	sbuild.label = playlistrulegroup.Label
	sbuild.flds, sbuild.scan = &prgq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PlaylistRuleGroupSelect configured with the given aggregations.
func (prgq *PlaylistRuleGroupQuery) Aggregate(fns ...AggregateFunc) *PlaylistRuleGroupSelect {
	return prgq.Select().Aggregate(fns...)
}

func (prgq *PlaylistRuleGroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range prgq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, prgq); err != nil {
				return err
			}
		}
	}
	for _, f := range prgq.ctx.Fields {
		if !playlistrulegroup.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if prgq.path != nil {
		prev, err := prgq.path(ctx)
		if err != nil {
			return err
		}
		prgq.sql = prev
	}
	return nil
}

func (prgq *PlaylistRuleGroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlaylistRuleGroup, error) {
	var (
		nodes       = []*PlaylistRuleGroup{}
		withFKs     = prgq.withFKs
		_spec       = prgq.querySpec()
		loadedTypes = [2]bool{
			prgq.withPlaylist != nil,
			prgq.withRules != nil,
		}
	)
	if prgq.withPlaylist != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, playlistrulegroup.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PlaylistRuleGroup).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PlaylistRuleGroup{config: prgq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, prgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := prgq.withPlaylist; query != nil {
		if err := prgq.loadPlaylist(ctx, query, nodes, nil,
			func(n *PlaylistRuleGroup, e *Playlist) { n.Edges.Playlist = e }); err != nil {
			return nil, err
		}
	}
	if query := prgq.withRules; query != nil {
		if err := prgq.loadRules(ctx, query, nodes,
			func(n *PlaylistRuleGroup) { n.Edges.Rules = []*PlaylistRule{} },
			func(n *PlaylistRuleGroup, e *PlaylistRule) { n.Edges.Rules = append(n.Edges.Rules, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (prgq *PlaylistRuleGroupQuery) loadPlaylist(ctx context.Context, query *PlaylistQuery, nodes []*PlaylistRuleGroup, init func(*PlaylistRuleGroup), assign func(*PlaylistRuleGroup, *Playlist)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*PlaylistRuleGroup)
	for i := range nodes {
		if nodes[i].playlist_rule_groups == nil {
			continue
		}
		fk := *nodes[i].playlist_rule_groups
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(playlist.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "playlist_rule_groups" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (prgq *PlaylistRuleGroupQuery) loadRules(ctx context.Context, query *PlaylistRuleQuery, nodes []*PlaylistRuleGroup, init func(*PlaylistRuleGroup), assign func(*PlaylistRuleGroup, *PlaylistRule)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*PlaylistRuleGroup)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlaylistRule(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(playlistrulegroup.RulesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.playlist_rule_group_rules
		if fk == nil {
			return fmt.Errorf(`foreign-key "playlist_rule_group_rules" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "playlist_rule_group_rules" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (prgq *PlaylistRuleGroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := prgq.querySpec()
	_spec.Node.Columns = prgq.ctx.Fields
	if len(prgq.ctx.Fields) > 0 {
		_spec.Unique = prgq.ctx.Unique != nil && *prgq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, prgq.driver, _spec)
}

func (prgq *PlaylistRuleGroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(playlistrulegroup.Table, playlistrulegroup.Columns, sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID))
	_spec.From = prgq.sql
	if unique := prgq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if prgq.path != nil {
		_spec.Unique = true
	}
	if fields := prgq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlistrulegroup.FieldID)
		for i := range fields {
			if fields[i] != playlistrulegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := prgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := prgq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := prgq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := prgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (prgq *PlaylistRuleGroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(prgq.driver.Dialect())
	t1 := builder.Table(playlistrulegroup.Table)
	columns := prgq.ctx.Fields
	if len(columns) == 0 {
		columns = playlistrulegroup.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if prgq.sql != nil {
		selector = prgq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if prgq.ctx.Unique != nil && *prgq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range prgq.predicates {
		p(selector)
	}
	for _, p := range prgq.order {
		p(selector)
	}
	if offset := prgq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := prgq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PlaylistRuleGroupGroupBy is the group-by builder for PlaylistRuleGroup entities.
type PlaylistRuleGroupGroupBy struct {
	selector
	build *PlaylistRuleGroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (prggb *PlaylistRuleGroupGroupBy) Aggregate(fns ...AggregateFunc) *PlaylistRuleGroupGroupBy {
	prggb.fns = append(prggb.fns, fns...)
	return prggb
}

// Scan applies the selector query and scans the result into the given value.
func (prggb *PlaylistRuleGroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prggb.build.ctx, ent.OpQueryGroupBy)
	if err := prggb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaylistRuleGroupQuery, *PlaylistRuleGroupGroupBy](ctx, prggb.build, prggb, prggb.build.inters, v)
}

func (prggb *PlaylistRuleGroupGroupBy) sqlScan(ctx context.Context, root *PlaylistRuleGroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(prggb.fns))
	for _, fn := range prggb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*prggb.flds)+len(prggb.fns))
		for _, f := range *prggb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*prggb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prggb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PlaylistRuleGroupSelect is the builder for selecting fields of PlaylistRuleGroup entities.
type PlaylistRuleGroupSelect struct {
	*PlaylistRuleGroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (prgs *PlaylistRuleGroupSelect) Aggregate(fns ...AggregateFunc) *PlaylistRuleGroupSelect {
	prgs.fns = append(prgs.fns, fns...)
	return prgs
}

// Scan applies the selector query and scans the result into the given value.
func (prgs *PlaylistRuleGroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, prgs.ctx, ent.OpQuerySelect)
	if err := prgs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PlaylistRuleGroupQuery, *PlaylistRuleGroupSelect](ctx, prgs.PlaylistRuleGroupQuery, prgs, prgs.inters, v)
}

func (prgs *PlaylistRuleGroupSelect) sqlScan(ctx context.Context, root *PlaylistRuleGroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(prgs.fns))
	for _, fn := range prgs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*prgs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := prgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
