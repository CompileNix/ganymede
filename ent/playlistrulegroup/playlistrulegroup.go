// Code generated by ent, DO NOT EDIT.

package playlistrulegroup

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the playlistrulegroup type in the database.
	Label = "playlist_rule_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// EdgePlaylist holds the string denoting the playlist edge name in mutations.
	EdgePlaylist = "playlist"
	// EdgeRules holds the string denoting the rules edge name in mutations.
	EdgeRules = "rules"
	// Table holds the table name of the playlistrulegroup in the database.
	Table = "playlist_rule_groups"
	// PlaylistTable is the table that holds the playlist relation/edge.
	PlaylistTable = "playlist_rule_groups"
	// PlaylistInverseTable is the table name for the Playlist entity.
	// It exists in this package in order to avoid circular dependency with the "playlist" package.
	PlaylistInverseTable = "playlists"
	// PlaylistColumn is the table column denoting the playlist relation/edge.
	PlaylistColumn = "playlist_rule_groups"
	// RulesTable is the table that holds the rules relation/edge.
	RulesTable = "playlist_rules"
	// RulesInverseTable is the table name for the PlaylistRule entity.
	// It exists in this package in order to avoid circular dependency with the "playlistrule" package.
	RulesInverseTable = "playlist_rules"
	// RulesColumn is the table column denoting the rules relation/edge.
	RulesColumn = "playlist_rule_group_rules"
)

// Columns holds all SQL columns for playlistrulegroup fields.
var Columns = []string{
	FieldID,
	FieldOperator,
	FieldPosition,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "playlist_rule_groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"playlist_rule_groups",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPosition holds the default value on creation for the "position" field.
	DefaultPosition int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Operator defines the type for the "operator" enum field.
type Operator string

// OperatorAND is the default value of the Operator enum.
const DefaultOperator = OperatorAND

// Operator values.
const (
	OperatorAND Operator = "AND"
	OperatorOR  Operator = "OR"
)

func (o Operator) String() string {
	return string(o)
}

// OperatorValidator is a validator for the "operator" field enum values. It is called by the builders before save.
func OperatorValidator(o Operator) error {
	switch o {
	case OperatorAND, OperatorOR:
		return nil
	default:
		return fmt.Errorf("playlistrulegroup: invalid enum value for operator field: %q", o)
	}
}

// OrderOption defines the ordering options for the PlaylistRuleGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByPlaylistField orders the results by playlist field.
func ByPlaylistField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlaylistStep(), sql.OrderByField(field, opts...))
	}
}

// ByRulesCount orders the results by rules count.
func ByRulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRulesStep(), opts...)
	}
}

// ByRules orders the results by rules terms.
func ByRules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlaylistStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlaylistInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PlaylistTable, PlaylistColumn),
	)
}
func newRulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RulesTable, RulesColumn),
	)
}
