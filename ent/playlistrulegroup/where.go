// Code generated by ent, DO NOT EDIT.

package playlistrulegroup

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldLTE(FieldID, id))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldEQ(FieldPosition, v))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v Operator) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldEQ(FieldOperator, v))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v Operator) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldNEQ(FieldOperator, v))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...Operator) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldIn(FieldOperator, vs...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...Operator) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldNotIn(FieldOperator, vs...))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.FieldLTE(FieldPosition, v))
}

// HasPlaylist applies the HasEdge predicate on the "playlist" edge.
func HasPlaylist() predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PlaylistTable, PlaylistColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlaylistWith applies the HasEdge predicate on the "playlist" edge with a given conditions (other predicates).
func HasPlaylistWith(preds ...predicate.Playlist) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(func(s *sql.Selector) {
		step := newPlaylistStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRules applies the HasEdge predicate on the "rules" edge.
func HasRules() predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RulesTable, RulesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRulesWith applies the HasEdge predicate on the "rules" edge with a given conditions (other predicates).
func HasRulesWith(preds ...predicate.PlaylistRule) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(func(s *sql.Selector) {
		step := newRulesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlaylistRuleGroup) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlaylistRuleGroup) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlaylistRuleGroup) predicate.PlaylistRuleGroup {
	return predicate.PlaylistRuleGroup(sql.NotPredicates(p))
}
