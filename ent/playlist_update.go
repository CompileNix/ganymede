// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/multistreaminfo"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/vod"
)

// PlaylistUpdate is the builder for updating Playlist entities.
type PlaylistUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistMutation
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (_u *PlaylistUpdate) Where(ps ...predicate.Playlist) *PlaylistUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *PlaylistUpdate) SetName(v string) *PlaylistUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlaylistUpdate) SetNillableName(v *string) *PlaylistUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PlaylistUpdate) SetDescription(v string) *PlaylistUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PlaylistUpdate) SetNillableDescription(v *string) *PlaylistUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PlaylistUpdate) ClearDescription() *PlaylistUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (_u *PlaylistUpdate) SetThumbnailPath(v string) *PlaylistUpdate {
	_u.mutation.SetThumbnailPath(v)
	return _u
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (_u *PlaylistUpdate) SetNillableThumbnailPath(v *string) *PlaylistUpdate {
	if v != nil {
		_u.SetThumbnailPath(*v)
	}
	return _u
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (_u *PlaylistUpdate) ClearThumbnailPath() *PlaylistUpdate {
	_u.mutation.ClearThumbnailPath()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlaylistUpdate) SetUpdatedAt(v time.Time) *PlaylistUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddVodIDs adds the "vods" edge to the Vod entity by IDs.
func (_u *PlaylistUpdate) AddVodIDs(ids ...uuid.UUID) *PlaylistUpdate {
	_u.mutation.AddVodIDs(ids...)
	return _u
}

// AddVods adds the "vods" edges to the Vod entity.
func (_u *PlaylistUpdate) AddVods(v ...*Vod) *PlaylistUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVodIDs(ids...)
}

// AddMultistreamInfoIDs adds the "multistream_info" edge to the MultistreamInfo entity by IDs.
func (_u *PlaylistUpdate) AddMultistreamInfoIDs(ids ...int) *PlaylistUpdate {
	_u.mutation.AddMultistreamInfoIDs(ids...)
	return _u
}

// AddMultistreamInfo adds the "multistream_info" edges to the MultistreamInfo entity.
func (_u *PlaylistUpdate) AddMultistreamInfo(v ...*MultistreamInfo) *PlaylistUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMultistreamInfoIDs(ids...)
}

// AddRuleGroupIDs adds the "rule_groups" edge to the PlaylistRuleGroup entity by IDs.
func (_u *PlaylistUpdate) AddRuleGroupIDs(ids ...uuid.UUID) *PlaylistUpdate {
	_u.mutation.AddRuleGroupIDs(ids...)
	return _u
}

// AddRuleGroups adds the "rule_groups" edges to the PlaylistRuleGroup entity.
func (_u *PlaylistUpdate) AddRuleGroups(v ...*PlaylistRuleGroup) *PlaylistUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRuleGroupIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (_u *PlaylistUpdate) Mutation() *PlaylistMutation {
	return _u.mutation
}

// ClearVods clears all "vods" edges to the Vod entity.
func (_u *PlaylistUpdate) ClearVods() *PlaylistUpdate {
	_u.mutation.ClearVods()
	return _u
}

// RemoveVodIDs removes the "vods" edge to Vod entities by IDs.
func (_u *PlaylistUpdate) RemoveVodIDs(ids ...uuid.UUID) *PlaylistUpdate {
	_u.mutation.RemoveVodIDs(ids...)
	return _u
}

// RemoveVods removes "vods" edges to Vod entities.
func (_u *PlaylistUpdate) RemoveVods(v ...*Vod) *PlaylistUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVodIDs(ids...)
}

// ClearMultistreamInfo clears all "multistream_info" edges to the MultistreamInfo entity.
func (_u *PlaylistUpdate) ClearMultistreamInfo() *PlaylistUpdate {
	_u.mutation.ClearMultistreamInfo()
	return _u
}

// RemoveMultistreamInfoIDs removes the "multistream_info" edge to MultistreamInfo entities by IDs.
func (_u *PlaylistUpdate) RemoveMultistreamInfoIDs(ids ...int) *PlaylistUpdate {
	_u.mutation.RemoveMultistreamInfoIDs(ids...)
	return _u
}

// RemoveMultistreamInfo removes "multistream_info" edges to MultistreamInfo entities.
func (_u *PlaylistUpdate) RemoveMultistreamInfo(v ...*MultistreamInfo) *PlaylistUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMultistreamInfoIDs(ids...)
}

// ClearRuleGroups clears all "rule_groups" edges to the PlaylistRuleGroup entity.
func (_u *PlaylistUpdate) ClearRuleGroups() *PlaylistUpdate {
	_u.mutation.ClearRuleGroups()
	return _u
}

// RemoveRuleGroupIDs removes the "rule_groups" edge to PlaylistRuleGroup entities by IDs.
func (_u *PlaylistUpdate) RemoveRuleGroupIDs(ids ...uuid.UUID) *PlaylistUpdate {
	_u.mutation.RemoveRuleGroupIDs(ids...)
	return _u
}

// RemoveRuleGroups removes "rule_groups" edges to PlaylistRuleGroup entities.
func (_u *PlaylistUpdate) RemoveRuleGroups(v ...*PlaylistRuleGroup) *PlaylistUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRuleGroupIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PlaylistUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlaylistUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PlaylistUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlaylistUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlaylistUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := playlist.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *PlaylistUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(playlist.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(playlist.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(playlist.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ThumbnailPath(); ok {
		_spec.SetField(playlist.FieldThumbnailPath, field.TypeString, value)
	}
	if _u.mutation.ThumbnailPathCleared() {
		_spec.ClearField(playlist.FieldThumbnailPath, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(playlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.VodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.VodsTable,
			Columns: playlist.VodsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVodsIDs(); len(nodes) > 0 && !_u.mutation.VodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.VodsTable,
			Columns: playlist.VodsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.VodsTable,
			Columns: playlist.VodsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.MultistreamInfoTable,
			Columns: []string{playlist.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMultistreamInfoIDs(); len(nodes) > 0 && !_u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.MultistreamInfoTable,
			Columns: []string{playlist.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MultistreamInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.MultistreamInfoTable,
			Columns: []string{playlist.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RuleGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.RuleGroupsTable,
			Columns: []string{playlist.RuleGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRuleGroupsIDs(); len(nodes) > 0 && !_u.mutation.RuleGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.RuleGroupsTable,
			Columns: []string{playlist.RuleGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RuleGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.RuleGroupsTable,
			Columns: []string{playlist.RuleGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PlaylistUpdateOne is the builder for updating a single Playlist entity.
type PlaylistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistMutation
}

// SetName sets the "name" field.
func (_u *PlaylistUpdateOne) SetName(v string) *PlaylistUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlaylistUpdateOne) SetNillableName(v *string) *PlaylistUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *PlaylistUpdateOne) SetDescription(v string) *PlaylistUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *PlaylistUpdateOne) SetNillableDescription(v *string) *PlaylistUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *PlaylistUpdateOne) ClearDescription() *PlaylistUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (_u *PlaylistUpdateOne) SetThumbnailPath(v string) *PlaylistUpdateOne {
	_u.mutation.SetThumbnailPath(v)
	return _u
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (_u *PlaylistUpdateOne) SetNillableThumbnailPath(v *string) *PlaylistUpdateOne {
	if v != nil {
		_u.SetThumbnailPath(*v)
	}
	return _u
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (_u *PlaylistUpdateOne) ClearThumbnailPath() *PlaylistUpdateOne {
	_u.mutation.ClearThumbnailPath()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *PlaylistUpdateOne) SetUpdatedAt(v time.Time) *PlaylistUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddVodIDs adds the "vods" edge to the Vod entity by IDs.
func (_u *PlaylistUpdateOne) AddVodIDs(ids ...uuid.UUID) *PlaylistUpdateOne {
	_u.mutation.AddVodIDs(ids...)
	return _u
}

// AddVods adds the "vods" edges to the Vod entity.
func (_u *PlaylistUpdateOne) AddVods(v ...*Vod) *PlaylistUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVodIDs(ids...)
}

// AddMultistreamInfoIDs adds the "multistream_info" edge to the MultistreamInfo entity by IDs.
func (_u *PlaylistUpdateOne) AddMultistreamInfoIDs(ids ...int) *PlaylistUpdateOne {
	_u.mutation.AddMultistreamInfoIDs(ids...)
	return _u
}

// AddMultistreamInfo adds the "multistream_info" edges to the MultistreamInfo entity.
func (_u *PlaylistUpdateOne) AddMultistreamInfo(v ...*MultistreamInfo) *PlaylistUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMultistreamInfoIDs(ids...)
}

// AddRuleGroupIDs adds the "rule_groups" edge to the PlaylistRuleGroup entity by IDs.
func (_u *PlaylistUpdateOne) AddRuleGroupIDs(ids ...uuid.UUID) *PlaylistUpdateOne {
	_u.mutation.AddRuleGroupIDs(ids...)
	return _u
}

// AddRuleGroups adds the "rule_groups" edges to the PlaylistRuleGroup entity.
func (_u *PlaylistUpdateOne) AddRuleGroups(v ...*PlaylistRuleGroup) *PlaylistUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRuleGroupIDs(ids...)
}

// Mutation returns the PlaylistMutation object of the builder.
func (_u *PlaylistUpdateOne) Mutation() *PlaylistMutation {
	return _u.mutation
}

// ClearVods clears all "vods" edges to the Vod entity.
func (_u *PlaylistUpdateOne) ClearVods() *PlaylistUpdateOne {
	_u.mutation.ClearVods()
	return _u
}

// RemoveVodIDs removes the "vods" edge to Vod entities by IDs.
func (_u *PlaylistUpdateOne) RemoveVodIDs(ids ...uuid.UUID) *PlaylistUpdateOne {
	_u.mutation.RemoveVodIDs(ids...)
	return _u
}

// RemoveVods removes "vods" edges to Vod entities.
func (_u *PlaylistUpdateOne) RemoveVods(v ...*Vod) *PlaylistUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVodIDs(ids...)
}

// ClearMultistreamInfo clears all "multistream_info" edges to the MultistreamInfo entity.
func (_u *PlaylistUpdateOne) ClearMultistreamInfo() *PlaylistUpdateOne {
	_u.mutation.ClearMultistreamInfo()
	return _u
}

// RemoveMultistreamInfoIDs removes the "multistream_info" edge to MultistreamInfo entities by IDs.
func (_u *PlaylistUpdateOne) RemoveMultistreamInfoIDs(ids ...int) *PlaylistUpdateOne {
	_u.mutation.RemoveMultistreamInfoIDs(ids...)
	return _u
}

// RemoveMultistreamInfo removes "multistream_info" edges to MultistreamInfo entities.
func (_u *PlaylistUpdateOne) RemoveMultistreamInfo(v ...*MultistreamInfo) *PlaylistUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMultistreamInfoIDs(ids...)
}

// ClearRuleGroups clears all "rule_groups" edges to the PlaylistRuleGroup entity.
func (_u *PlaylistUpdateOne) ClearRuleGroups() *PlaylistUpdateOne {
	_u.mutation.ClearRuleGroups()
	return _u
}

// RemoveRuleGroupIDs removes the "rule_groups" edge to PlaylistRuleGroup entities by IDs.
func (_u *PlaylistUpdateOne) RemoveRuleGroupIDs(ids ...uuid.UUID) *PlaylistUpdateOne {
	_u.mutation.RemoveRuleGroupIDs(ids...)
	return _u
}

// RemoveRuleGroups removes "rule_groups" edges to PlaylistRuleGroup entities.
func (_u *PlaylistUpdateOne) RemoveRuleGroups(v ...*PlaylistRuleGroup) *PlaylistUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRuleGroupIDs(ids...)
}

// Where appends a list predicates to the PlaylistUpdate builder.
func (_u *PlaylistUpdateOne) Where(ps ...predicate.Playlist) *PlaylistUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PlaylistUpdateOne) Select(field string, fields ...string) *PlaylistUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Playlist entity.
func (_u *PlaylistUpdateOne) Save(ctx context.Context) (*Playlist, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlaylistUpdateOne) SaveX(ctx context.Context) *Playlist {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PlaylistUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlaylistUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *PlaylistUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := playlist.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *PlaylistUpdateOne) sqlSave(ctx context.Context) (_node *Playlist, err error) {
	_spec := sqlgraph.NewUpdateSpec(playlist.Table, playlist.Columns, sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Playlist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlist.FieldID)
		for _, f := range fields {
			if !playlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(playlist.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(playlist.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(playlist.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ThumbnailPath(); ok {
		_spec.SetField(playlist.FieldThumbnailPath, field.TypeString, value)
	}
	if _u.mutation.ThumbnailPathCleared() {
		_spec.ClearField(playlist.FieldThumbnailPath, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(playlist.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.VodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.VodsTable,
			Columns: playlist.VodsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVodsIDs(); len(nodes) > 0 && !_u.mutation.VodsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.VodsTable,
			Columns: playlist.VodsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VodsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   playlist.VodsTable,
			Columns: playlist.VodsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.MultistreamInfoTable,
			Columns: []string{playlist.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMultistreamInfoIDs(); len(nodes) > 0 && !_u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.MultistreamInfoTable,
			Columns: []string{playlist.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MultistreamInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.MultistreamInfoTable,
			Columns: []string{playlist.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RuleGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.RuleGroupsTable,
			Columns: []string{playlist.RuleGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRuleGroupsIDs(); len(nodes) > 0 && !_u.mutation.RuleGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.RuleGroupsTable,
			Columns: []string{playlist.RuleGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RuleGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlist.RuleGroupsTable,
			Columns: []string{playlist.RuleGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Playlist{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
