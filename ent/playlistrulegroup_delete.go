// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
	"github.com/zibbp/ganymede/ent/predicate"
)

// PlaylistRuleGroupDelete is the builder for deleting a PlaylistRuleGroup entity.
type PlaylistRuleGroupDelete struct {
	config
	hooks    []Hook
	mutation *PlaylistRuleGroupMutation
}

// Where appends a list predicates to the PlaylistRuleGroupDelete builder.
func (prgd *PlaylistRuleGroupDelete) Where(ps ...predicate.PlaylistRuleGroup) *PlaylistRuleGroupDelete {
	prgd.mutation.Where(ps...)
	return prgd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (prgd *PlaylistRuleGroupDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, prgd.sqlExec, prgd.mutation, prgd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (prgd *PlaylistRuleGroupDelete) ExecX(ctx context.Context) int {
	n, err := prgd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (prgd *PlaylistRuleGroupDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(playlistrulegroup.Table, sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID))
	if ps := prgd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, prgd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	prgd.mutation.done = true
	return affected, err
}

// PlaylistRuleGroupDeleteOne is the builder for deleting a single PlaylistRuleGroup entity.
type PlaylistRuleGroupDeleteOne struct {
	prgd *PlaylistRuleGroupDelete
}

// Where appends a list predicates to the PlaylistRuleGroupDelete builder.
func (prgdo *PlaylistRuleGroupDeleteOne) Where(ps ...predicate.PlaylistRuleGroup) *PlaylistRuleGroupDeleteOne {
	prgdo.prgd.mutation.Where(ps...)
	return prgdo
}

// Exec executes the deletion query.
func (prgdo *PlaylistRuleGroupDeleteOne) Exec(ctx context.Context) error {
	n, err := prgdo.prgd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{playlistrulegroup.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (prgdo *PlaylistRuleGroupDeleteOne) ExecX(ctx context.Context) {
	if err := prgdo.Exec(ctx); err != nil {
		panic(err)
	}
}
