// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
)

// PlaylistRuleGroup is the model entity for the PlaylistRuleGroup schema.
type PlaylistRuleGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Logical operator to combine rules in this group
	Operator playlistrulegroup.Operator `json:"operator,omitempty"`
	// Used to order groups within the playlist
	Position int `json:"position,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlaylistRuleGroupQuery when eager-loading is set.
	Edges                PlaylistRuleGroupEdges `json:"edges"`
	playlist_rule_groups *uuid.UUID
	selectValues         sql.SelectValues
}

// PlaylistRuleGroupEdges holds the relations/edges for other nodes in the graph.
type PlaylistRuleGroupEdges struct {
	// Playlist holds the value of the playlist edge.
	Playlist *Playlist `json:"playlist,omitempty"`
	// Rules holds the value of the rules edge.
	Rules []*PlaylistRule `json:"rules,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PlaylistOrErr returns the Playlist value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlaylistRuleGroupEdges) PlaylistOrErr() (*Playlist, error) {
	if e.Playlist != nil {
		return e.Playlist, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: playlist.Label}
	}
	return nil, &NotLoadedError{edge: "playlist"}
}

// RulesOrErr returns the Rules value or an error if the edge
// was not loaded in eager-loading.
func (e PlaylistRuleGroupEdges) RulesOrErr() ([]*PlaylistRule, error) {
	if e.loadedTypes[1] {
		return e.Rules, nil
	}
	return nil, &NotLoadedError{edge: "rules"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlaylistRuleGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case playlistrulegroup.FieldPosition:
			values[i] = new(sql.NullInt64)
		case playlistrulegroup.FieldOperator:
			values[i] = new(sql.NullString)
		case playlistrulegroup.FieldID:
			values[i] = new(uuid.UUID)
		case playlistrulegroup.ForeignKeys[0]: // playlist_rule_groups
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlaylistRuleGroup fields.
func (prg *PlaylistRuleGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playlistrulegroup.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				prg.ID = *value
			}
		case playlistrulegroup.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				prg.Operator = playlistrulegroup.Operator(value.String)
			}
		case playlistrulegroup.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				prg.Position = int(value.Int64)
			}
		case playlistrulegroup.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field playlist_rule_groups", values[i])
			} else if value.Valid {
				prg.playlist_rule_groups = new(uuid.UUID)
				*prg.playlist_rule_groups = *value.S.(*uuid.UUID)
			}
		default:
			prg.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PlaylistRuleGroup.
// This includes values selected through modifiers, order, etc.
func (prg *PlaylistRuleGroup) Value(name string) (ent.Value, error) {
	return prg.selectValues.Get(name)
}

// QueryPlaylist queries the "playlist" edge of the PlaylistRuleGroup entity.
func (prg *PlaylistRuleGroup) QueryPlaylist() *PlaylistQuery {
	return NewPlaylistRuleGroupClient(prg.config).QueryPlaylist(prg)
}

// QueryRules queries the "rules" edge of the PlaylistRuleGroup entity.
func (prg *PlaylistRuleGroup) QueryRules() *PlaylistRuleQuery {
	return NewPlaylistRuleGroupClient(prg.config).QueryRules(prg)
}

// Update returns a builder for updating this PlaylistRuleGroup.
// Note that you need to call PlaylistRuleGroup.Unwrap() before calling this method if this PlaylistRuleGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (prg *PlaylistRuleGroup) Update() *PlaylistRuleGroupUpdateOne {
	return NewPlaylistRuleGroupClient(prg.config).UpdateOne(prg)
}

// Unwrap unwraps the PlaylistRuleGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (prg *PlaylistRuleGroup) Unwrap() *PlaylistRuleGroup {
	_tx, ok := prg.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlaylistRuleGroup is not a transactional entity")
	}
	prg.config.driver = _tx.drv
	return prg
}

// String implements the fmt.Stringer.
func (prg *PlaylistRuleGroup) String() string {
	var builder strings.Builder
	builder.WriteString("PlaylistRuleGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", prg.ID))
	builder.WriteString("operator=")
	builder.WriteString(fmt.Sprintf("%v", prg.Operator))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", prg.Position))
	builder.WriteByte(')')
	return builder.String()
}

// PlaylistRuleGroups is a parsable slice of PlaylistRuleGroup.
type PlaylistRuleGroups []*PlaylistRuleGroup
