// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// QueueUpdate is the builder for updating Queue entities.
type QueueUpdate struct {
	config
	hooks    []Hook
	mutation *QueueMutation
}

// Where appends a list predicates to the QueueUpdate builder.
func (_u *QueueUpdate) Where(ps ...predicate.Queue) *QueueUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetLiveArchive sets the "live_archive" field.
func (_u *QueueUpdate) SetLiveArchive(v bool) *QueueUpdate {
	_u.mutation.SetLiveArchive(v)
	return _u
}

// SetNillableLiveArchive sets the "live_archive" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableLiveArchive(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetLiveArchive(*v)
	}
	return _u
}

// SetOnHold sets the "on_hold" field.
func (_u *QueueUpdate) SetOnHold(v bool) *QueueUpdate {
	_u.mutation.SetOnHold(v)
	return _u
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableOnHold(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetOnHold(*v)
	}
	return _u
}

// SetVideoProcessing sets the "video_processing" field.
func (_u *QueueUpdate) SetVideoProcessing(v bool) *QueueUpdate {
	_u.mutation.SetVideoProcessing(v)
	return _u
}

// SetNillableVideoProcessing sets the "video_processing" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableVideoProcessing(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetVideoProcessing(*v)
	}
	return _u
}

// SetChatProcessing sets the "chat_processing" field.
func (_u *QueueUpdate) SetChatProcessing(v bool) *QueueUpdate {
	_u.mutation.SetChatProcessing(v)
	return _u
}

// SetNillableChatProcessing sets the "chat_processing" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableChatProcessing(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetChatProcessing(*v)
	}
	return _u
}

// SetProcessing sets the "processing" field.
func (_u *QueueUpdate) SetProcessing(v bool) *QueueUpdate {
	_u.mutation.SetProcessing(v)
	return _u
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableProcessing(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetProcessing(*v)
	}
	return _u
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (_u *QueueUpdate) SetTaskVodCreateFolder(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskVodCreateFolder(v)
	return _u
}

// SetNillableTaskVodCreateFolder sets the "task_vod_create_folder" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskVodCreateFolder(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskVodCreateFolder(*v)
	}
	return _u
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (_u *QueueUpdate) ClearTaskVodCreateFolder() *QueueUpdate {
	_u.mutation.ClearTaskVodCreateFolder()
	return _u
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (_u *QueueUpdate) SetTaskVodDownloadThumbnail(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskVodDownloadThumbnail(v)
	return _u
}

// SetNillableTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskVodDownloadThumbnail(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskVodDownloadThumbnail(*v)
	}
	return _u
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (_u *QueueUpdate) ClearTaskVodDownloadThumbnail() *QueueUpdate {
	_u.mutation.ClearTaskVodDownloadThumbnail()
	return _u
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (_u *QueueUpdate) SetTaskVodSaveInfo(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskVodSaveInfo(v)
	return _u
}

// SetNillableTaskVodSaveInfo sets the "task_vod_save_info" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskVodSaveInfo(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskVodSaveInfo(*v)
	}
	return _u
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (_u *QueueUpdate) ClearTaskVodSaveInfo() *QueueUpdate {
	_u.mutation.ClearTaskVodSaveInfo()
	return _u
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (_u *QueueUpdate) SetTaskVideoDownload(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskVideoDownload(v)
	return _u
}

// SetNillableTaskVideoDownload sets the "task_video_download" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskVideoDownload(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskVideoDownload(*v)
	}
	return _u
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (_u *QueueUpdate) ClearTaskVideoDownload() *QueueUpdate {
	_u.mutation.ClearTaskVideoDownload()
	return _u
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (_u *QueueUpdate) SetTaskVideoConvert(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskVideoConvert(v)
	return _u
}

// SetNillableTaskVideoConvert sets the "task_video_convert" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskVideoConvert(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskVideoConvert(*v)
	}
	return _u
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (_u *QueueUpdate) ClearTaskVideoConvert() *QueueUpdate {
	_u.mutation.ClearTaskVideoConvert()
	return _u
}

// SetTaskVideoMove sets the "task_video_move" field.
func (_u *QueueUpdate) SetTaskVideoMove(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskVideoMove(v)
	return _u
}

// SetNillableTaskVideoMove sets the "task_video_move" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskVideoMove(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskVideoMove(*v)
	}
	return _u
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (_u *QueueUpdate) ClearTaskVideoMove() *QueueUpdate {
	_u.mutation.ClearTaskVideoMove()
	return _u
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (_u *QueueUpdate) SetTaskChatDownload(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskChatDownload(v)
	return _u
}

// SetNillableTaskChatDownload sets the "task_chat_download" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskChatDownload(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskChatDownload(*v)
	}
	return _u
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (_u *QueueUpdate) ClearTaskChatDownload() *QueueUpdate {
	_u.mutation.ClearTaskChatDownload()
	return _u
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (_u *QueueUpdate) SetTaskChatConvert(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskChatConvert(v)
	return _u
}

// SetNillableTaskChatConvert sets the "task_chat_convert" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskChatConvert(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskChatConvert(*v)
	}
	return _u
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (_u *QueueUpdate) ClearTaskChatConvert() *QueueUpdate {
	_u.mutation.ClearTaskChatConvert()
	return _u
}

// SetTaskChatRender sets the "task_chat_render" field.
func (_u *QueueUpdate) SetTaskChatRender(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskChatRender(v)
	return _u
}

// SetNillableTaskChatRender sets the "task_chat_render" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskChatRender(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskChatRender(*v)
	}
	return _u
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (_u *QueueUpdate) ClearTaskChatRender() *QueueUpdate {
	_u.mutation.ClearTaskChatRender()
	return _u
}

// SetTaskChatMove sets the "task_chat_move" field.
func (_u *QueueUpdate) SetTaskChatMove(v utils.TaskStatus) *QueueUpdate {
	_u.mutation.SetTaskChatMove(v)
	return _u
}

// SetNillableTaskChatMove sets the "task_chat_move" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableTaskChatMove(v *utils.TaskStatus) *QueueUpdate {
	if v != nil {
		_u.SetTaskChatMove(*v)
	}
	return _u
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (_u *QueueUpdate) ClearTaskChatMove() *QueueUpdate {
	_u.mutation.ClearTaskChatMove()
	return _u
}

// SetChatStart sets the "chat_start" field.
func (_u *QueueUpdate) SetChatStart(v time.Time) *QueueUpdate {
	_u.mutation.SetChatStart(v)
	return _u
}

// SetNillableChatStart sets the "chat_start" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableChatStart(v *time.Time) *QueueUpdate {
	if v != nil {
		_u.SetChatStart(*v)
	}
	return _u
}

// ClearChatStart clears the value of the "chat_start" field.
func (_u *QueueUpdate) ClearChatStart() *QueueUpdate {
	_u.mutation.ClearChatStart()
	return _u
}

// SetArchiveChat sets the "archive_chat" field.
func (_u *QueueUpdate) SetArchiveChat(v bool) *QueueUpdate {
	_u.mutation.SetArchiveChat(v)
	return _u
}

// SetNillableArchiveChat sets the "archive_chat" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableArchiveChat(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetArchiveChat(*v)
	}
	return _u
}

// ClearArchiveChat clears the value of the "archive_chat" field.
func (_u *QueueUpdate) ClearArchiveChat() *QueueUpdate {
	_u.mutation.ClearArchiveChat()
	return _u
}

// SetRenderChat sets the "render_chat" field.
func (_u *QueueUpdate) SetRenderChat(v bool) *QueueUpdate {
	_u.mutation.SetRenderChat(v)
	return _u
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableRenderChat(v *bool) *QueueUpdate {
	if v != nil {
		_u.SetRenderChat(*v)
	}
	return _u
}

// ClearRenderChat clears the value of the "render_chat" field.
func (_u *QueueUpdate) ClearRenderChat() *QueueUpdate {
	_u.mutation.ClearRenderChat()
	return _u
}

// SetWorkflowID sets the "workflow_id" field.
func (_u *QueueUpdate) SetWorkflowID(v string) *QueueUpdate {
	_u.mutation.SetWorkflowID(v)
	return _u
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableWorkflowID(v *string) *QueueUpdate {
	if v != nil {
		_u.SetWorkflowID(*v)
	}
	return _u
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (_u *QueueUpdate) ClearWorkflowID() *QueueUpdate {
	_u.mutation.ClearWorkflowID()
	return _u
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (_u *QueueUpdate) SetWorkflowRunID(v string) *QueueUpdate {
	_u.mutation.SetWorkflowRunID(v)
	return _u
}

// SetNillableWorkflowRunID sets the "workflow_run_id" field if the given value is not nil.
func (_u *QueueUpdate) SetNillableWorkflowRunID(v *string) *QueueUpdate {
	if v != nil {
		_u.SetWorkflowRunID(*v)
	}
	return _u
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (_u *QueueUpdate) ClearWorkflowRunID() *QueueUpdate {
	_u.mutation.ClearWorkflowRunID()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *QueueUpdate) SetUpdatedAt(v time.Time) *QueueUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (_u *QueueUpdate) SetVodID(id uuid.UUID) *QueueUpdate {
	_u.mutation.SetVodID(id)
	return _u
}

// SetVod sets the "vod" edge to the Vod entity.
func (_u *QueueUpdate) SetVod(v *Vod) *QueueUpdate {
	return _u.SetVodID(v.ID)
}

// Mutation returns the QueueMutation object of the builder.
func (_u *QueueUpdate) Mutation() *QueueMutation {
	return _u.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (_u *QueueUpdate) ClearVod() *QueueUpdate {
	_u.mutation.ClearVod()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *QueueUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QueueUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *QueueUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QueueUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *QueueUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := queue.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QueueUpdate) check() error {
	if v, ok := _u.mutation.TaskVodCreateFolder(); ok {
		if err := queue.TaskVodCreateFolderValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_create_folder", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_create_folder": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVodDownloadThumbnail(); ok {
		if err := queue.TaskVodDownloadThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_download_thumbnail", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_download_thumbnail": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVodSaveInfo(); ok {
		if err := queue.TaskVodSaveInfoValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_save_info", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_save_info": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVideoDownload(); ok {
		if err := queue.TaskVideoDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_video_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_download": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVideoConvert(); ok {
		if err := queue.TaskVideoConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_video_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_convert": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVideoMove(); ok {
		if err := queue.TaskVideoMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_video_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_move": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatDownload(); ok {
		if err := queue.TaskChatDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_download": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatConvert(); ok {
		if err := queue.TaskChatConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_convert": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatRender(); ok {
		if err := queue.TaskChatRenderValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_render", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_render": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatMove(); ok {
		if err := queue.TaskChatMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_move": %w`, err)}
		}
	}
	if _u.mutation.VodCleared() && len(_u.mutation.VodIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Queue.vod"`)
	}
	return nil
}

func (_u *QueueUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(queue.Table, queue.Columns, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LiveArchive(); ok {
		_spec.SetField(queue.FieldLiveArchive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OnHold(); ok {
		_spec.SetField(queue.FieldOnHold, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VideoProcessing(); ok {
		_spec.SetField(queue.FieldVideoProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ChatProcessing(); ok {
		_spec.SetField(queue.FieldChatProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Processing(); ok {
		_spec.SetField(queue.FieldProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TaskVodCreateFolder(); ok {
		_spec.SetField(queue.FieldTaskVodCreateFolder, field.TypeEnum, value)
	}
	if _u.mutation.TaskVodCreateFolderCleared() {
		_spec.ClearField(queue.FieldTaskVodCreateFolder, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVodDownloadThumbnail(); ok {
		_spec.SetField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum, value)
	}
	if _u.mutation.TaskVodDownloadThumbnailCleared() {
		_spec.ClearField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVodSaveInfo(); ok {
		_spec.SetField(queue.FieldTaskVodSaveInfo, field.TypeEnum, value)
	}
	if _u.mutation.TaskVodSaveInfoCleared() {
		_spec.ClearField(queue.FieldTaskVodSaveInfo, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVideoDownload(); ok {
		_spec.SetField(queue.FieldTaskVideoDownload, field.TypeEnum, value)
	}
	if _u.mutation.TaskVideoDownloadCleared() {
		_spec.ClearField(queue.FieldTaskVideoDownload, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVideoConvert(); ok {
		_spec.SetField(queue.FieldTaskVideoConvert, field.TypeEnum, value)
	}
	if _u.mutation.TaskVideoConvertCleared() {
		_spec.ClearField(queue.FieldTaskVideoConvert, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVideoMove(); ok {
		_spec.SetField(queue.FieldTaskVideoMove, field.TypeEnum, value)
	}
	if _u.mutation.TaskVideoMoveCleared() {
		_spec.ClearField(queue.FieldTaskVideoMove, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatDownload(); ok {
		_spec.SetField(queue.FieldTaskChatDownload, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatDownloadCleared() {
		_spec.ClearField(queue.FieldTaskChatDownload, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatConvert(); ok {
		_spec.SetField(queue.FieldTaskChatConvert, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatConvertCleared() {
		_spec.ClearField(queue.FieldTaskChatConvert, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatRender(); ok {
		_spec.SetField(queue.FieldTaskChatRender, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatRenderCleared() {
		_spec.ClearField(queue.FieldTaskChatRender, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatMove(); ok {
		_spec.SetField(queue.FieldTaskChatMove, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatMoveCleared() {
		_spec.ClearField(queue.FieldTaskChatMove, field.TypeEnum)
	}
	if value, ok := _u.mutation.ChatStart(); ok {
		_spec.SetField(queue.FieldChatStart, field.TypeTime, value)
	}
	if _u.mutation.ChatStartCleared() {
		_spec.ClearField(queue.FieldChatStart, field.TypeTime)
	}
	if value, ok := _u.mutation.ArchiveChat(); ok {
		_spec.SetField(queue.FieldArchiveChat, field.TypeBool, value)
	}
	if _u.mutation.ArchiveChatCleared() {
		_spec.ClearField(queue.FieldArchiveChat, field.TypeBool)
	}
	if value, ok := _u.mutation.RenderChat(); ok {
		_spec.SetField(queue.FieldRenderChat, field.TypeBool, value)
	}
	if _u.mutation.RenderChatCleared() {
		_spec.ClearField(queue.FieldRenderChat, field.TypeBool)
	}
	if value, ok := _u.mutation.WorkflowID(); ok {
		_spec.SetField(queue.FieldWorkflowID, field.TypeString, value)
	}
	if _u.mutation.WorkflowIDCleared() {
		_spec.ClearField(queue.FieldWorkflowID, field.TypeString)
	}
	if value, ok := _u.mutation.WorkflowRunID(); ok {
		_spec.SetField(queue.FieldWorkflowRunID, field.TypeString, value)
	}
	if _u.mutation.WorkflowRunIDCleared() {
		_spec.ClearField(queue.FieldWorkflowRunID, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(queue.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// QueueUpdateOne is the builder for updating a single Queue entity.
type QueueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueueMutation
}

// SetLiveArchive sets the "live_archive" field.
func (_u *QueueUpdateOne) SetLiveArchive(v bool) *QueueUpdateOne {
	_u.mutation.SetLiveArchive(v)
	return _u
}

// SetNillableLiveArchive sets the "live_archive" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableLiveArchive(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetLiveArchive(*v)
	}
	return _u
}

// SetOnHold sets the "on_hold" field.
func (_u *QueueUpdateOne) SetOnHold(v bool) *QueueUpdateOne {
	_u.mutation.SetOnHold(v)
	return _u
}

// SetNillableOnHold sets the "on_hold" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableOnHold(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetOnHold(*v)
	}
	return _u
}

// SetVideoProcessing sets the "video_processing" field.
func (_u *QueueUpdateOne) SetVideoProcessing(v bool) *QueueUpdateOne {
	_u.mutation.SetVideoProcessing(v)
	return _u
}

// SetNillableVideoProcessing sets the "video_processing" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableVideoProcessing(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetVideoProcessing(*v)
	}
	return _u
}

// SetChatProcessing sets the "chat_processing" field.
func (_u *QueueUpdateOne) SetChatProcessing(v bool) *QueueUpdateOne {
	_u.mutation.SetChatProcessing(v)
	return _u
}

// SetNillableChatProcessing sets the "chat_processing" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableChatProcessing(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetChatProcessing(*v)
	}
	return _u
}

// SetProcessing sets the "processing" field.
func (_u *QueueUpdateOne) SetProcessing(v bool) *QueueUpdateOne {
	_u.mutation.SetProcessing(v)
	return _u
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableProcessing(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetProcessing(*v)
	}
	return _u
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (_u *QueueUpdateOne) SetTaskVodCreateFolder(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskVodCreateFolder(v)
	return _u
}

// SetNillableTaskVodCreateFolder sets the "task_vod_create_folder" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskVodCreateFolder(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskVodCreateFolder(*v)
	}
	return _u
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (_u *QueueUpdateOne) ClearTaskVodCreateFolder() *QueueUpdateOne {
	_u.mutation.ClearTaskVodCreateFolder()
	return _u
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (_u *QueueUpdateOne) SetTaskVodDownloadThumbnail(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskVodDownloadThumbnail(v)
	return _u
}

// SetNillableTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskVodDownloadThumbnail(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskVodDownloadThumbnail(*v)
	}
	return _u
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (_u *QueueUpdateOne) ClearTaskVodDownloadThumbnail() *QueueUpdateOne {
	_u.mutation.ClearTaskVodDownloadThumbnail()
	return _u
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (_u *QueueUpdateOne) SetTaskVodSaveInfo(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskVodSaveInfo(v)
	return _u
}

// SetNillableTaskVodSaveInfo sets the "task_vod_save_info" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskVodSaveInfo(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskVodSaveInfo(*v)
	}
	return _u
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (_u *QueueUpdateOne) ClearTaskVodSaveInfo() *QueueUpdateOne {
	_u.mutation.ClearTaskVodSaveInfo()
	return _u
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (_u *QueueUpdateOne) SetTaskVideoDownload(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskVideoDownload(v)
	return _u
}

// SetNillableTaskVideoDownload sets the "task_video_download" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskVideoDownload(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskVideoDownload(*v)
	}
	return _u
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (_u *QueueUpdateOne) ClearTaskVideoDownload() *QueueUpdateOne {
	_u.mutation.ClearTaskVideoDownload()
	return _u
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (_u *QueueUpdateOne) SetTaskVideoConvert(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskVideoConvert(v)
	return _u
}

// SetNillableTaskVideoConvert sets the "task_video_convert" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskVideoConvert(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskVideoConvert(*v)
	}
	return _u
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (_u *QueueUpdateOne) ClearTaskVideoConvert() *QueueUpdateOne {
	_u.mutation.ClearTaskVideoConvert()
	return _u
}

// SetTaskVideoMove sets the "task_video_move" field.
func (_u *QueueUpdateOne) SetTaskVideoMove(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskVideoMove(v)
	return _u
}

// SetNillableTaskVideoMove sets the "task_video_move" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskVideoMove(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskVideoMove(*v)
	}
	return _u
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (_u *QueueUpdateOne) ClearTaskVideoMove() *QueueUpdateOne {
	_u.mutation.ClearTaskVideoMove()
	return _u
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (_u *QueueUpdateOne) SetTaskChatDownload(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskChatDownload(v)
	return _u
}

// SetNillableTaskChatDownload sets the "task_chat_download" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskChatDownload(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskChatDownload(*v)
	}
	return _u
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (_u *QueueUpdateOne) ClearTaskChatDownload() *QueueUpdateOne {
	_u.mutation.ClearTaskChatDownload()
	return _u
}

// SetTaskChatConvert sets the "task_chat_convert" field.
func (_u *QueueUpdateOne) SetTaskChatConvert(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskChatConvert(v)
	return _u
}

// SetNillableTaskChatConvert sets the "task_chat_convert" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskChatConvert(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskChatConvert(*v)
	}
	return _u
}

// ClearTaskChatConvert clears the value of the "task_chat_convert" field.
func (_u *QueueUpdateOne) ClearTaskChatConvert() *QueueUpdateOne {
	_u.mutation.ClearTaskChatConvert()
	return _u
}

// SetTaskChatRender sets the "task_chat_render" field.
func (_u *QueueUpdateOne) SetTaskChatRender(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskChatRender(v)
	return _u
}

// SetNillableTaskChatRender sets the "task_chat_render" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskChatRender(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskChatRender(*v)
	}
	return _u
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (_u *QueueUpdateOne) ClearTaskChatRender() *QueueUpdateOne {
	_u.mutation.ClearTaskChatRender()
	return _u
}

// SetTaskChatMove sets the "task_chat_move" field.
func (_u *QueueUpdateOne) SetTaskChatMove(v utils.TaskStatus) *QueueUpdateOne {
	_u.mutation.SetTaskChatMove(v)
	return _u
}

// SetNillableTaskChatMove sets the "task_chat_move" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableTaskChatMove(v *utils.TaskStatus) *QueueUpdateOne {
	if v != nil {
		_u.SetTaskChatMove(*v)
	}
	return _u
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (_u *QueueUpdateOne) ClearTaskChatMove() *QueueUpdateOne {
	_u.mutation.ClearTaskChatMove()
	return _u
}

// SetChatStart sets the "chat_start" field.
func (_u *QueueUpdateOne) SetChatStart(v time.Time) *QueueUpdateOne {
	_u.mutation.SetChatStart(v)
	return _u
}

// SetNillableChatStart sets the "chat_start" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableChatStart(v *time.Time) *QueueUpdateOne {
	if v != nil {
		_u.SetChatStart(*v)
	}
	return _u
}

// ClearChatStart clears the value of the "chat_start" field.
func (_u *QueueUpdateOne) ClearChatStart() *QueueUpdateOne {
	_u.mutation.ClearChatStart()
	return _u
}

// SetArchiveChat sets the "archive_chat" field.
func (_u *QueueUpdateOne) SetArchiveChat(v bool) *QueueUpdateOne {
	_u.mutation.SetArchiveChat(v)
	return _u
}

// SetNillableArchiveChat sets the "archive_chat" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableArchiveChat(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetArchiveChat(*v)
	}
	return _u
}

// ClearArchiveChat clears the value of the "archive_chat" field.
func (_u *QueueUpdateOne) ClearArchiveChat() *QueueUpdateOne {
	_u.mutation.ClearArchiveChat()
	return _u
}

// SetRenderChat sets the "render_chat" field.
func (_u *QueueUpdateOne) SetRenderChat(v bool) *QueueUpdateOne {
	_u.mutation.SetRenderChat(v)
	return _u
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableRenderChat(v *bool) *QueueUpdateOne {
	if v != nil {
		_u.SetRenderChat(*v)
	}
	return _u
}

// ClearRenderChat clears the value of the "render_chat" field.
func (_u *QueueUpdateOne) ClearRenderChat() *QueueUpdateOne {
	_u.mutation.ClearRenderChat()
	return _u
}

// SetWorkflowID sets the "workflow_id" field.
func (_u *QueueUpdateOne) SetWorkflowID(v string) *QueueUpdateOne {
	_u.mutation.SetWorkflowID(v)
	return _u
}

// SetNillableWorkflowID sets the "workflow_id" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableWorkflowID(v *string) *QueueUpdateOne {
	if v != nil {
		_u.SetWorkflowID(*v)
	}
	return _u
}

// ClearWorkflowID clears the value of the "workflow_id" field.
func (_u *QueueUpdateOne) ClearWorkflowID() *QueueUpdateOne {
	_u.mutation.ClearWorkflowID()
	return _u
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (_u *QueueUpdateOne) SetWorkflowRunID(v string) *QueueUpdateOne {
	_u.mutation.SetWorkflowRunID(v)
	return _u
}

// SetNillableWorkflowRunID sets the "workflow_run_id" field if the given value is not nil.
func (_u *QueueUpdateOne) SetNillableWorkflowRunID(v *string) *QueueUpdateOne {
	if v != nil {
		_u.SetWorkflowRunID(*v)
	}
	return _u
}

// ClearWorkflowRunID clears the value of the "workflow_run_id" field.
func (_u *QueueUpdateOne) ClearWorkflowRunID() *QueueUpdateOne {
	_u.mutation.ClearWorkflowRunID()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *QueueUpdateOne) SetUpdatedAt(v time.Time) *QueueUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetVodID sets the "vod" edge to the Vod entity by ID.
func (_u *QueueUpdateOne) SetVodID(id uuid.UUID) *QueueUpdateOne {
	_u.mutation.SetVodID(id)
	return _u
}

// SetVod sets the "vod" edge to the Vod entity.
func (_u *QueueUpdateOne) SetVod(v *Vod) *QueueUpdateOne {
	return _u.SetVodID(v.ID)
}

// Mutation returns the QueueMutation object of the builder.
func (_u *QueueUpdateOne) Mutation() *QueueMutation {
	return _u.mutation
}

// ClearVod clears the "vod" edge to the Vod entity.
func (_u *QueueUpdateOne) ClearVod() *QueueUpdateOne {
	_u.mutation.ClearVod()
	return _u
}

// Where appends a list predicates to the QueueUpdate builder.
func (_u *QueueUpdateOne) Where(ps ...predicate.Queue) *QueueUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *QueueUpdateOne) Select(field string, fields ...string) *QueueUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Queue entity.
func (_u *QueueUpdateOne) Save(ctx context.Context) (*Queue, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *QueueUpdateOne) SaveX(ctx context.Context) *Queue {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *QueueUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *QueueUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *QueueUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := queue.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *QueueUpdateOne) check() error {
	if v, ok := _u.mutation.TaskVodCreateFolder(); ok {
		if err := queue.TaskVodCreateFolderValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_create_folder", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_create_folder": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVodDownloadThumbnail(); ok {
		if err := queue.TaskVodDownloadThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_download_thumbnail", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_download_thumbnail": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVodSaveInfo(); ok {
		if err := queue.TaskVodSaveInfoValidator(v); err != nil {
			return &ValidationError{Name: "task_vod_save_info", err: fmt.Errorf(`ent: validator failed for field "Queue.task_vod_save_info": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVideoDownload(); ok {
		if err := queue.TaskVideoDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_video_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_download": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVideoConvert(); ok {
		if err := queue.TaskVideoConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_video_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_convert": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskVideoMove(); ok {
		if err := queue.TaskVideoMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_video_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_video_move": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatDownload(); ok {
		if err := queue.TaskChatDownloadValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_download", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_download": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatConvert(); ok {
		if err := queue.TaskChatConvertValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_convert", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_convert": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatRender(); ok {
		if err := queue.TaskChatRenderValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_render", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_render": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TaskChatMove(); ok {
		if err := queue.TaskChatMoveValidator(v); err != nil {
			return &ValidationError{Name: "task_chat_move", err: fmt.Errorf(`ent: validator failed for field "Queue.task_chat_move": %w`, err)}
		}
	}
	if _u.mutation.VodCleared() && len(_u.mutation.VodIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Queue.vod"`)
	}
	return nil
}

func (_u *QueueUpdateOne) sqlSave(ctx context.Context) (_node *Queue, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(queue.Table, queue.Columns, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Queue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queue.FieldID)
		for _, f := range fields {
			if !queue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != queue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.LiveArchive(); ok {
		_spec.SetField(queue.FieldLiveArchive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.OnHold(); ok {
		_spec.SetField(queue.FieldOnHold, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VideoProcessing(); ok {
		_spec.SetField(queue.FieldVideoProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ChatProcessing(); ok {
		_spec.SetField(queue.FieldChatProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Processing(); ok {
		_spec.SetField(queue.FieldProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.TaskVodCreateFolder(); ok {
		_spec.SetField(queue.FieldTaskVodCreateFolder, field.TypeEnum, value)
	}
	if _u.mutation.TaskVodCreateFolderCleared() {
		_spec.ClearField(queue.FieldTaskVodCreateFolder, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVodDownloadThumbnail(); ok {
		_spec.SetField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum, value)
	}
	if _u.mutation.TaskVodDownloadThumbnailCleared() {
		_spec.ClearField(queue.FieldTaskVodDownloadThumbnail, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVodSaveInfo(); ok {
		_spec.SetField(queue.FieldTaskVodSaveInfo, field.TypeEnum, value)
	}
	if _u.mutation.TaskVodSaveInfoCleared() {
		_spec.ClearField(queue.FieldTaskVodSaveInfo, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVideoDownload(); ok {
		_spec.SetField(queue.FieldTaskVideoDownload, field.TypeEnum, value)
	}
	if _u.mutation.TaskVideoDownloadCleared() {
		_spec.ClearField(queue.FieldTaskVideoDownload, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVideoConvert(); ok {
		_spec.SetField(queue.FieldTaskVideoConvert, field.TypeEnum, value)
	}
	if _u.mutation.TaskVideoConvertCleared() {
		_spec.ClearField(queue.FieldTaskVideoConvert, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskVideoMove(); ok {
		_spec.SetField(queue.FieldTaskVideoMove, field.TypeEnum, value)
	}
	if _u.mutation.TaskVideoMoveCleared() {
		_spec.ClearField(queue.FieldTaskVideoMove, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatDownload(); ok {
		_spec.SetField(queue.FieldTaskChatDownload, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatDownloadCleared() {
		_spec.ClearField(queue.FieldTaskChatDownload, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatConvert(); ok {
		_spec.SetField(queue.FieldTaskChatConvert, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatConvertCleared() {
		_spec.ClearField(queue.FieldTaskChatConvert, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatRender(); ok {
		_spec.SetField(queue.FieldTaskChatRender, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatRenderCleared() {
		_spec.ClearField(queue.FieldTaskChatRender, field.TypeEnum)
	}
	if value, ok := _u.mutation.TaskChatMove(); ok {
		_spec.SetField(queue.FieldTaskChatMove, field.TypeEnum, value)
	}
	if _u.mutation.TaskChatMoveCleared() {
		_spec.ClearField(queue.FieldTaskChatMove, field.TypeEnum)
	}
	if value, ok := _u.mutation.ChatStart(); ok {
		_spec.SetField(queue.FieldChatStart, field.TypeTime, value)
	}
	if _u.mutation.ChatStartCleared() {
		_spec.ClearField(queue.FieldChatStart, field.TypeTime)
	}
	if value, ok := _u.mutation.ArchiveChat(); ok {
		_spec.SetField(queue.FieldArchiveChat, field.TypeBool, value)
	}
	if _u.mutation.ArchiveChatCleared() {
		_spec.ClearField(queue.FieldArchiveChat, field.TypeBool)
	}
	if value, ok := _u.mutation.RenderChat(); ok {
		_spec.SetField(queue.FieldRenderChat, field.TypeBool, value)
	}
	if _u.mutation.RenderChatCleared() {
		_spec.ClearField(queue.FieldRenderChat, field.TypeBool)
	}
	if value, ok := _u.mutation.WorkflowID(); ok {
		_spec.SetField(queue.FieldWorkflowID, field.TypeString, value)
	}
	if _u.mutation.WorkflowIDCleared() {
		_spec.ClearField(queue.FieldWorkflowID, field.TypeString)
	}
	if value, ok := _u.mutation.WorkflowRunID(); ok {
		_spec.SetField(queue.FieldWorkflowRunID, field.TypeString, value)
	}
	if _u.mutation.WorkflowRunIDCleared() {
		_spec.ClearField(queue.FieldWorkflowRunID, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(queue.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.VodCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VodIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   queue.VodTable,
			Columns: []string{queue.VodColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Queue{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
