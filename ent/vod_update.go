// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/chapter"
	"github.com/zibbp/ganymede/ent/multistreaminfo"
	"github.com/zibbp/ganymede/ent/mutedsegment"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// VodUpdate is the builder for updating Vod entities.
type VodUpdate struct {
	config
	hooks    []Hook
	mutation *VodMutation
}

// Where appends a list predicates to the VodUpdate builder.
func (_u *VodUpdate) Where(ps ...predicate.Vod) *VodUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetExtID sets the "ext_id" field.
func (_u *VodUpdate) SetExtID(v string) *VodUpdate {
	_u.mutation.SetExtID(v)
	return _u
}

// SetNillableExtID sets the "ext_id" field if the given value is not nil.
func (_u *VodUpdate) SetNillableExtID(v *string) *VodUpdate {
	if v != nil {
		_u.SetExtID(*v)
	}
	return _u
}

// SetClipExtVodID sets the "clip_ext_vod_id" field.
func (_u *VodUpdate) SetClipExtVodID(v string) *VodUpdate {
	_u.mutation.SetClipExtVodID(v)
	return _u
}

// SetNillableClipExtVodID sets the "clip_ext_vod_id" field if the given value is not nil.
func (_u *VodUpdate) SetNillableClipExtVodID(v *string) *VodUpdate {
	if v != nil {
		_u.SetClipExtVodID(*v)
	}
	return _u
}

// ClearClipExtVodID clears the value of the "clip_ext_vod_id" field.
func (_u *VodUpdate) ClearClipExtVodID() *VodUpdate {
	_u.mutation.ClearClipExtVodID()
	return _u
}

// SetExtStreamID sets the "ext_stream_id" field.
func (_u *VodUpdate) SetExtStreamID(v string) *VodUpdate {
	_u.mutation.SetExtStreamID(v)
	return _u
}

// SetNillableExtStreamID sets the "ext_stream_id" field if the given value is not nil.
func (_u *VodUpdate) SetNillableExtStreamID(v *string) *VodUpdate {
	if v != nil {
		_u.SetExtStreamID(*v)
	}
	return _u
}

// ClearExtStreamID clears the value of the "ext_stream_id" field.
func (_u *VodUpdate) ClearExtStreamID() *VodUpdate {
	_u.mutation.ClearExtStreamID()
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *VodUpdate) SetPlatform(v utils.VideoPlatform) *VodUpdate {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *VodUpdate) SetNillablePlatform(v *utils.VideoPlatform) *VodUpdate {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *VodUpdate) SetType(v utils.VodType) *VodUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *VodUpdate) SetNillableType(v *utils.VodType) *VodUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *VodUpdate) SetTitle(v string) *VodUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTitle(v *string) *VodUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDuration sets the "duration" field.
func (_u *VodUpdate) SetDuration(v int) *VodUpdate {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *VodUpdate) SetNillableDuration(v *int) *VodUpdate {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *VodUpdate) AddDuration(v int) *VodUpdate {
	_u.mutation.AddDuration(v)
	return _u
}

// SetClipVodOffset sets the "clip_vod_offset" field.
func (_u *VodUpdate) SetClipVodOffset(v int) *VodUpdate {
	_u.mutation.ResetClipVodOffset()
	_u.mutation.SetClipVodOffset(v)
	return _u
}

// SetNillableClipVodOffset sets the "clip_vod_offset" field if the given value is not nil.
func (_u *VodUpdate) SetNillableClipVodOffset(v *int) *VodUpdate {
	if v != nil {
		_u.SetClipVodOffset(*v)
	}
	return _u
}

// AddClipVodOffset adds value to the "clip_vod_offset" field.
func (_u *VodUpdate) AddClipVodOffset(v int) *VodUpdate {
	_u.mutation.AddClipVodOffset(v)
	return _u
}

// ClearClipVodOffset clears the value of the "clip_vod_offset" field.
func (_u *VodUpdate) ClearClipVodOffset() *VodUpdate {
	_u.mutation.ClearClipVodOffset()
	return _u
}

// SetViews sets the "views" field.
func (_u *VodUpdate) SetViews(v int) *VodUpdate {
	_u.mutation.ResetViews()
	_u.mutation.SetViews(v)
	return _u
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (_u *VodUpdate) SetNillableViews(v *int) *VodUpdate {
	if v != nil {
		_u.SetViews(*v)
	}
	return _u
}

// AddViews adds value to the "views" field.
func (_u *VodUpdate) AddViews(v int) *VodUpdate {
	_u.mutation.AddViews(v)
	return _u
}

// SetResolution sets the "resolution" field.
func (_u *VodUpdate) SetResolution(v string) *VodUpdate {
	_u.mutation.SetResolution(v)
	return _u
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (_u *VodUpdate) SetNillableResolution(v *string) *VodUpdate {
	if v != nil {
		_u.SetResolution(*v)
	}
	return _u
}

// ClearResolution clears the value of the "resolution" field.
func (_u *VodUpdate) ClearResolution() *VodUpdate {
	_u.mutation.ClearResolution()
	return _u
}

// SetProcessing sets the "processing" field.
func (_u *VodUpdate) SetProcessing(v bool) *VodUpdate {
	_u.mutation.SetProcessing(v)
	return _u
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (_u *VodUpdate) SetNillableProcessing(v *bool) *VodUpdate {
	if v != nil {
		_u.SetProcessing(*v)
	}
	return _u
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (_u *VodUpdate) SetThumbnailPath(v string) *VodUpdate {
	_u.mutation.SetThumbnailPath(v)
	return _u
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableThumbnailPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetThumbnailPath(*v)
	}
	return _u
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (_u *VodUpdate) ClearThumbnailPath() *VodUpdate {
	_u.mutation.ClearThumbnailPath()
	return _u
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (_u *VodUpdate) SetWebThumbnailPath(v string) *VodUpdate {
	_u.mutation.SetWebThumbnailPath(v)
	return _u
}

// SetNillableWebThumbnailPath sets the "web_thumbnail_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableWebThumbnailPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetWebThumbnailPath(*v)
	}
	return _u
}

// SetVideoPath sets the "video_path" field.
func (_u *VodUpdate) SetVideoPath(v string) *VodUpdate {
	_u.mutation.SetVideoPath(v)
	return _u
}

// SetNillableVideoPath sets the "video_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableVideoPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetVideoPath(*v)
	}
	return _u
}

// SetVideoHlsPath sets the "video_hls_path" field.
func (_u *VodUpdate) SetVideoHlsPath(v string) *VodUpdate {
	_u.mutation.SetVideoHlsPath(v)
	return _u
}

// SetNillableVideoHlsPath sets the "video_hls_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableVideoHlsPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetVideoHlsPath(*v)
	}
	return _u
}

// ClearVideoHlsPath clears the value of the "video_hls_path" field.
func (_u *VodUpdate) ClearVideoHlsPath() *VodUpdate {
	_u.mutation.ClearVideoHlsPath()
	return _u
}

// SetChatPath sets the "chat_path" field.
func (_u *VodUpdate) SetChatPath(v string) *VodUpdate {
	_u.mutation.SetChatPath(v)
	return _u
}

// SetNillableChatPath sets the "chat_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableChatPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetChatPath(*v)
	}
	return _u
}

// ClearChatPath clears the value of the "chat_path" field.
func (_u *VodUpdate) ClearChatPath() *VodUpdate {
	_u.mutation.ClearChatPath()
	return _u
}

// SetLiveChatPath sets the "live_chat_path" field.
func (_u *VodUpdate) SetLiveChatPath(v string) *VodUpdate {
	_u.mutation.SetLiveChatPath(v)
	return _u
}

// SetNillableLiveChatPath sets the "live_chat_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableLiveChatPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetLiveChatPath(*v)
	}
	return _u
}

// ClearLiveChatPath clears the value of the "live_chat_path" field.
func (_u *VodUpdate) ClearLiveChatPath() *VodUpdate {
	_u.mutation.ClearLiveChatPath()
	return _u
}

// SetLiveChatConvertPath sets the "live_chat_convert_path" field.
func (_u *VodUpdate) SetLiveChatConvertPath(v string) *VodUpdate {
	_u.mutation.SetLiveChatConvertPath(v)
	return _u
}

// SetNillableLiveChatConvertPath sets the "live_chat_convert_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableLiveChatConvertPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetLiveChatConvertPath(*v)
	}
	return _u
}

// ClearLiveChatConvertPath clears the value of the "live_chat_convert_path" field.
func (_u *VodUpdate) ClearLiveChatConvertPath() *VodUpdate {
	_u.mutation.ClearLiveChatConvertPath()
	return _u
}

// SetChatVideoPath sets the "chat_video_path" field.
func (_u *VodUpdate) SetChatVideoPath(v string) *VodUpdate {
	_u.mutation.SetChatVideoPath(v)
	return _u
}

// SetNillableChatVideoPath sets the "chat_video_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableChatVideoPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetChatVideoPath(*v)
	}
	return _u
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (_u *VodUpdate) ClearChatVideoPath() *VodUpdate {
	_u.mutation.ClearChatVideoPath()
	return _u
}

// SetInfoPath sets the "info_path" field.
func (_u *VodUpdate) SetInfoPath(v string) *VodUpdate {
	_u.mutation.SetInfoPath(v)
	return _u
}

// SetNillableInfoPath sets the "info_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableInfoPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetInfoPath(*v)
	}
	return _u
}

// ClearInfoPath clears the value of the "info_path" field.
func (_u *VodUpdate) ClearInfoPath() *VodUpdate {
	_u.mutation.ClearInfoPath()
	return _u
}

// SetCaptionPath sets the "caption_path" field.
func (_u *VodUpdate) SetCaptionPath(v string) *VodUpdate {
	_u.mutation.SetCaptionPath(v)
	return _u
}

// SetNillableCaptionPath sets the "caption_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableCaptionPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetCaptionPath(*v)
	}
	return _u
}

// ClearCaptionPath clears the value of the "caption_path" field.
func (_u *VodUpdate) ClearCaptionPath() *VodUpdate {
	_u.mutation.ClearCaptionPath()
	return _u
}

// SetFolderName sets the "folder_name" field.
func (_u *VodUpdate) SetFolderName(v string) *VodUpdate {
	_u.mutation.SetFolderName(v)
	return _u
}

// SetNillableFolderName sets the "folder_name" field if the given value is not nil.
func (_u *VodUpdate) SetNillableFolderName(v *string) *VodUpdate {
	if v != nil {
		_u.SetFolderName(*v)
	}
	return _u
}

// ClearFolderName clears the value of the "folder_name" field.
func (_u *VodUpdate) ClearFolderName() *VodUpdate {
	_u.mutation.ClearFolderName()
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *VodUpdate) SetFileName(v string) *VodUpdate {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *VodUpdate) SetNillableFileName(v *string) *VodUpdate {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// ClearFileName clears the value of the "file_name" field.
func (_u *VodUpdate) ClearFileName() *VodUpdate {
	_u.mutation.ClearFileName()
	return _u
}

// SetTmpVideoDownloadPath sets the "tmp_video_download_path" field.
func (_u *VodUpdate) SetTmpVideoDownloadPath(v string) *VodUpdate {
	_u.mutation.SetTmpVideoDownloadPath(v)
	return _u
}

// SetNillableTmpVideoDownloadPath sets the "tmp_video_download_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpVideoDownloadPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpVideoDownloadPath(*v)
	}
	return _u
}

// ClearTmpVideoDownloadPath clears the value of the "tmp_video_download_path" field.
func (_u *VodUpdate) ClearTmpVideoDownloadPath() *VodUpdate {
	_u.mutation.ClearTmpVideoDownloadPath()
	return _u
}

// SetTmpVideoConvertPath sets the "tmp_video_convert_path" field.
func (_u *VodUpdate) SetTmpVideoConvertPath(v string) *VodUpdate {
	_u.mutation.SetTmpVideoConvertPath(v)
	return _u
}

// SetNillableTmpVideoConvertPath sets the "tmp_video_convert_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpVideoConvertPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpVideoConvertPath(*v)
	}
	return _u
}

// ClearTmpVideoConvertPath clears the value of the "tmp_video_convert_path" field.
func (_u *VodUpdate) ClearTmpVideoConvertPath() *VodUpdate {
	_u.mutation.ClearTmpVideoConvertPath()
	return _u
}

// SetTmpChatDownloadPath sets the "tmp_chat_download_path" field.
func (_u *VodUpdate) SetTmpChatDownloadPath(v string) *VodUpdate {
	_u.mutation.SetTmpChatDownloadPath(v)
	return _u
}

// SetNillableTmpChatDownloadPath sets the "tmp_chat_download_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpChatDownloadPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpChatDownloadPath(*v)
	}
	return _u
}

// ClearTmpChatDownloadPath clears the value of the "tmp_chat_download_path" field.
func (_u *VodUpdate) ClearTmpChatDownloadPath() *VodUpdate {
	_u.mutation.ClearTmpChatDownloadPath()
	return _u
}

// SetTmpLiveChatDownloadPath sets the "tmp_live_chat_download_path" field.
func (_u *VodUpdate) SetTmpLiveChatDownloadPath(v string) *VodUpdate {
	_u.mutation.SetTmpLiveChatDownloadPath(v)
	return _u
}

// SetNillableTmpLiveChatDownloadPath sets the "tmp_live_chat_download_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpLiveChatDownloadPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpLiveChatDownloadPath(*v)
	}
	return _u
}

// ClearTmpLiveChatDownloadPath clears the value of the "tmp_live_chat_download_path" field.
func (_u *VodUpdate) ClearTmpLiveChatDownloadPath() *VodUpdate {
	_u.mutation.ClearTmpLiveChatDownloadPath()
	return _u
}

// SetTmpLiveChatConvertPath sets the "tmp_live_chat_convert_path" field.
func (_u *VodUpdate) SetTmpLiveChatConvertPath(v string) *VodUpdate {
	_u.mutation.SetTmpLiveChatConvertPath(v)
	return _u
}

// SetNillableTmpLiveChatConvertPath sets the "tmp_live_chat_convert_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpLiveChatConvertPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpLiveChatConvertPath(*v)
	}
	return _u
}

// ClearTmpLiveChatConvertPath clears the value of the "tmp_live_chat_convert_path" field.
func (_u *VodUpdate) ClearTmpLiveChatConvertPath() *VodUpdate {
	_u.mutation.ClearTmpLiveChatConvertPath()
	return _u
}

// SetTmpChatRenderPath sets the "tmp_chat_render_path" field.
func (_u *VodUpdate) SetTmpChatRenderPath(v string) *VodUpdate {
	_u.mutation.SetTmpChatRenderPath(v)
	return _u
}

// SetNillableTmpChatRenderPath sets the "tmp_chat_render_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpChatRenderPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpChatRenderPath(*v)
	}
	return _u
}

// ClearTmpChatRenderPath clears the value of the "tmp_chat_render_path" field.
func (_u *VodUpdate) ClearTmpChatRenderPath() *VodUpdate {
	_u.mutation.ClearTmpChatRenderPath()
	return _u
}

// SetTmpVideoHlsPath sets the "tmp_video_hls_path" field.
func (_u *VodUpdate) SetTmpVideoHlsPath(v string) *VodUpdate {
	_u.mutation.SetTmpVideoHlsPath(v)
	return _u
}

// SetNillableTmpVideoHlsPath sets the "tmp_video_hls_path" field if the given value is not nil.
func (_u *VodUpdate) SetNillableTmpVideoHlsPath(v *string) *VodUpdate {
	if v != nil {
		_u.SetTmpVideoHlsPath(*v)
	}
	return _u
}

// ClearTmpVideoHlsPath clears the value of the "tmp_video_hls_path" field.
func (_u *VodUpdate) ClearTmpVideoHlsPath() *VodUpdate {
	_u.mutation.ClearTmpVideoHlsPath()
	return _u
}

// SetLocked sets the "locked" field.
func (_u *VodUpdate) SetLocked(v bool) *VodUpdate {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *VodUpdate) SetNillableLocked(v *bool) *VodUpdate {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetLocalViews sets the "local_views" field.
func (_u *VodUpdate) SetLocalViews(v int) *VodUpdate {
	_u.mutation.ResetLocalViews()
	_u.mutation.SetLocalViews(v)
	return _u
}

// SetNillableLocalViews sets the "local_views" field if the given value is not nil.
func (_u *VodUpdate) SetNillableLocalViews(v *int) *VodUpdate {
	if v != nil {
		_u.SetLocalViews(*v)
	}
	return _u
}

// AddLocalViews adds value to the "local_views" field.
func (_u *VodUpdate) AddLocalViews(v int) *VodUpdate {
	_u.mutation.AddLocalViews(v)
	return _u
}

// SetSpriteThumbnailsEnabled sets the "sprite_thumbnails_enabled" field.
func (_u *VodUpdate) SetSpriteThumbnailsEnabled(v bool) *VodUpdate {
	_u.mutation.SetSpriteThumbnailsEnabled(v)
	return _u
}

// SetNillableSpriteThumbnailsEnabled sets the "sprite_thumbnails_enabled" field if the given value is not nil.
func (_u *VodUpdate) SetNillableSpriteThumbnailsEnabled(v *bool) *VodUpdate {
	if v != nil {
		_u.SetSpriteThumbnailsEnabled(*v)
	}
	return _u
}

// SetSpriteThumbnailsImages sets the "sprite_thumbnails_images" field.
func (_u *VodUpdate) SetSpriteThumbnailsImages(v []string) *VodUpdate {
	_u.mutation.SetSpriteThumbnailsImages(v)
	return _u
}

// AppendSpriteThumbnailsImages appends value to the "sprite_thumbnails_images" field.
func (_u *VodUpdate) AppendSpriteThumbnailsImages(v []string) *VodUpdate {
	_u.mutation.AppendSpriteThumbnailsImages(v)
	return _u
}

// ClearSpriteThumbnailsImages clears the value of the "sprite_thumbnails_images" field.
func (_u *VodUpdate) ClearSpriteThumbnailsImages() *VodUpdate {
	_u.mutation.ClearSpriteThumbnailsImages()
	return _u
}

// SetSpriteThumbnailsInterval sets the "sprite_thumbnails_interval" field.
func (_u *VodUpdate) SetSpriteThumbnailsInterval(v int) *VodUpdate {
	_u.mutation.ResetSpriteThumbnailsInterval()
	_u.mutation.SetSpriteThumbnailsInterval(v)
	return _u
}

// SetNillableSpriteThumbnailsInterval sets the "sprite_thumbnails_interval" field if the given value is not nil.
func (_u *VodUpdate) SetNillableSpriteThumbnailsInterval(v *int) *VodUpdate {
	if v != nil {
		_u.SetSpriteThumbnailsInterval(*v)
	}
	return _u
}

// AddSpriteThumbnailsInterval adds value to the "sprite_thumbnails_interval" field.
func (_u *VodUpdate) AddSpriteThumbnailsInterval(v int) *VodUpdate {
	_u.mutation.AddSpriteThumbnailsInterval(v)
	return _u
}

// ClearSpriteThumbnailsInterval clears the value of the "sprite_thumbnails_interval" field.
func (_u *VodUpdate) ClearSpriteThumbnailsInterval() *VodUpdate {
	_u.mutation.ClearSpriteThumbnailsInterval()
	return _u
}

// SetSpriteThumbnailsWidth sets the "sprite_thumbnails_width" field.
func (_u *VodUpdate) SetSpriteThumbnailsWidth(v int) *VodUpdate {
	_u.mutation.ResetSpriteThumbnailsWidth()
	_u.mutation.SetSpriteThumbnailsWidth(v)
	return _u
}

// SetNillableSpriteThumbnailsWidth sets the "sprite_thumbnails_width" field if the given value is not nil.
func (_u *VodUpdate) SetNillableSpriteThumbnailsWidth(v *int) *VodUpdate {
	if v != nil {
		_u.SetSpriteThumbnailsWidth(*v)
	}
	return _u
}

// AddSpriteThumbnailsWidth adds value to the "sprite_thumbnails_width" field.
func (_u *VodUpdate) AddSpriteThumbnailsWidth(v int) *VodUpdate {
	_u.mutation.AddSpriteThumbnailsWidth(v)
	return _u
}

// ClearSpriteThumbnailsWidth clears the value of the "sprite_thumbnails_width" field.
func (_u *VodUpdate) ClearSpriteThumbnailsWidth() *VodUpdate {
	_u.mutation.ClearSpriteThumbnailsWidth()
	return _u
}

// SetSpriteThumbnailsHeight sets the "sprite_thumbnails_height" field.
func (_u *VodUpdate) SetSpriteThumbnailsHeight(v int) *VodUpdate {
	_u.mutation.ResetSpriteThumbnailsHeight()
	_u.mutation.SetSpriteThumbnailsHeight(v)
	return _u
}

// SetNillableSpriteThumbnailsHeight sets the "sprite_thumbnails_height" field if the given value is not nil.
func (_u *VodUpdate) SetNillableSpriteThumbnailsHeight(v *int) *VodUpdate {
	if v != nil {
		_u.SetSpriteThumbnailsHeight(*v)
	}
	return _u
}

// AddSpriteThumbnailsHeight adds value to the "sprite_thumbnails_height" field.
func (_u *VodUpdate) AddSpriteThumbnailsHeight(v int) *VodUpdate {
	_u.mutation.AddSpriteThumbnailsHeight(v)
	return _u
}

// ClearSpriteThumbnailsHeight clears the value of the "sprite_thumbnails_height" field.
func (_u *VodUpdate) ClearSpriteThumbnailsHeight() *VodUpdate {
	_u.mutation.ClearSpriteThumbnailsHeight()
	return _u
}

// SetSpriteThumbnailsRows sets the "sprite_thumbnails_rows" field.
func (_u *VodUpdate) SetSpriteThumbnailsRows(v int) *VodUpdate {
	_u.mutation.ResetSpriteThumbnailsRows()
	_u.mutation.SetSpriteThumbnailsRows(v)
	return _u
}

// SetNillableSpriteThumbnailsRows sets the "sprite_thumbnails_rows" field if the given value is not nil.
func (_u *VodUpdate) SetNillableSpriteThumbnailsRows(v *int) *VodUpdate {
	if v != nil {
		_u.SetSpriteThumbnailsRows(*v)
	}
	return _u
}

// AddSpriteThumbnailsRows adds value to the "sprite_thumbnails_rows" field.
func (_u *VodUpdate) AddSpriteThumbnailsRows(v int) *VodUpdate {
	_u.mutation.AddSpriteThumbnailsRows(v)
	return _u
}

// ClearSpriteThumbnailsRows clears the value of the "sprite_thumbnails_rows" field.
func (_u *VodUpdate) ClearSpriteThumbnailsRows() *VodUpdate {
	_u.mutation.ClearSpriteThumbnailsRows()
	return _u
}

// SetSpriteThumbnailsColumns sets the "sprite_thumbnails_columns" field.
func (_u *VodUpdate) SetSpriteThumbnailsColumns(v int) *VodUpdate {
	_u.mutation.ResetSpriteThumbnailsColumns()
	_u.mutation.SetSpriteThumbnailsColumns(v)
	return _u
}

// SetNillableSpriteThumbnailsColumns sets the "sprite_thumbnails_columns" field if the given value is not nil.
func (_u *VodUpdate) SetNillableSpriteThumbnailsColumns(v *int) *VodUpdate {
	if v != nil {
		_u.SetSpriteThumbnailsColumns(*v)
	}
	return _u
}

// AddSpriteThumbnailsColumns adds value to the "sprite_thumbnails_columns" field.
func (_u *VodUpdate) AddSpriteThumbnailsColumns(v int) *VodUpdate {
	_u.mutation.AddSpriteThumbnailsColumns(v)
	return _u
}

// ClearSpriteThumbnailsColumns clears the value of the "sprite_thumbnails_columns" field.
func (_u *VodUpdate) ClearSpriteThumbnailsColumns() *VodUpdate {
	_u.mutation.ClearSpriteThumbnailsColumns()
	return _u
}

// SetStorageSizeBytes sets the "storage_size_bytes" field.
func (_u *VodUpdate) SetStorageSizeBytes(v int64) *VodUpdate {
	_u.mutation.ResetStorageSizeBytes()
	_u.mutation.SetStorageSizeBytes(v)
	return _u
}

// SetNillableStorageSizeBytes sets the "storage_size_bytes" field if the given value is not nil.
func (_u *VodUpdate) SetNillableStorageSizeBytes(v *int64) *VodUpdate {
	if v != nil {
		_u.SetStorageSizeBytes(*v)
	}
	return _u
}

// AddStorageSizeBytes adds value to the "storage_size_bytes" field.
func (_u *VodUpdate) AddStorageSizeBytes(v int64) *VodUpdate {
	_u.mutation.AddStorageSizeBytes(v)
	return _u
}

// SetStreamedAt sets the "streamed_at" field.
func (_u *VodUpdate) SetStreamedAt(v time.Time) *VodUpdate {
	_u.mutation.SetStreamedAt(v)
	return _u
}

// SetNillableStreamedAt sets the "streamed_at" field if the given value is not nil.
func (_u *VodUpdate) SetNillableStreamedAt(v *time.Time) *VodUpdate {
	if v != nil {
		_u.SetStreamedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VodUpdate) SetUpdatedAt(v time.Time) *VodUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (_u *VodUpdate) SetChannelID(id uuid.UUID) *VodUpdate {
	_u.mutation.SetChannelID(id)
	return _u
}

// SetChannel sets the "channel" edge to the Channel entity.
func (_u *VodUpdate) SetChannel(v *Channel) *VodUpdate {
	return _u.SetChannelID(v.ID)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (_u *VodUpdate) SetQueueID(id uuid.UUID) *VodUpdate {
	_u.mutation.SetQueueID(id)
	return _u
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (_u *VodUpdate) SetNillableQueueID(id *uuid.UUID) *VodUpdate {
	if id != nil {
		_u = _u.SetQueueID(*id)
	}
	return _u
}

// SetQueue sets the "queue" edge to the Queue entity.
func (_u *VodUpdate) SetQueue(v *Queue) *VodUpdate {
	return _u.SetQueueID(v.ID)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by IDs.
func (_u *VodUpdate) AddPlaylistIDs(ids ...uuid.UUID) *VodUpdate {
	_u.mutation.AddPlaylistIDs(ids...)
	return _u
}

// AddPlaylists adds the "playlists" edges to the Playlist entity.
func (_u *VodUpdate) AddPlaylists(v ...*Playlist) *VodUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPlaylistIDs(ids...)
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (_u *VodUpdate) AddChapterIDs(ids ...uuid.UUID) *VodUpdate {
	_u.mutation.AddChapterIDs(ids...)
	return _u
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (_u *VodUpdate) AddChapters(v ...*Chapter) *VodUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChapterIDs(ids...)
}

// AddMutedSegmentIDs adds the "muted_segments" edge to the MutedSegment entity by IDs.
func (_u *VodUpdate) AddMutedSegmentIDs(ids ...uuid.UUID) *VodUpdate {
	_u.mutation.AddMutedSegmentIDs(ids...)
	return _u
}

// AddMutedSegments adds the "muted_segments" edges to the MutedSegment entity.
func (_u *VodUpdate) AddMutedSegments(v ...*MutedSegment) *VodUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMutedSegmentIDs(ids...)
}

// AddMultistreamInfoIDs adds the "multistream_info" edge to the MultistreamInfo entity by IDs.
func (_u *VodUpdate) AddMultistreamInfoIDs(ids ...int) *VodUpdate {
	_u.mutation.AddMultistreamInfoIDs(ids...)
	return _u
}

// AddMultistreamInfo adds the "multistream_info" edges to the MultistreamInfo entity.
func (_u *VodUpdate) AddMultistreamInfo(v ...*MultistreamInfo) *VodUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMultistreamInfoIDs(ids...)
}

// Mutation returns the VodMutation object of the builder.
func (_u *VodUpdate) Mutation() *VodMutation {
	return _u.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (_u *VodUpdate) ClearChannel() *VodUpdate {
	_u.mutation.ClearChannel()
	return _u
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (_u *VodUpdate) ClearQueue() *VodUpdate {
	_u.mutation.ClearQueue()
	return _u
}

// ClearPlaylists clears all "playlists" edges to the Playlist entity.
func (_u *VodUpdate) ClearPlaylists() *VodUpdate {
	_u.mutation.ClearPlaylists()
	return _u
}

// RemovePlaylistIDs removes the "playlists" edge to Playlist entities by IDs.
func (_u *VodUpdate) RemovePlaylistIDs(ids ...uuid.UUID) *VodUpdate {
	_u.mutation.RemovePlaylistIDs(ids...)
	return _u
}

// RemovePlaylists removes "playlists" edges to Playlist entities.
func (_u *VodUpdate) RemovePlaylists(v ...*Playlist) *VodUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePlaylistIDs(ids...)
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (_u *VodUpdate) ClearChapters() *VodUpdate {
	_u.mutation.ClearChapters()
	return _u
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (_u *VodUpdate) RemoveChapterIDs(ids ...uuid.UUID) *VodUpdate {
	_u.mutation.RemoveChapterIDs(ids...)
	return _u
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (_u *VodUpdate) RemoveChapters(v ...*Chapter) *VodUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChapterIDs(ids...)
}

// ClearMutedSegments clears all "muted_segments" edges to the MutedSegment entity.
func (_u *VodUpdate) ClearMutedSegments() *VodUpdate {
	_u.mutation.ClearMutedSegments()
	return _u
}

// RemoveMutedSegmentIDs removes the "muted_segments" edge to MutedSegment entities by IDs.
func (_u *VodUpdate) RemoveMutedSegmentIDs(ids ...uuid.UUID) *VodUpdate {
	_u.mutation.RemoveMutedSegmentIDs(ids...)
	return _u
}

// RemoveMutedSegments removes "muted_segments" edges to MutedSegment entities.
func (_u *VodUpdate) RemoveMutedSegments(v ...*MutedSegment) *VodUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMutedSegmentIDs(ids...)
}

// ClearMultistreamInfo clears all "multistream_info" edges to the MultistreamInfo entity.
func (_u *VodUpdate) ClearMultistreamInfo() *VodUpdate {
	_u.mutation.ClearMultistreamInfo()
	return _u
}

// RemoveMultistreamInfoIDs removes the "multistream_info" edge to MultistreamInfo entities by IDs.
func (_u *VodUpdate) RemoveMultistreamInfoIDs(ids ...int) *VodUpdate {
	_u.mutation.RemoveMultistreamInfoIDs(ids...)
	return _u
}

// RemoveMultistreamInfo removes "multistream_info" edges to MultistreamInfo entities.
func (_u *VodUpdate) RemoveMultistreamInfo(v ...*MultistreamInfo) *VodUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMultistreamInfoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *VodUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VodUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *VodUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VodUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VodUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := vod.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VodUpdate) check() error {
	if v, ok := _u.mutation.Platform(); ok {
		if err := vod.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Vod.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := vod.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Vod.type": %w`, err)}
		}
	}
	if _u.mutation.ChannelCleared() && len(_u.mutation.ChannelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vod.channel"`)
	}
	return nil
}

func (_u *VodUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vod.Table, vod.Columns, sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ExtID(); ok {
		_spec.SetField(vod.FieldExtID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClipExtVodID(); ok {
		_spec.SetField(vod.FieldClipExtVodID, field.TypeString, value)
	}
	if _u.mutation.ClipExtVodIDCleared() {
		_spec.ClearField(vod.FieldClipExtVodID, field.TypeString)
	}
	if value, ok := _u.mutation.ExtStreamID(); ok {
		_spec.SetField(vod.FieldExtStreamID, field.TypeString, value)
	}
	if _u.mutation.ExtStreamIDCleared() {
		_spec.ClearField(vod.FieldExtStreamID, field.TypeString)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(vod.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(vod.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(vod.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(vod.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(vod.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ClipVodOffset(); ok {
		_spec.SetField(vod.FieldClipVodOffset, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedClipVodOffset(); ok {
		_spec.AddField(vod.FieldClipVodOffset, field.TypeInt, value)
	}
	if _u.mutation.ClipVodOffsetCleared() {
		_spec.ClearField(vod.FieldClipVodOffset, field.TypeInt)
	}
	if value, ok := _u.mutation.Views(); ok {
		_spec.SetField(vod.FieldViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedViews(); ok {
		_spec.AddField(vod.FieldViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Resolution(); ok {
		_spec.SetField(vod.FieldResolution, field.TypeString, value)
	}
	if _u.mutation.ResolutionCleared() {
		_spec.ClearField(vod.FieldResolution, field.TypeString)
	}
	if value, ok := _u.mutation.Processing(); ok {
		_spec.SetField(vod.FieldProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ThumbnailPath(); ok {
		_spec.SetField(vod.FieldThumbnailPath, field.TypeString, value)
	}
	if _u.mutation.ThumbnailPathCleared() {
		_spec.ClearField(vod.FieldThumbnailPath, field.TypeString)
	}
	if value, ok := _u.mutation.WebThumbnailPath(); ok {
		_spec.SetField(vod.FieldWebThumbnailPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoPath(); ok {
		_spec.SetField(vod.FieldVideoPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoHlsPath(); ok {
		_spec.SetField(vod.FieldVideoHlsPath, field.TypeString, value)
	}
	if _u.mutation.VideoHlsPathCleared() {
		_spec.ClearField(vod.FieldVideoHlsPath, field.TypeString)
	}
	if value, ok := _u.mutation.ChatPath(); ok {
		_spec.SetField(vod.FieldChatPath, field.TypeString, value)
	}
	if _u.mutation.ChatPathCleared() {
		_spec.ClearField(vod.FieldChatPath, field.TypeString)
	}
	if value, ok := _u.mutation.LiveChatPath(); ok {
		_spec.SetField(vod.FieldLiveChatPath, field.TypeString, value)
	}
	if _u.mutation.LiveChatPathCleared() {
		_spec.ClearField(vod.FieldLiveChatPath, field.TypeString)
	}
	if value, ok := _u.mutation.LiveChatConvertPath(); ok {
		_spec.SetField(vod.FieldLiveChatConvertPath, field.TypeString, value)
	}
	if _u.mutation.LiveChatConvertPathCleared() {
		_spec.ClearField(vod.FieldLiveChatConvertPath, field.TypeString)
	}
	if value, ok := _u.mutation.ChatVideoPath(); ok {
		_spec.SetField(vod.FieldChatVideoPath, field.TypeString, value)
	}
	if _u.mutation.ChatVideoPathCleared() {
		_spec.ClearField(vod.FieldChatVideoPath, field.TypeString)
	}
	if value, ok := _u.mutation.InfoPath(); ok {
		_spec.SetField(vod.FieldInfoPath, field.TypeString, value)
	}
	if _u.mutation.InfoPathCleared() {
		_spec.ClearField(vod.FieldInfoPath, field.TypeString)
	}
	if value, ok := _u.mutation.CaptionPath(); ok {
		_spec.SetField(vod.FieldCaptionPath, field.TypeString, value)
	}
	if _u.mutation.CaptionPathCleared() {
		_spec.ClearField(vod.FieldCaptionPath, field.TypeString)
	}
	if value, ok := _u.mutation.FolderName(); ok {
		_spec.SetField(vod.FieldFolderName, field.TypeString, value)
	}
	if _u.mutation.FolderNameCleared() {
		_spec.ClearField(vod.FieldFolderName, field.TypeString)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(vod.FieldFileName, field.TypeString, value)
	}
	if _u.mutation.FileNameCleared() {
		_spec.ClearField(vod.FieldFileName, field.TypeString)
	}
	if value, ok := _u.mutation.TmpVideoDownloadPath(); ok {
		_spec.SetField(vod.FieldTmpVideoDownloadPath, field.TypeString, value)
	}
	if _u.mutation.TmpVideoDownloadPathCleared() {
		_spec.ClearField(vod.FieldTmpVideoDownloadPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpVideoConvertPath(); ok {
		_spec.SetField(vod.FieldTmpVideoConvertPath, field.TypeString, value)
	}
	if _u.mutation.TmpVideoConvertPathCleared() {
		_spec.ClearField(vod.FieldTmpVideoConvertPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpChatDownloadPath(); ok {
		_spec.SetField(vod.FieldTmpChatDownloadPath, field.TypeString, value)
	}
	if _u.mutation.TmpChatDownloadPathCleared() {
		_spec.ClearField(vod.FieldTmpChatDownloadPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpLiveChatDownloadPath(); ok {
		_spec.SetField(vod.FieldTmpLiveChatDownloadPath, field.TypeString, value)
	}
	if _u.mutation.TmpLiveChatDownloadPathCleared() {
		_spec.ClearField(vod.FieldTmpLiveChatDownloadPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpLiveChatConvertPath(); ok {
		_spec.SetField(vod.FieldTmpLiveChatConvertPath, field.TypeString, value)
	}
	if _u.mutation.TmpLiveChatConvertPathCleared() {
		_spec.ClearField(vod.FieldTmpLiveChatConvertPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpChatRenderPath(); ok {
		_spec.SetField(vod.FieldTmpChatRenderPath, field.TypeString, value)
	}
	if _u.mutation.TmpChatRenderPathCleared() {
		_spec.ClearField(vod.FieldTmpChatRenderPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpVideoHlsPath(); ok {
		_spec.SetField(vod.FieldTmpVideoHlsPath, field.TypeString, value)
	}
	if _u.mutation.TmpVideoHlsPathCleared() {
		_spec.ClearField(vod.FieldTmpVideoHlsPath, field.TypeString)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(vod.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LocalViews(); ok {
		_spec.SetField(vod.FieldLocalViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLocalViews(); ok {
		_spec.AddField(vod.FieldLocalViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.SpriteThumbnailsEnabled(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SpriteThumbnailsImages(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsImages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSpriteThumbnailsImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vod.FieldSpriteThumbnailsImages, value)
		})
	}
	if _u.mutation.SpriteThumbnailsImagesCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsImages, field.TypeJSON)
	}
	if value, ok := _u.mutation.SpriteThumbnailsInterval(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsInterval, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsInterval(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsInterval, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsIntervalCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsInterval, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsWidth(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsWidth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsWidth(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsWidth, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsWidthCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsWidth, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsHeight(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsHeight(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsHeight, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsHeightCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsHeight, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsRows(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsRows, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsRows(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsRows, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsRowsCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsRows, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsColumns(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsColumns, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsColumns(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsColumns, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsColumnsCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsColumns, field.TypeInt)
	}
	if value, ok := _u.mutation.StorageSizeBytes(); ok {
		_spec.SetField(vod.FieldStorageSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStorageSizeBytes(); ok {
		_spec.AddField(vod.FieldStorageSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.StreamedAt(); ok {
		_spec.SetField(vod.FieldStreamedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(vod.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vod.ChannelTable,
			Columns: []string{vod.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vod.ChannelTable,
			Columns: []string{vod.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vod.QueueTable,
			Columns: []string{vod.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vod.QueueTable,
			Columns: []string{vod.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !_u.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.ChaptersTable,
			Columns: []string{vod.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !_u.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.ChaptersTable,
			Columns: []string{vod.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.ChaptersTable,
			Columns: []string{vod.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MutedSegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.MutedSegmentsTable,
			Columns: []string{vod.MutedSegmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMutedSegmentsIDs(); len(nodes) > 0 && !_u.mutation.MutedSegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.MutedSegmentsTable,
			Columns: []string{vod.MutedSegmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MutedSegmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.MutedSegmentsTable,
			Columns: []string{vod.MutedSegmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vod.MultistreamInfoTable,
			Columns: []string{vod.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMultistreamInfoIDs(); len(nodes) > 0 && !_u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vod.MultistreamInfoTable,
			Columns: []string{vod.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MultistreamInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vod.MultistreamInfoTable,
			Columns: []string{vod.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// VodUpdateOne is the builder for updating a single Vod entity.
type VodUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VodMutation
}

// SetExtID sets the "ext_id" field.
func (_u *VodUpdateOne) SetExtID(v string) *VodUpdateOne {
	_u.mutation.SetExtID(v)
	return _u
}

// SetNillableExtID sets the "ext_id" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableExtID(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetExtID(*v)
	}
	return _u
}

// SetClipExtVodID sets the "clip_ext_vod_id" field.
func (_u *VodUpdateOne) SetClipExtVodID(v string) *VodUpdateOne {
	_u.mutation.SetClipExtVodID(v)
	return _u
}

// SetNillableClipExtVodID sets the "clip_ext_vod_id" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableClipExtVodID(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetClipExtVodID(*v)
	}
	return _u
}

// ClearClipExtVodID clears the value of the "clip_ext_vod_id" field.
func (_u *VodUpdateOne) ClearClipExtVodID() *VodUpdateOne {
	_u.mutation.ClearClipExtVodID()
	return _u
}

// SetExtStreamID sets the "ext_stream_id" field.
func (_u *VodUpdateOne) SetExtStreamID(v string) *VodUpdateOne {
	_u.mutation.SetExtStreamID(v)
	return _u
}

// SetNillableExtStreamID sets the "ext_stream_id" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableExtStreamID(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetExtStreamID(*v)
	}
	return _u
}

// ClearExtStreamID clears the value of the "ext_stream_id" field.
func (_u *VodUpdateOne) ClearExtStreamID() *VodUpdateOne {
	_u.mutation.ClearExtStreamID()
	return _u
}

// SetPlatform sets the "platform" field.
func (_u *VodUpdateOne) SetPlatform(v utils.VideoPlatform) *VodUpdateOne {
	_u.mutation.SetPlatform(v)
	return _u
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillablePlatform(v *utils.VideoPlatform) *VodUpdateOne {
	if v != nil {
		_u.SetPlatform(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *VodUpdateOne) SetType(v utils.VodType) *VodUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableType(v *utils.VodType) *VodUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetTitle sets the "title" field.
func (_u *VodUpdateOne) SetTitle(v string) *VodUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTitle(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDuration sets the "duration" field.
func (_u *VodUpdateOne) SetDuration(v int) *VodUpdateOne {
	_u.mutation.ResetDuration()
	_u.mutation.SetDuration(v)
	return _u
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableDuration(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetDuration(*v)
	}
	return _u
}

// AddDuration adds value to the "duration" field.
func (_u *VodUpdateOne) AddDuration(v int) *VodUpdateOne {
	_u.mutation.AddDuration(v)
	return _u
}

// SetClipVodOffset sets the "clip_vod_offset" field.
func (_u *VodUpdateOne) SetClipVodOffset(v int) *VodUpdateOne {
	_u.mutation.ResetClipVodOffset()
	_u.mutation.SetClipVodOffset(v)
	return _u
}

// SetNillableClipVodOffset sets the "clip_vod_offset" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableClipVodOffset(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetClipVodOffset(*v)
	}
	return _u
}

// AddClipVodOffset adds value to the "clip_vod_offset" field.
func (_u *VodUpdateOne) AddClipVodOffset(v int) *VodUpdateOne {
	_u.mutation.AddClipVodOffset(v)
	return _u
}

// ClearClipVodOffset clears the value of the "clip_vod_offset" field.
func (_u *VodUpdateOne) ClearClipVodOffset() *VodUpdateOne {
	_u.mutation.ClearClipVodOffset()
	return _u
}

// SetViews sets the "views" field.
func (_u *VodUpdateOne) SetViews(v int) *VodUpdateOne {
	_u.mutation.ResetViews()
	_u.mutation.SetViews(v)
	return _u
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableViews(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetViews(*v)
	}
	return _u
}

// AddViews adds value to the "views" field.
func (_u *VodUpdateOne) AddViews(v int) *VodUpdateOne {
	_u.mutation.AddViews(v)
	return _u
}

// SetResolution sets the "resolution" field.
func (_u *VodUpdateOne) SetResolution(v string) *VodUpdateOne {
	_u.mutation.SetResolution(v)
	return _u
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableResolution(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetResolution(*v)
	}
	return _u
}

// ClearResolution clears the value of the "resolution" field.
func (_u *VodUpdateOne) ClearResolution() *VodUpdateOne {
	_u.mutation.ClearResolution()
	return _u
}

// SetProcessing sets the "processing" field.
func (_u *VodUpdateOne) SetProcessing(v bool) *VodUpdateOne {
	_u.mutation.SetProcessing(v)
	return _u
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableProcessing(v *bool) *VodUpdateOne {
	if v != nil {
		_u.SetProcessing(*v)
	}
	return _u
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (_u *VodUpdateOne) SetThumbnailPath(v string) *VodUpdateOne {
	_u.mutation.SetThumbnailPath(v)
	return _u
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableThumbnailPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetThumbnailPath(*v)
	}
	return _u
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (_u *VodUpdateOne) ClearThumbnailPath() *VodUpdateOne {
	_u.mutation.ClearThumbnailPath()
	return _u
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (_u *VodUpdateOne) SetWebThumbnailPath(v string) *VodUpdateOne {
	_u.mutation.SetWebThumbnailPath(v)
	return _u
}

// SetNillableWebThumbnailPath sets the "web_thumbnail_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableWebThumbnailPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetWebThumbnailPath(*v)
	}
	return _u
}

// SetVideoPath sets the "video_path" field.
func (_u *VodUpdateOne) SetVideoPath(v string) *VodUpdateOne {
	_u.mutation.SetVideoPath(v)
	return _u
}

// SetNillableVideoPath sets the "video_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableVideoPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetVideoPath(*v)
	}
	return _u
}

// SetVideoHlsPath sets the "video_hls_path" field.
func (_u *VodUpdateOne) SetVideoHlsPath(v string) *VodUpdateOne {
	_u.mutation.SetVideoHlsPath(v)
	return _u
}

// SetNillableVideoHlsPath sets the "video_hls_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableVideoHlsPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetVideoHlsPath(*v)
	}
	return _u
}

// ClearVideoHlsPath clears the value of the "video_hls_path" field.
func (_u *VodUpdateOne) ClearVideoHlsPath() *VodUpdateOne {
	_u.mutation.ClearVideoHlsPath()
	return _u
}

// SetChatPath sets the "chat_path" field.
func (_u *VodUpdateOne) SetChatPath(v string) *VodUpdateOne {
	_u.mutation.SetChatPath(v)
	return _u
}

// SetNillableChatPath sets the "chat_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableChatPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetChatPath(*v)
	}
	return _u
}

// ClearChatPath clears the value of the "chat_path" field.
func (_u *VodUpdateOne) ClearChatPath() *VodUpdateOne {
	_u.mutation.ClearChatPath()
	return _u
}

// SetLiveChatPath sets the "live_chat_path" field.
func (_u *VodUpdateOne) SetLiveChatPath(v string) *VodUpdateOne {
	_u.mutation.SetLiveChatPath(v)
	return _u
}

// SetNillableLiveChatPath sets the "live_chat_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableLiveChatPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetLiveChatPath(*v)
	}
	return _u
}

// ClearLiveChatPath clears the value of the "live_chat_path" field.
func (_u *VodUpdateOne) ClearLiveChatPath() *VodUpdateOne {
	_u.mutation.ClearLiveChatPath()
	return _u
}

// SetLiveChatConvertPath sets the "live_chat_convert_path" field.
func (_u *VodUpdateOne) SetLiveChatConvertPath(v string) *VodUpdateOne {
	_u.mutation.SetLiveChatConvertPath(v)
	return _u
}

// SetNillableLiveChatConvertPath sets the "live_chat_convert_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableLiveChatConvertPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetLiveChatConvertPath(*v)
	}
	return _u
}

// ClearLiveChatConvertPath clears the value of the "live_chat_convert_path" field.
func (_u *VodUpdateOne) ClearLiveChatConvertPath() *VodUpdateOne {
	_u.mutation.ClearLiveChatConvertPath()
	return _u
}

// SetChatVideoPath sets the "chat_video_path" field.
func (_u *VodUpdateOne) SetChatVideoPath(v string) *VodUpdateOne {
	_u.mutation.SetChatVideoPath(v)
	return _u
}

// SetNillableChatVideoPath sets the "chat_video_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableChatVideoPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetChatVideoPath(*v)
	}
	return _u
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (_u *VodUpdateOne) ClearChatVideoPath() *VodUpdateOne {
	_u.mutation.ClearChatVideoPath()
	return _u
}

// SetInfoPath sets the "info_path" field.
func (_u *VodUpdateOne) SetInfoPath(v string) *VodUpdateOne {
	_u.mutation.SetInfoPath(v)
	return _u
}

// SetNillableInfoPath sets the "info_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableInfoPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetInfoPath(*v)
	}
	return _u
}

// ClearInfoPath clears the value of the "info_path" field.
func (_u *VodUpdateOne) ClearInfoPath() *VodUpdateOne {
	_u.mutation.ClearInfoPath()
	return _u
}

// SetCaptionPath sets the "caption_path" field.
func (_u *VodUpdateOne) SetCaptionPath(v string) *VodUpdateOne {
	_u.mutation.SetCaptionPath(v)
	return _u
}

// SetNillableCaptionPath sets the "caption_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableCaptionPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetCaptionPath(*v)
	}
	return _u
}

// ClearCaptionPath clears the value of the "caption_path" field.
func (_u *VodUpdateOne) ClearCaptionPath() *VodUpdateOne {
	_u.mutation.ClearCaptionPath()
	return _u
}

// SetFolderName sets the "folder_name" field.
func (_u *VodUpdateOne) SetFolderName(v string) *VodUpdateOne {
	_u.mutation.SetFolderName(v)
	return _u
}

// SetNillableFolderName sets the "folder_name" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableFolderName(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetFolderName(*v)
	}
	return _u
}

// ClearFolderName clears the value of the "folder_name" field.
func (_u *VodUpdateOne) ClearFolderName() *VodUpdateOne {
	_u.mutation.ClearFolderName()
	return _u
}

// SetFileName sets the "file_name" field.
func (_u *VodUpdateOne) SetFileName(v string) *VodUpdateOne {
	_u.mutation.SetFileName(v)
	return _u
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableFileName(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetFileName(*v)
	}
	return _u
}

// ClearFileName clears the value of the "file_name" field.
func (_u *VodUpdateOne) ClearFileName() *VodUpdateOne {
	_u.mutation.ClearFileName()
	return _u
}

// SetTmpVideoDownloadPath sets the "tmp_video_download_path" field.
func (_u *VodUpdateOne) SetTmpVideoDownloadPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpVideoDownloadPath(v)
	return _u
}

// SetNillableTmpVideoDownloadPath sets the "tmp_video_download_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpVideoDownloadPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpVideoDownloadPath(*v)
	}
	return _u
}

// ClearTmpVideoDownloadPath clears the value of the "tmp_video_download_path" field.
func (_u *VodUpdateOne) ClearTmpVideoDownloadPath() *VodUpdateOne {
	_u.mutation.ClearTmpVideoDownloadPath()
	return _u
}

// SetTmpVideoConvertPath sets the "tmp_video_convert_path" field.
func (_u *VodUpdateOne) SetTmpVideoConvertPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpVideoConvertPath(v)
	return _u
}

// SetNillableTmpVideoConvertPath sets the "tmp_video_convert_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpVideoConvertPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpVideoConvertPath(*v)
	}
	return _u
}

// ClearTmpVideoConvertPath clears the value of the "tmp_video_convert_path" field.
func (_u *VodUpdateOne) ClearTmpVideoConvertPath() *VodUpdateOne {
	_u.mutation.ClearTmpVideoConvertPath()
	return _u
}

// SetTmpChatDownloadPath sets the "tmp_chat_download_path" field.
func (_u *VodUpdateOne) SetTmpChatDownloadPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpChatDownloadPath(v)
	return _u
}

// SetNillableTmpChatDownloadPath sets the "tmp_chat_download_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpChatDownloadPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpChatDownloadPath(*v)
	}
	return _u
}

// ClearTmpChatDownloadPath clears the value of the "tmp_chat_download_path" field.
func (_u *VodUpdateOne) ClearTmpChatDownloadPath() *VodUpdateOne {
	_u.mutation.ClearTmpChatDownloadPath()
	return _u
}

// SetTmpLiveChatDownloadPath sets the "tmp_live_chat_download_path" field.
func (_u *VodUpdateOne) SetTmpLiveChatDownloadPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpLiveChatDownloadPath(v)
	return _u
}

// SetNillableTmpLiveChatDownloadPath sets the "tmp_live_chat_download_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpLiveChatDownloadPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpLiveChatDownloadPath(*v)
	}
	return _u
}

// ClearTmpLiveChatDownloadPath clears the value of the "tmp_live_chat_download_path" field.
func (_u *VodUpdateOne) ClearTmpLiveChatDownloadPath() *VodUpdateOne {
	_u.mutation.ClearTmpLiveChatDownloadPath()
	return _u
}

// SetTmpLiveChatConvertPath sets the "tmp_live_chat_convert_path" field.
func (_u *VodUpdateOne) SetTmpLiveChatConvertPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpLiveChatConvertPath(v)
	return _u
}

// SetNillableTmpLiveChatConvertPath sets the "tmp_live_chat_convert_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpLiveChatConvertPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpLiveChatConvertPath(*v)
	}
	return _u
}

// ClearTmpLiveChatConvertPath clears the value of the "tmp_live_chat_convert_path" field.
func (_u *VodUpdateOne) ClearTmpLiveChatConvertPath() *VodUpdateOne {
	_u.mutation.ClearTmpLiveChatConvertPath()
	return _u
}

// SetTmpChatRenderPath sets the "tmp_chat_render_path" field.
func (_u *VodUpdateOne) SetTmpChatRenderPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpChatRenderPath(v)
	return _u
}

// SetNillableTmpChatRenderPath sets the "tmp_chat_render_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpChatRenderPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpChatRenderPath(*v)
	}
	return _u
}

// ClearTmpChatRenderPath clears the value of the "tmp_chat_render_path" field.
func (_u *VodUpdateOne) ClearTmpChatRenderPath() *VodUpdateOne {
	_u.mutation.ClearTmpChatRenderPath()
	return _u
}

// SetTmpVideoHlsPath sets the "tmp_video_hls_path" field.
func (_u *VodUpdateOne) SetTmpVideoHlsPath(v string) *VodUpdateOne {
	_u.mutation.SetTmpVideoHlsPath(v)
	return _u
}

// SetNillableTmpVideoHlsPath sets the "tmp_video_hls_path" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableTmpVideoHlsPath(v *string) *VodUpdateOne {
	if v != nil {
		_u.SetTmpVideoHlsPath(*v)
	}
	return _u
}

// ClearTmpVideoHlsPath clears the value of the "tmp_video_hls_path" field.
func (_u *VodUpdateOne) ClearTmpVideoHlsPath() *VodUpdateOne {
	_u.mutation.ClearTmpVideoHlsPath()
	return _u
}

// SetLocked sets the "locked" field.
func (_u *VodUpdateOne) SetLocked(v bool) *VodUpdateOne {
	_u.mutation.SetLocked(v)
	return _u
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableLocked(v *bool) *VodUpdateOne {
	if v != nil {
		_u.SetLocked(*v)
	}
	return _u
}

// SetLocalViews sets the "local_views" field.
func (_u *VodUpdateOne) SetLocalViews(v int) *VodUpdateOne {
	_u.mutation.ResetLocalViews()
	_u.mutation.SetLocalViews(v)
	return _u
}

// SetNillableLocalViews sets the "local_views" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableLocalViews(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetLocalViews(*v)
	}
	return _u
}

// AddLocalViews adds value to the "local_views" field.
func (_u *VodUpdateOne) AddLocalViews(v int) *VodUpdateOne {
	_u.mutation.AddLocalViews(v)
	return _u
}

// SetSpriteThumbnailsEnabled sets the "sprite_thumbnails_enabled" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsEnabled(v bool) *VodUpdateOne {
	_u.mutation.SetSpriteThumbnailsEnabled(v)
	return _u
}

// SetNillableSpriteThumbnailsEnabled sets the "sprite_thumbnails_enabled" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableSpriteThumbnailsEnabled(v *bool) *VodUpdateOne {
	if v != nil {
		_u.SetSpriteThumbnailsEnabled(*v)
	}
	return _u
}

// SetSpriteThumbnailsImages sets the "sprite_thumbnails_images" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsImages(v []string) *VodUpdateOne {
	_u.mutation.SetSpriteThumbnailsImages(v)
	return _u
}

// AppendSpriteThumbnailsImages appends value to the "sprite_thumbnails_images" field.
func (_u *VodUpdateOne) AppendSpriteThumbnailsImages(v []string) *VodUpdateOne {
	_u.mutation.AppendSpriteThumbnailsImages(v)
	return _u
}

// ClearSpriteThumbnailsImages clears the value of the "sprite_thumbnails_images" field.
func (_u *VodUpdateOne) ClearSpriteThumbnailsImages() *VodUpdateOne {
	_u.mutation.ClearSpriteThumbnailsImages()
	return _u
}

// SetSpriteThumbnailsInterval sets the "sprite_thumbnails_interval" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsInterval(v int) *VodUpdateOne {
	_u.mutation.ResetSpriteThumbnailsInterval()
	_u.mutation.SetSpriteThumbnailsInterval(v)
	return _u
}

// SetNillableSpriteThumbnailsInterval sets the "sprite_thumbnails_interval" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableSpriteThumbnailsInterval(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetSpriteThumbnailsInterval(*v)
	}
	return _u
}

// AddSpriteThumbnailsInterval adds value to the "sprite_thumbnails_interval" field.
func (_u *VodUpdateOne) AddSpriteThumbnailsInterval(v int) *VodUpdateOne {
	_u.mutation.AddSpriteThumbnailsInterval(v)
	return _u
}

// ClearSpriteThumbnailsInterval clears the value of the "sprite_thumbnails_interval" field.
func (_u *VodUpdateOne) ClearSpriteThumbnailsInterval() *VodUpdateOne {
	_u.mutation.ClearSpriteThumbnailsInterval()
	return _u
}

// SetSpriteThumbnailsWidth sets the "sprite_thumbnails_width" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsWidth(v int) *VodUpdateOne {
	_u.mutation.ResetSpriteThumbnailsWidth()
	_u.mutation.SetSpriteThumbnailsWidth(v)
	return _u
}

// SetNillableSpriteThumbnailsWidth sets the "sprite_thumbnails_width" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableSpriteThumbnailsWidth(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetSpriteThumbnailsWidth(*v)
	}
	return _u
}

// AddSpriteThumbnailsWidth adds value to the "sprite_thumbnails_width" field.
func (_u *VodUpdateOne) AddSpriteThumbnailsWidth(v int) *VodUpdateOne {
	_u.mutation.AddSpriteThumbnailsWidth(v)
	return _u
}

// ClearSpriteThumbnailsWidth clears the value of the "sprite_thumbnails_width" field.
func (_u *VodUpdateOne) ClearSpriteThumbnailsWidth() *VodUpdateOne {
	_u.mutation.ClearSpriteThumbnailsWidth()
	return _u
}

// SetSpriteThumbnailsHeight sets the "sprite_thumbnails_height" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsHeight(v int) *VodUpdateOne {
	_u.mutation.ResetSpriteThumbnailsHeight()
	_u.mutation.SetSpriteThumbnailsHeight(v)
	return _u
}

// SetNillableSpriteThumbnailsHeight sets the "sprite_thumbnails_height" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableSpriteThumbnailsHeight(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetSpriteThumbnailsHeight(*v)
	}
	return _u
}

// AddSpriteThumbnailsHeight adds value to the "sprite_thumbnails_height" field.
func (_u *VodUpdateOne) AddSpriteThumbnailsHeight(v int) *VodUpdateOne {
	_u.mutation.AddSpriteThumbnailsHeight(v)
	return _u
}

// ClearSpriteThumbnailsHeight clears the value of the "sprite_thumbnails_height" field.
func (_u *VodUpdateOne) ClearSpriteThumbnailsHeight() *VodUpdateOne {
	_u.mutation.ClearSpriteThumbnailsHeight()
	return _u
}

// SetSpriteThumbnailsRows sets the "sprite_thumbnails_rows" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsRows(v int) *VodUpdateOne {
	_u.mutation.ResetSpriteThumbnailsRows()
	_u.mutation.SetSpriteThumbnailsRows(v)
	return _u
}

// SetNillableSpriteThumbnailsRows sets the "sprite_thumbnails_rows" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableSpriteThumbnailsRows(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetSpriteThumbnailsRows(*v)
	}
	return _u
}

// AddSpriteThumbnailsRows adds value to the "sprite_thumbnails_rows" field.
func (_u *VodUpdateOne) AddSpriteThumbnailsRows(v int) *VodUpdateOne {
	_u.mutation.AddSpriteThumbnailsRows(v)
	return _u
}

// ClearSpriteThumbnailsRows clears the value of the "sprite_thumbnails_rows" field.
func (_u *VodUpdateOne) ClearSpriteThumbnailsRows() *VodUpdateOne {
	_u.mutation.ClearSpriteThumbnailsRows()
	return _u
}

// SetSpriteThumbnailsColumns sets the "sprite_thumbnails_columns" field.
func (_u *VodUpdateOne) SetSpriteThumbnailsColumns(v int) *VodUpdateOne {
	_u.mutation.ResetSpriteThumbnailsColumns()
	_u.mutation.SetSpriteThumbnailsColumns(v)
	return _u
}

// SetNillableSpriteThumbnailsColumns sets the "sprite_thumbnails_columns" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableSpriteThumbnailsColumns(v *int) *VodUpdateOne {
	if v != nil {
		_u.SetSpriteThumbnailsColumns(*v)
	}
	return _u
}

// AddSpriteThumbnailsColumns adds value to the "sprite_thumbnails_columns" field.
func (_u *VodUpdateOne) AddSpriteThumbnailsColumns(v int) *VodUpdateOne {
	_u.mutation.AddSpriteThumbnailsColumns(v)
	return _u
}

// ClearSpriteThumbnailsColumns clears the value of the "sprite_thumbnails_columns" field.
func (_u *VodUpdateOne) ClearSpriteThumbnailsColumns() *VodUpdateOne {
	_u.mutation.ClearSpriteThumbnailsColumns()
	return _u
}

// SetStorageSizeBytes sets the "storage_size_bytes" field.
func (_u *VodUpdateOne) SetStorageSizeBytes(v int64) *VodUpdateOne {
	_u.mutation.ResetStorageSizeBytes()
	_u.mutation.SetStorageSizeBytes(v)
	return _u
}

// SetNillableStorageSizeBytes sets the "storage_size_bytes" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableStorageSizeBytes(v *int64) *VodUpdateOne {
	if v != nil {
		_u.SetStorageSizeBytes(*v)
	}
	return _u
}

// AddStorageSizeBytes adds value to the "storage_size_bytes" field.
func (_u *VodUpdateOne) AddStorageSizeBytes(v int64) *VodUpdateOne {
	_u.mutation.AddStorageSizeBytes(v)
	return _u
}

// SetStreamedAt sets the "streamed_at" field.
func (_u *VodUpdateOne) SetStreamedAt(v time.Time) *VodUpdateOne {
	_u.mutation.SetStreamedAt(v)
	return _u
}

// SetNillableStreamedAt sets the "streamed_at" field if the given value is not nil.
func (_u *VodUpdateOne) SetNillableStreamedAt(v *time.Time) *VodUpdateOne {
	if v != nil {
		_u.SetStreamedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *VodUpdateOne) SetUpdatedAt(v time.Time) *VodUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (_u *VodUpdateOne) SetChannelID(id uuid.UUID) *VodUpdateOne {
	_u.mutation.SetChannelID(id)
	return _u
}

// SetChannel sets the "channel" edge to the Channel entity.
func (_u *VodUpdateOne) SetChannel(v *Channel) *VodUpdateOne {
	return _u.SetChannelID(v.ID)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (_u *VodUpdateOne) SetQueueID(id uuid.UUID) *VodUpdateOne {
	_u.mutation.SetQueueID(id)
	return _u
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (_u *VodUpdateOne) SetNillableQueueID(id *uuid.UUID) *VodUpdateOne {
	if id != nil {
		_u = _u.SetQueueID(*id)
	}
	return _u
}

// SetQueue sets the "queue" edge to the Queue entity.
func (_u *VodUpdateOne) SetQueue(v *Queue) *VodUpdateOne {
	return _u.SetQueueID(v.ID)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by IDs.
func (_u *VodUpdateOne) AddPlaylistIDs(ids ...uuid.UUID) *VodUpdateOne {
	_u.mutation.AddPlaylistIDs(ids...)
	return _u
}

// AddPlaylists adds the "playlists" edges to the Playlist entity.
func (_u *VodUpdateOne) AddPlaylists(v ...*Playlist) *VodUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPlaylistIDs(ids...)
}

// AddChapterIDs adds the "chapters" edge to the Chapter entity by IDs.
func (_u *VodUpdateOne) AddChapterIDs(ids ...uuid.UUID) *VodUpdateOne {
	_u.mutation.AddChapterIDs(ids...)
	return _u
}

// AddChapters adds the "chapters" edges to the Chapter entity.
func (_u *VodUpdateOne) AddChapters(v ...*Chapter) *VodUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChapterIDs(ids...)
}

// AddMutedSegmentIDs adds the "muted_segments" edge to the MutedSegment entity by IDs.
func (_u *VodUpdateOne) AddMutedSegmentIDs(ids ...uuid.UUID) *VodUpdateOne {
	_u.mutation.AddMutedSegmentIDs(ids...)
	return _u
}

// AddMutedSegments adds the "muted_segments" edges to the MutedSegment entity.
func (_u *VodUpdateOne) AddMutedSegments(v ...*MutedSegment) *VodUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMutedSegmentIDs(ids...)
}

// AddMultistreamInfoIDs adds the "multistream_info" edge to the MultistreamInfo entity by IDs.
func (_u *VodUpdateOne) AddMultistreamInfoIDs(ids ...int) *VodUpdateOne {
	_u.mutation.AddMultistreamInfoIDs(ids...)
	return _u
}

// AddMultistreamInfo adds the "multistream_info" edges to the MultistreamInfo entity.
func (_u *VodUpdateOne) AddMultistreamInfo(v ...*MultistreamInfo) *VodUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMultistreamInfoIDs(ids...)
}

// Mutation returns the VodMutation object of the builder.
func (_u *VodUpdateOne) Mutation() *VodMutation {
	return _u.mutation
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (_u *VodUpdateOne) ClearChannel() *VodUpdateOne {
	_u.mutation.ClearChannel()
	return _u
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (_u *VodUpdateOne) ClearQueue() *VodUpdateOne {
	_u.mutation.ClearQueue()
	return _u
}

// ClearPlaylists clears all "playlists" edges to the Playlist entity.
func (_u *VodUpdateOne) ClearPlaylists() *VodUpdateOne {
	_u.mutation.ClearPlaylists()
	return _u
}

// RemovePlaylistIDs removes the "playlists" edge to Playlist entities by IDs.
func (_u *VodUpdateOne) RemovePlaylistIDs(ids ...uuid.UUID) *VodUpdateOne {
	_u.mutation.RemovePlaylistIDs(ids...)
	return _u
}

// RemovePlaylists removes "playlists" edges to Playlist entities.
func (_u *VodUpdateOne) RemovePlaylists(v ...*Playlist) *VodUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePlaylistIDs(ids...)
}

// ClearChapters clears all "chapters" edges to the Chapter entity.
func (_u *VodUpdateOne) ClearChapters() *VodUpdateOne {
	_u.mutation.ClearChapters()
	return _u
}

// RemoveChapterIDs removes the "chapters" edge to Chapter entities by IDs.
func (_u *VodUpdateOne) RemoveChapterIDs(ids ...uuid.UUID) *VodUpdateOne {
	_u.mutation.RemoveChapterIDs(ids...)
	return _u
}

// RemoveChapters removes "chapters" edges to Chapter entities.
func (_u *VodUpdateOne) RemoveChapters(v ...*Chapter) *VodUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChapterIDs(ids...)
}

// ClearMutedSegments clears all "muted_segments" edges to the MutedSegment entity.
func (_u *VodUpdateOne) ClearMutedSegments() *VodUpdateOne {
	_u.mutation.ClearMutedSegments()
	return _u
}

// RemoveMutedSegmentIDs removes the "muted_segments" edge to MutedSegment entities by IDs.
func (_u *VodUpdateOne) RemoveMutedSegmentIDs(ids ...uuid.UUID) *VodUpdateOne {
	_u.mutation.RemoveMutedSegmentIDs(ids...)
	return _u
}

// RemoveMutedSegments removes "muted_segments" edges to MutedSegment entities.
func (_u *VodUpdateOne) RemoveMutedSegments(v ...*MutedSegment) *VodUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMutedSegmentIDs(ids...)
}

// ClearMultistreamInfo clears all "multistream_info" edges to the MultistreamInfo entity.
func (_u *VodUpdateOne) ClearMultistreamInfo() *VodUpdateOne {
	_u.mutation.ClearMultistreamInfo()
	return _u
}

// RemoveMultistreamInfoIDs removes the "multistream_info" edge to MultistreamInfo entities by IDs.
func (_u *VodUpdateOne) RemoveMultistreamInfoIDs(ids ...int) *VodUpdateOne {
	_u.mutation.RemoveMultistreamInfoIDs(ids...)
	return _u
}

// RemoveMultistreamInfo removes "multistream_info" edges to MultistreamInfo entities.
func (_u *VodUpdateOne) RemoveMultistreamInfo(v ...*MultistreamInfo) *VodUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMultistreamInfoIDs(ids...)
}

// Where appends a list predicates to the VodUpdate builder.
func (_u *VodUpdateOne) Where(ps ...predicate.Vod) *VodUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *VodUpdateOne) Select(field string, fields ...string) *VodUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Vod entity.
func (_u *VodUpdateOne) Save(ctx context.Context) (*Vod, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *VodUpdateOne) SaveX(ctx context.Context) *Vod {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *VodUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *VodUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *VodUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := vod.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *VodUpdateOne) check() error {
	if v, ok := _u.mutation.Platform(); ok {
		if err := vod.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Vod.platform": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := vod.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Vod.type": %w`, err)}
		}
	}
	if _u.mutation.ChannelCleared() && len(_u.mutation.ChannelIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Vod.channel"`)
	}
	return nil
}

func (_u *VodUpdateOne) sqlSave(ctx context.Context) (_node *Vod, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(vod.Table, vod.Columns, sqlgraph.NewFieldSpec(vod.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vod.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vod.FieldID)
		for _, f := range fields {
			if !vod.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vod.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ExtID(); ok {
		_spec.SetField(vod.FieldExtID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClipExtVodID(); ok {
		_spec.SetField(vod.FieldClipExtVodID, field.TypeString, value)
	}
	if _u.mutation.ClipExtVodIDCleared() {
		_spec.ClearField(vod.FieldClipExtVodID, field.TypeString)
	}
	if value, ok := _u.mutation.ExtStreamID(); ok {
		_spec.SetField(vod.FieldExtStreamID, field.TypeString, value)
	}
	if _u.mutation.ExtStreamIDCleared() {
		_spec.ClearField(vod.FieldExtStreamID, field.TypeString)
	}
	if value, ok := _u.mutation.Platform(); ok {
		_spec.SetField(vod.FieldPlatform, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(vod.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(vod.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Duration(); ok {
		_spec.SetField(vod.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDuration(); ok {
		_spec.AddField(vod.FieldDuration, field.TypeInt, value)
	}
	if value, ok := _u.mutation.ClipVodOffset(); ok {
		_spec.SetField(vod.FieldClipVodOffset, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedClipVodOffset(); ok {
		_spec.AddField(vod.FieldClipVodOffset, field.TypeInt, value)
	}
	if _u.mutation.ClipVodOffsetCleared() {
		_spec.ClearField(vod.FieldClipVodOffset, field.TypeInt)
	}
	if value, ok := _u.mutation.Views(); ok {
		_spec.SetField(vod.FieldViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedViews(); ok {
		_spec.AddField(vod.FieldViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Resolution(); ok {
		_spec.SetField(vod.FieldResolution, field.TypeString, value)
	}
	if _u.mutation.ResolutionCleared() {
		_spec.ClearField(vod.FieldResolution, field.TypeString)
	}
	if value, ok := _u.mutation.Processing(); ok {
		_spec.SetField(vod.FieldProcessing, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ThumbnailPath(); ok {
		_spec.SetField(vod.FieldThumbnailPath, field.TypeString, value)
	}
	if _u.mutation.ThumbnailPathCleared() {
		_spec.ClearField(vod.FieldThumbnailPath, field.TypeString)
	}
	if value, ok := _u.mutation.WebThumbnailPath(); ok {
		_spec.SetField(vod.FieldWebThumbnailPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoPath(); ok {
		_spec.SetField(vod.FieldVideoPath, field.TypeString, value)
	}
	if value, ok := _u.mutation.VideoHlsPath(); ok {
		_spec.SetField(vod.FieldVideoHlsPath, field.TypeString, value)
	}
	if _u.mutation.VideoHlsPathCleared() {
		_spec.ClearField(vod.FieldVideoHlsPath, field.TypeString)
	}
	if value, ok := _u.mutation.ChatPath(); ok {
		_spec.SetField(vod.FieldChatPath, field.TypeString, value)
	}
	if _u.mutation.ChatPathCleared() {
		_spec.ClearField(vod.FieldChatPath, field.TypeString)
	}
	if value, ok := _u.mutation.LiveChatPath(); ok {
		_spec.SetField(vod.FieldLiveChatPath, field.TypeString, value)
	}
	if _u.mutation.LiveChatPathCleared() {
		_spec.ClearField(vod.FieldLiveChatPath, field.TypeString)
	}
	if value, ok := _u.mutation.LiveChatConvertPath(); ok {
		_spec.SetField(vod.FieldLiveChatConvertPath, field.TypeString, value)
	}
	if _u.mutation.LiveChatConvertPathCleared() {
		_spec.ClearField(vod.FieldLiveChatConvertPath, field.TypeString)
	}
	if value, ok := _u.mutation.ChatVideoPath(); ok {
		_spec.SetField(vod.FieldChatVideoPath, field.TypeString, value)
	}
	if _u.mutation.ChatVideoPathCleared() {
		_spec.ClearField(vod.FieldChatVideoPath, field.TypeString)
	}
	if value, ok := _u.mutation.InfoPath(); ok {
		_spec.SetField(vod.FieldInfoPath, field.TypeString, value)
	}
	if _u.mutation.InfoPathCleared() {
		_spec.ClearField(vod.FieldInfoPath, field.TypeString)
	}
	if value, ok := _u.mutation.CaptionPath(); ok {
		_spec.SetField(vod.FieldCaptionPath, field.TypeString, value)
	}
	if _u.mutation.CaptionPathCleared() {
		_spec.ClearField(vod.FieldCaptionPath, field.TypeString)
	}
	if value, ok := _u.mutation.FolderName(); ok {
		_spec.SetField(vod.FieldFolderName, field.TypeString, value)
	}
	if _u.mutation.FolderNameCleared() {
		_spec.ClearField(vod.FieldFolderName, field.TypeString)
	}
	if value, ok := _u.mutation.FileName(); ok {
		_spec.SetField(vod.FieldFileName, field.TypeString, value)
	}
	if _u.mutation.FileNameCleared() {
		_spec.ClearField(vod.FieldFileName, field.TypeString)
	}
	if value, ok := _u.mutation.TmpVideoDownloadPath(); ok {
		_spec.SetField(vod.FieldTmpVideoDownloadPath, field.TypeString, value)
	}
	if _u.mutation.TmpVideoDownloadPathCleared() {
		_spec.ClearField(vod.FieldTmpVideoDownloadPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpVideoConvertPath(); ok {
		_spec.SetField(vod.FieldTmpVideoConvertPath, field.TypeString, value)
	}
	if _u.mutation.TmpVideoConvertPathCleared() {
		_spec.ClearField(vod.FieldTmpVideoConvertPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpChatDownloadPath(); ok {
		_spec.SetField(vod.FieldTmpChatDownloadPath, field.TypeString, value)
	}
	if _u.mutation.TmpChatDownloadPathCleared() {
		_spec.ClearField(vod.FieldTmpChatDownloadPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpLiveChatDownloadPath(); ok {
		_spec.SetField(vod.FieldTmpLiveChatDownloadPath, field.TypeString, value)
	}
	if _u.mutation.TmpLiveChatDownloadPathCleared() {
		_spec.ClearField(vod.FieldTmpLiveChatDownloadPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpLiveChatConvertPath(); ok {
		_spec.SetField(vod.FieldTmpLiveChatConvertPath, field.TypeString, value)
	}
	if _u.mutation.TmpLiveChatConvertPathCleared() {
		_spec.ClearField(vod.FieldTmpLiveChatConvertPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpChatRenderPath(); ok {
		_spec.SetField(vod.FieldTmpChatRenderPath, field.TypeString, value)
	}
	if _u.mutation.TmpChatRenderPathCleared() {
		_spec.ClearField(vod.FieldTmpChatRenderPath, field.TypeString)
	}
	if value, ok := _u.mutation.TmpVideoHlsPath(); ok {
		_spec.SetField(vod.FieldTmpVideoHlsPath, field.TypeString, value)
	}
	if _u.mutation.TmpVideoHlsPathCleared() {
		_spec.ClearField(vod.FieldTmpVideoHlsPath, field.TypeString)
	}
	if value, ok := _u.mutation.Locked(); ok {
		_spec.SetField(vod.FieldLocked, field.TypeBool, value)
	}
	if value, ok := _u.mutation.LocalViews(); ok {
		_spec.SetField(vod.FieldLocalViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedLocalViews(); ok {
		_spec.AddField(vod.FieldLocalViews, field.TypeInt, value)
	}
	if value, ok := _u.mutation.SpriteThumbnailsEnabled(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SpriteThumbnailsImages(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsImages, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedSpriteThumbnailsImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, vod.FieldSpriteThumbnailsImages, value)
		})
	}
	if _u.mutation.SpriteThumbnailsImagesCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsImages, field.TypeJSON)
	}
	if value, ok := _u.mutation.SpriteThumbnailsInterval(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsInterval, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsInterval(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsInterval, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsIntervalCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsInterval, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsWidth(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsWidth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsWidth(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsWidth, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsWidthCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsWidth, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsHeight(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsHeight, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsHeight(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsHeight, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsHeightCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsHeight, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsRows(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsRows, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsRows(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsRows, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsRowsCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsRows, field.TypeInt)
	}
	if value, ok := _u.mutation.SpriteThumbnailsColumns(); ok {
		_spec.SetField(vod.FieldSpriteThumbnailsColumns, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSpriteThumbnailsColumns(); ok {
		_spec.AddField(vod.FieldSpriteThumbnailsColumns, field.TypeInt, value)
	}
	if _u.mutation.SpriteThumbnailsColumnsCleared() {
		_spec.ClearField(vod.FieldSpriteThumbnailsColumns, field.TypeInt)
	}
	if value, ok := _u.mutation.StorageSizeBytes(); ok {
		_spec.SetField(vod.FieldStorageSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedStorageSizeBytes(); ok {
		_spec.AddField(vod.FieldStorageSizeBytes, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.StreamedAt(); ok {
		_spec.SetField(vod.FieldStreamedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(vod.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ChannelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vod.ChannelTable,
			Columns: []string{vod.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vod.ChannelTable,
			Columns: []string{vod.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(channel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.QueueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vod.QueueTable,
			Columns: []string{vod.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vod.QueueTable,
			Columns: []string{vod.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(queue.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPlaylistsIDs(); len(nodes) > 0 && !_u.mutation.PlaylistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.ChaptersTable,
			Columns: []string{vod.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChaptersIDs(); len(nodes) > 0 && !_u.mutation.ChaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.ChaptersTable,
			Columns: []string{vod.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.ChaptersTable,
			Columns: []string{vod.ChaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chapter.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MutedSegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.MutedSegmentsTable,
			Columns: []string{vod.MutedSegmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMutedSegmentsIDs(); len(nodes) > 0 && !_u.mutation.MutedSegmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.MutedSegmentsTable,
			Columns: []string{vod.MutedSegmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MutedSegmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   vod.MutedSegmentsTable,
			Columns: []string{vod.MutedSegmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mutedsegment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vod.MultistreamInfoTable,
			Columns: []string{vod.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMultistreamInfoIDs(); len(nodes) > 0 && !_u.mutation.MultistreamInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vod.MultistreamInfoTable,
			Columns: []string{vod.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MultistreamInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   vod.MultistreamInfoTable,
			Columns: []string{vod.MultistreamInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(multistreaminfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vod{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vod.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
