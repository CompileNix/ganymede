// Code generated by ent, DO NOT EDIT.

package playlistrule

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/internal/utils"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldName, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldValue, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldPosition, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldEnabled, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldContainsFold(FieldName, v))
}

// FieldEQ applies the EQ predicate on the "field" field.
func FieldEQ(v utils.PlaylistRuleField) predicate.PlaylistRule {
	vc := v
	return predicate.PlaylistRule(sql.FieldEQ(FieldField, vc))
}

// FieldNEQ applies the NEQ predicate on the "field" field.
func FieldNEQ(v utils.PlaylistRuleField) predicate.PlaylistRule {
	vc := v
	return predicate.PlaylistRule(sql.FieldNEQ(FieldField, vc))
}

// FieldIn applies the In predicate on the "field" field.
func FieldIn(vs ...utils.PlaylistRuleField) predicate.PlaylistRule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlaylistRule(sql.FieldIn(FieldField, v...))
}

// FieldNotIn applies the NotIn predicate on the "field" field.
func FieldNotIn(vs ...utils.PlaylistRuleField) predicate.PlaylistRule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlaylistRule(sql.FieldNotIn(FieldField, v...))
}

// OperatorEQ applies the EQ predicate on the "operator" field.
func OperatorEQ(v utils.PlaylistRuleOperator) predicate.PlaylistRule {
	vc := v
	return predicate.PlaylistRule(sql.FieldEQ(FieldOperator, vc))
}

// OperatorNEQ applies the NEQ predicate on the "operator" field.
func OperatorNEQ(v utils.PlaylistRuleOperator) predicate.PlaylistRule {
	vc := v
	return predicate.PlaylistRule(sql.FieldNEQ(FieldOperator, vc))
}

// OperatorIn applies the In predicate on the "operator" field.
func OperatorIn(vs ...utils.PlaylistRuleOperator) predicate.PlaylistRule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlaylistRule(sql.FieldIn(FieldOperator, v...))
}

// OperatorNotIn applies the NotIn predicate on the "operator" field.
func OperatorNotIn(vs ...utils.PlaylistRuleOperator) predicate.PlaylistRule {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PlaylistRule(sql.FieldNotIn(FieldOperator, v...))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLTE(FieldValue, v))
}

// ValueContains applies the Contains predicate on the "value" field.
func ValueContains(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldContains(FieldValue, v))
}

// ValueHasPrefix applies the HasPrefix predicate on the "value" field.
func ValueHasPrefix(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldHasPrefix(FieldValue, v))
}

// ValueHasSuffix applies the HasSuffix predicate on the "value" field.
func ValueHasSuffix(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldHasSuffix(FieldValue, v))
}

// ValueEqualFold applies the EqualFold predicate on the "value" field.
func ValueEqualFold(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEqualFold(FieldValue, v))
}

// ValueContainsFold applies the ContainsFold predicate on the "value" field.
func ValueContainsFold(v string) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldContainsFold(FieldValue, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldLTE(FieldPosition, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.FieldNEQ(FieldEnabled, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.PlaylistRule {
	return predicate.PlaylistRule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.PlaylistRuleGroup) predicate.PlaylistRule {
	return predicate.PlaylistRule(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PlaylistRule) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PlaylistRule) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PlaylistRule) predicate.PlaylistRule {
	return predicate.PlaylistRule(sql.NotPredicates(p))
}
