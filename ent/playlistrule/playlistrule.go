// Code generated by ent, DO NOT EDIT.

package playlistrule

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/internal/utils"
)

const (
	// Label holds the string label denoting the playlistrule type in the database.
	Label = "playlist_rule"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldField holds the string denoting the field field in the database.
	FieldField = "field"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the playlistrule in the database.
	Table = "playlist_rules"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "playlist_rules"
	// GroupInverseTable is the table name for the PlaylistRuleGroup entity.
	// It exists in this package in order to avoid circular dependency with the "playlistrulegroup" package.
	GroupInverseTable = "playlist_rule_groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "playlist_rule_group_rules"
)

// Columns holds all SQL columns for playlistrule fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldField,
	FieldOperator,
	FieldValue,
	FieldPosition,
	FieldEnabled,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "playlist_rules"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"playlist_rule_group_rules",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPosition holds the default value on creation for the "position" field.
	DefaultPosition int
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

const DefaultField utils.PlaylistRuleField = "title"

// FieldValidator is a validator for the "field" field enum values. It is called by the builders before save.
func FieldValidator(f utils.PlaylistRuleField) error {
	switch f {
	case "title", "category", "type", "platform", "channel_name":
		return nil
	default:
		return fmt.Errorf("playlistrule: invalid enum value for field field: %q", f)
	}
}

const DefaultOperator utils.PlaylistRuleOperator = "contains"

// OperatorValidator is a validator for the "operator" field enum values. It is called by the builders before save.
func OperatorValidator(o utils.PlaylistRuleOperator) error {
	switch o {
	case "equals", "contains", "regex":
		return nil
	default:
		return fmt.Errorf("playlistrule: invalid enum value for operator field: %q", o)
	}
}

// OrderOption defines the ordering options for the PlaylistRule queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByField orders the results by the field field.
func ByField(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldField, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
	)
}
