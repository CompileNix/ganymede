// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/playlistrule"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
)

// PlaylistRuleGroupCreate is the builder for creating a PlaylistRuleGroup entity.
type PlaylistRuleGroupCreate struct {
	config
	mutation *PlaylistRuleGroupMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOperator sets the "operator" field.
func (_c *PlaylistRuleGroupCreate) SetOperator(v playlistrulegroup.Operator) *PlaylistRuleGroupCreate {
	_c.mutation.SetOperator(v)
	return _c
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (_c *PlaylistRuleGroupCreate) SetNillableOperator(v *playlistrulegroup.Operator) *PlaylistRuleGroupCreate {
	if v != nil {
		_c.SetOperator(*v)
	}
	return _c
}

// SetPosition sets the "position" field.
func (_c *PlaylistRuleGroupCreate) SetPosition(v int) *PlaylistRuleGroupCreate {
	_c.mutation.SetPosition(v)
	return _c
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_c *PlaylistRuleGroupCreate) SetNillablePosition(v *int) *PlaylistRuleGroupCreate {
	if v != nil {
		_c.SetPosition(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *PlaylistRuleGroupCreate) SetID(v uuid.UUID) *PlaylistRuleGroupCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *PlaylistRuleGroupCreate) SetNillableID(v *uuid.UUID) *PlaylistRuleGroupCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetPlaylistID sets the "playlist" edge to the Playlist entity by ID.
func (_c *PlaylistRuleGroupCreate) SetPlaylistID(id uuid.UUID) *PlaylistRuleGroupCreate {
	_c.mutation.SetPlaylistID(id)
	return _c
}

// SetPlaylist sets the "playlist" edge to the Playlist entity.
func (_c *PlaylistRuleGroupCreate) SetPlaylist(v *Playlist) *PlaylistRuleGroupCreate {
	return _c.SetPlaylistID(v.ID)
}

// AddRuleIDs adds the "rules" edge to the PlaylistRule entity by IDs.
func (_c *PlaylistRuleGroupCreate) AddRuleIDs(ids ...uuid.UUID) *PlaylistRuleGroupCreate {
	_c.mutation.AddRuleIDs(ids...)
	return _c
}

// AddRules adds the "rules" edges to the PlaylistRule entity.
func (_c *PlaylistRuleGroupCreate) AddRules(v ...*PlaylistRule) *PlaylistRuleGroupCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRuleIDs(ids...)
}

// Mutation returns the PlaylistRuleGroupMutation object of the builder.
func (_c *PlaylistRuleGroupCreate) Mutation() *PlaylistRuleGroupMutation {
	return _c.mutation
}

// Save creates the PlaylistRuleGroup in the database.
func (_c *PlaylistRuleGroupCreate) Save(ctx context.Context) (*PlaylistRuleGroup, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *PlaylistRuleGroupCreate) SaveX(ctx context.Context) *PlaylistRuleGroup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlaylistRuleGroupCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlaylistRuleGroupCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *PlaylistRuleGroupCreate) defaults() {
	if _, ok := _c.mutation.Operator(); !ok {
		v := playlistrulegroup.DefaultOperator
		_c.mutation.SetOperator(v)
	}
	if _, ok := _c.mutation.Position(); !ok {
		v := playlistrulegroup.DefaultPosition
		_c.mutation.SetPosition(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := playlistrulegroup.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *PlaylistRuleGroupCreate) check() error {
	if _, ok := _c.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "PlaylistRuleGroup.operator"`)}
	}
	if v, ok := _c.mutation.Operator(); ok {
		if err := playlistrulegroup.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "PlaylistRuleGroup.operator": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "PlaylistRuleGroup.position"`)}
	}
	if len(_c.mutation.PlaylistIDs()) == 0 {
		return &ValidationError{Name: "playlist", err: errors.New(`ent: missing required edge "PlaylistRuleGroup.playlist"`)}
	}
	return nil
}

func (_c *PlaylistRuleGroupCreate) sqlSave(ctx context.Context) (*PlaylistRuleGroup, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *PlaylistRuleGroupCreate) createSpec() (*PlaylistRuleGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &PlaylistRuleGroup{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(playlistrulegroup.Table, sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Operator(); ok {
		_spec.SetField(playlistrulegroup.FieldOperator, field.TypeEnum, value)
		_node.Operator = value
	}
	if value, ok := _c.mutation.Position(); ok {
		_spec.SetField(playlistrulegroup.FieldPosition, field.TypeInt, value)
		_node.Position = value
	}
	if nodes := _c.mutation.PlaylistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrulegroup.PlaylistTable,
			Columns: []string{playlistrulegroup.PlaylistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlist.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.playlist_rule_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   playlistrulegroup.RulesTable,
			Columns: []string{playlistrulegroup.RulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrule.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlaylistRuleGroup.Create().
//		SetOperator(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaylistRuleGroupUpsert) {
//			SetOperator(v+v).
//		}).
//		Exec(ctx)
func (_c *PlaylistRuleGroupCreate) OnConflict(opts ...sql.ConflictOption) *PlaylistRuleGroupUpsertOne {
	_c.conflict = opts
	return &PlaylistRuleGroupUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlaylistRuleGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlaylistRuleGroupCreate) OnConflictColumns(columns ...string) *PlaylistRuleGroupUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlaylistRuleGroupUpsertOne{
		create: _c,
	}
}

type (
	// PlaylistRuleGroupUpsertOne is the builder for "upsert"-ing
	//  one PlaylistRuleGroup node.
	PlaylistRuleGroupUpsertOne struct {
		create *PlaylistRuleGroupCreate
	}

	// PlaylistRuleGroupUpsert is the "OnConflict" setter.
	PlaylistRuleGroupUpsert struct {
		*sql.UpdateSet
	}
)

// SetOperator sets the "operator" field.
func (u *PlaylistRuleGroupUpsert) SetOperator(v playlistrulegroup.Operator) *PlaylistRuleGroupUpsert {
	u.Set(playlistrulegroup.FieldOperator, v)
	return u
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *PlaylistRuleGroupUpsert) UpdateOperator() *PlaylistRuleGroupUpsert {
	u.SetExcluded(playlistrulegroup.FieldOperator)
	return u
}

// SetPosition sets the "position" field.
func (u *PlaylistRuleGroupUpsert) SetPosition(v int) *PlaylistRuleGroupUpsert {
	u.Set(playlistrulegroup.FieldPosition, v)
	return u
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *PlaylistRuleGroupUpsert) UpdatePosition() *PlaylistRuleGroupUpsert {
	u.SetExcluded(playlistrulegroup.FieldPosition)
	return u
}

// AddPosition adds v to the "position" field.
func (u *PlaylistRuleGroupUpsert) AddPosition(v int) *PlaylistRuleGroupUpsert {
	u.Add(playlistrulegroup.FieldPosition, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PlaylistRuleGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(playlistrulegroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlaylistRuleGroupUpsertOne) UpdateNewValues() *PlaylistRuleGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(playlistrulegroup.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlaylistRuleGroup.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlaylistRuleGroupUpsertOne) Ignore() *PlaylistRuleGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaylistRuleGroupUpsertOne) DoNothing() *PlaylistRuleGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaylistRuleGroupCreate.OnConflict
// documentation for more info.
func (u *PlaylistRuleGroupUpsertOne) Update(set func(*PlaylistRuleGroupUpsert)) *PlaylistRuleGroupUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaylistRuleGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *PlaylistRuleGroupUpsertOne) SetOperator(v playlistrulegroup.Operator) *PlaylistRuleGroupUpsertOne {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *PlaylistRuleGroupUpsertOne) UpdateOperator() *PlaylistRuleGroupUpsertOne {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.UpdateOperator()
	})
}

// SetPosition sets the "position" field.
func (u *PlaylistRuleGroupUpsertOne) SetPosition(v int) *PlaylistRuleGroupUpsertOne {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.SetPosition(v)
	})
}

// AddPosition adds v to the "position" field.
func (u *PlaylistRuleGroupUpsertOne) AddPosition(v int) *PlaylistRuleGroupUpsertOne {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.AddPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *PlaylistRuleGroupUpsertOne) UpdatePosition() *PlaylistRuleGroupUpsertOne {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.UpdatePosition()
	})
}

// Exec executes the query.
func (u *PlaylistRuleGroupUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaylistRuleGroupCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaylistRuleGroupUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlaylistRuleGroupUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlaylistRuleGroupUpsertOne.ID is not supported by MySQL driver. Use PlaylistRuleGroupUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlaylistRuleGroupUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlaylistRuleGroupCreateBulk is the builder for creating many PlaylistRuleGroup entities in bulk.
type PlaylistRuleGroupCreateBulk struct {
	config
	err      error
	builders []*PlaylistRuleGroupCreate
	conflict []sql.ConflictOption
}

// Save creates the PlaylistRuleGroup entities in the database.
func (_c *PlaylistRuleGroupCreateBulk) Save(ctx context.Context) ([]*PlaylistRuleGroup, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*PlaylistRuleGroup, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaylistRuleGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *PlaylistRuleGroupCreateBulk) SaveX(ctx context.Context) []*PlaylistRuleGroup {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *PlaylistRuleGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *PlaylistRuleGroupCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PlaylistRuleGroup.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaylistRuleGroupUpsert) {
//			SetOperator(v+v).
//		}).
//		Exec(ctx)
func (_c *PlaylistRuleGroupCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlaylistRuleGroupUpsertBulk {
	_c.conflict = opts
	return &PlaylistRuleGroupUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PlaylistRuleGroup.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *PlaylistRuleGroupCreateBulk) OnConflictColumns(columns ...string) *PlaylistRuleGroupUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &PlaylistRuleGroupUpsertBulk{
		create: _c,
	}
}

// PlaylistRuleGroupUpsertBulk is the builder for "upsert"-ing
// a bulk of PlaylistRuleGroup nodes.
type PlaylistRuleGroupUpsertBulk struct {
	create *PlaylistRuleGroupCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PlaylistRuleGroup.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(playlistrulegroup.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlaylistRuleGroupUpsertBulk) UpdateNewValues() *PlaylistRuleGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(playlistrulegroup.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PlaylistRuleGroup.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlaylistRuleGroupUpsertBulk) Ignore() *PlaylistRuleGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaylistRuleGroupUpsertBulk) DoNothing() *PlaylistRuleGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaylistRuleGroupCreateBulk.OnConflict
// documentation for more info.
func (u *PlaylistRuleGroupUpsertBulk) Update(set func(*PlaylistRuleGroupUpsert)) *PlaylistRuleGroupUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaylistRuleGroupUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *PlaylistRuleGroupUpsertBulk) SetOperator(v playlistrulegroup.Operator) *PlaylistRuleGroupUpsertBulk {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *PlaylistRuleGroupUpsertBulk) UpdateOperator() *PlaylistRuleGroupUpsertBulk {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.UpdateOperator()
	})
}

// SetPosition sets the "position" field.
func (u *PlaylistRuleGroupUpsertBulk) SetPosition(v int) *PlaylistRuleGroupUpsertBulk {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.SetPosition(v)
	})
}

// AddPosition adds v to the "position" field.
func (u *PlaylistRuleGroupUpsertBulk) AddPosition(v int) *PlaylistRuleGroupUpsertBulk {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.AddPosition(v)
	})
}

// UpdatePosition sets the "position" field to the value that was provided on create.
func (u *PlaylistRuleGroupUpsertBulk) UpdatePosition() *PlaylistRuleGroupUpsertBulk {
	return u.Update(func(s *PlaylistRuleGroupUpsert) {
		s.UpdatePosition()
	})
}

// Exec executes the query.
func (u *PlaylistRuleGroupUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlaylistRuleGroupCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaylistRuleGroupCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaylistRuleGroupUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
