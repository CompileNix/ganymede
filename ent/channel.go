// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
)

// Channel is the model entity for the Channel schema.
type Channel struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// The external ID of the channel.
	ExtID string `json:"ext_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DisplayName holds the value of the "display_name" field.
	DisplayName string `json:"display_name,omitempty"`
	// ImagePath holds the value of the "image_path" field.
	ImagePath string `json:"image_path,omitempty"`
	// Retention holds the value of the "retention" field.
	Retention bool `json:"retention,omitempty"`
	// RetentionDays holds the value of the "retention_days" field.
	RetentionDays int64 `json:"retention_days,omitempty"`
	// Total storage size in bytes for the channel's videos.
	StorageSizeBytes int64 `json:"storage_size_bytes,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChannelQuery when eager-loading is set.
	Edges        ChannelEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ChannelEdges holds the relations/edges for other nodes in the graph.
type ChannelEdges struct {
	// Vods holds the value of the vods edge.
	Vods []*Vod `json:"vods,omitempty"`
	// Live holds the value of the live edge.
	Live []*Live `json:"live,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VodsOrErr returns the Vods value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) VodsOrErr() ([]*Vod, error) {
	if e.loadedTypes[0] {
		return e.Vods, nil
	}
	return nil, &NotLoadedError{edge: "vods"}
}

// LiveOrErr returns the Live value or an error if the edge
// was not loaded in eager-loading.
func (e ChannelEdges) LiveOrErr() ([]*Live, error) {
	if e.loadedTypes[1] {
		return e.Live, nil
	}
	return nil, &NotLoadedError{edge: "live"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Channel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case channel.FieldRetention:
			values[i] = new(sql.NullBool)
		case channel.FieldRetentionDays, channel.FieldStorageSizeBytes:
			values[i] = new(sql.NullInt64)
		case channel.FieldExtID, channel.FieldName, channel.FieldDisplayName, channel.FieldImagePath:
			values[i] = new(sql.NullString)
		case channel.FieldUpdatedAt, channel.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case channel.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Channel fields.
func (_m *Channel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case channel.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case channel.FieldExtID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ext_id", values[i])
			} else if value.Valid {
				_m.ExtID = value.String
			}
		case channel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case channel.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				_m.DisplayName = value.String
			}
		case channel.FieldImagePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_path", values[i])
			} else if value.Valid {
				_m.ImagePath = value.String
			}
		case channel.FieldRetention:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field retention", values[i])
			} else if value.Valid {
				_m.Retention = value.Bool
			}
		case channel.FieldRetentionDays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field retention_days", values[i])
			} else if value.Valid {
				_m.RetentionDays = value.Int64
			}
		case channel.FieldStorageSizeBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field storage_size_bytes", values[i])
			} else if value.Valid {
				_m.StorageSizeBytes = value.Int64
			}
		case channel.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case channel.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Channel.
// This includes values selected through modifiers, order, etc.
func (_m *Channel) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryVods queries the "vods" edge of the Channel entity.
func (_m *Channel) QueryVods() *VodQuery {
	return NewChannelClient(_m.config).QueryVods(_m)
}

// QueryLive queries the "live" edge of the Channel entity.
func (_m *Channel) QueryLive() *LiveQuery {
	return NewChannelClient(_m.config).QueryLive(_m)
}

// Update returns a builder for updating this Channel.
// Note that you need to call Channel.Unwrap() before calling this method if this Channel
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Channel) Update() *ChannelUpdateOne {
	return NewChannelClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Channel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Channel) Unwrap() *Channel {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Channel is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Channel) String() string {
	var builder strings.Builder
	builder.WriteString("Channel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("ext_id=")
	builder.WriteString(_m.ExtID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(_m.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("image_path=")
	builder.WriteString(_m.ImagePath)
	builder.WriteString(", ")
	builder.WriteString("retention=")
	builder.WriteString(fmt.Sprintf("%v", _m.Retention))
	builder.WriteString(", ")
	builder.WriteString("retention_days=")
	builder.WriteString(fmt.Sprintf("%v", _m.RetentionDays))
	builder.WriteString(", ")
	builder.WriteString("storage_size_bytes=")
	builder.WriteString(fmt.Sprintf("%v", _m.StorageSizeBytes))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Channels is a parsable slice of Channel.
type Channels []*Channel
