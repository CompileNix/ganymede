// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playlistrule"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/internal/utils"
)

// PlaylistRuleUpdate is the builder for updating PlaylistRule entities.
type PlaylistRuleUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistRuleMutation
}

// Where appends a list predicates to the PlaylistRuleUpdate builder.
func (pru *PlaylistRuleUpdate) Where(ps ...predicate.PlaylistRule) *PlaylistRuleUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetName sets the "name" field.
func (pru *PlaylistRuleUpdate) SetName(s string) *PlaylistRuleUpdate {
	pru.mutation.SetName(s)
	return pru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pru *PlaylistRuleUpdate) SetNillableName(s *string) *PlaylistRuleUpdate {
	if s != nil {
		pru.SetName(*s)
	}
	return pru
}

// ClearName clears the value of the "name" field.
func (pru *PlaylistRuleUpdate) ClearName() *PlaylistRuleUpdate {
	pru.mutation.ClearName()
	return pru
}

// SetField sets the "field" field.
func (pru *PlaylistRuleUpdate) SetField(urf utils.PlaylistRuleField) *PlaylistRuleUpdate {
	pru.mutation.SetFieldField(urf)
	return pru
}

// SetNillableField sets the "field" field if the given value is not nil.
func (pru *PlaylistRuleUpdate) SetNillableField(urf *utils.PlaylistRuleField) *PlaylistRuleUpdate {
	if urf != nil {
		pru.SetField(*urf)
	}
	return pru
}

// SetOperator sets the "operator" field.
func (pru *PlaylistRuleUpdate) SetOperator(uro utils.PlaylistRuleOperator) *PlaylistRuleUpdate {
	pru.mutation.SetOperator(uro)
	return pru
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (pru *PlaylistRuleUpdate) SetNillableOperator(uro *utils.PlaylistRuleOperator) *PlaylistRuleUpdate {
	if uro != nil {
		pru.SetOperator(*uro)
	}
	return pru
}

// SetValue sets the "value" field.
func (pru *PlaylistRuleUpdate) SetValue(s string) *PlaylistRuleUpdate {
	pru.mutation.SetValue(s)
	return pru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (pru *PlaylistRuleUpdate) SetNillableValue(s *string) *PlaylistRuleUpdate {
	if s != nil {
		pru.SetValue(*s)
	}
	return pru
}

// SetPosition sets the "position" field.
func (pru *PlaylistRuleUpdate) SetPosition(i int) *PlaylistRuleUpdate {
	pru.mutation.ResetPosition()
	pru.mutation.SetPosition(i)
	return pru
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pru *PlaylistRuleUpdate) SetNillablePosition(i *int) *PlaylistRuleUpdate {
	if i != nil {
		pru.SetPosition(*i)
	}
	return pru
}

// AddPosition adds i to the "position" field.
func (pru *PlaylistRuleUpdate) AddPosition(i int) *PlaylistRuleUpdate {
	pru.mutation.AddPosition(i)
	return pru
}

// SetEnabled sets the "enabled" field.
func (pru *PlaylistRuleUpdate) SetEnabled(b bool) *PlaylistRuleUpdate {
	pru.mutation.SetEnabled(b)
	return pru
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pru *PlaylistRuleUpdate) SetNillableEnabled(b *bool) *PlaylistRuleUpdate {
	if b != nil {
		pru.SetEnabled(*b)
	}
	return pru
}

// SetGroupID sets the "group" edge to the PlaylistRuleGroup entity by ID.
func (pru *PlaylistRuleUpdate) SetGroupID(id uuid.UUID) *PlaylistRuleUpdate {
	pru.mutation.SetGroupID(id)
	return pru
}

// SetGroup sets the "group" edge to the PlaylistRuleGroup entity.
func (pru *PlaylistRuleUpdate) SetGroup(p *PlaylistRuleGroup) *PlaylistRuleUpdate {
	return pru.SetGroupID(p.ID)
}

// Mutation returns the PlaylistRuleMutation object of the builder.
func (pru *PlaylistRuleUpdate) Mutation() *PlaylistRuleMutation {
	return pru.mutation
}

// ClearGroup clears the "group" edge to the PlaylistRuleGroup entity.
func (pru *PlaylistRuleUpdate) ClearGroup() *PlaylistRuleUpdate {
	pru.mutation.ClearGroup()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PlaylistRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PlaylistRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PlaylistRuleUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PlaylistRuleUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PlaylistRuleUpdate) check() error {
	if v, ok := pru.mutation.GetField(); ok {
		if err := playlistrule.FieldValidator(v); err != nil {
			return &ValidationError{Name: "field", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.field": %w`, err)}
		}
	}
	if v, ok := pru.mutation.Operator(); ok {
		if err := playlistrule.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.operator": %w`, err)}
		}
	}
	if pru.mutation.GroupCleared() && len(pru.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlaylistRule.group"`)
	}
	return nil
}

func (pru *PlaylistRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlistrule.Table, playlistrule.Columns, sqlgraph.NewFieldSpec(playlistrule.FieldID, field.TypeUUID))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.Name(); ok {
		_spec.SetField(playlistrule.FieldName, field.TypeString, value)
	}
	if pru.mutation.NameCleared() {
		_spec.ClearField(playlistrule.FieldName, field.TypeString)
	}
	if value, ok := pru.mutation.GetField(); ok {
		_spec.SetField(playlistrule.FieldField, field.TypeEnum, value)
	}
	if value, ok := pru.mutation.Operator(); ok {
		_spec.SetField(playlistrule.FieldOperator, field.TypeEnum, value)
	}
	if value, ok := pru.mutation.Value(); ok {
		_spec.SetField(playlistrule.FieldValue, field.TypeString, value)
	}
	if value, ok := pru.mutation.Position(); ok {
		_spec.SetField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedPosition(); ok {
		_spec.AddField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Enabled(); ok {
		_spec.SetField(playlistrule.FieldEnabled, field.TypeBool, value)
	}
	if pru.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlistrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PlaylistRuleUpdateOne is the builder for updating a single PlaylistRule entity.
type PlaylistRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistRuleMutation
}

// SetName sets the "name" field.
func (pruo *PlaylistRuleUpdateOne) SetName(s string) *PlaylistRuleUpdateOne {
	pruo.mutation.SetName(s)
	return pruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pruo *PlaylistRuleUpdateOne) SetNillableName(s *string) *PlaylistRuleUpdateOne {
	if s != nil {
		pruo.SetName(*s)
	}
	return pruo
}

// ClearName clears the value of the "name" field.
func (pruo *PlaylistRuleUpdateOne) ClearName() *PlaylistRuleUpdateOne {
	pruo.mutation.ClearName()
	return pruo
}

// SetField sets the "field" field.
func (pruo *PlaylistRuleUpdateOne) SetField(urf utils.PlaylistRuleField) *PlaylistRuleUpdateOne {
	pruo.mutation.SetFieldField(urf)
	return pruo
}

// SetNillableField sets the "field" field if the given value is not nil.
func (pruo *PlaylistRuleUpdateOne) SetNillableField(urf *utils.PlaylistRuleField) *PlaylistRuleUpdateOne {
	if urf != nil {
		pruo.SetField(*urf)
	}
	return pruo
}

// SetOperator sets the "operator" field.
func (pruo *PlaylistRuleUpdateOne) SetOperator(uro utils.PlaylistRuleOperator) *PlaylistRuleUpdateOne {
	pruo.mutation.SetOperator(uro)
	return pruo
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (pruo *PlaylistRuleUpdateOne) SetNillableOperator(uro *utils.PlaylistRuleOperator) *PlaylistRuleUpdateOne {
	if uro != nil {
		pruo.SetOperator(*uro)
	}
	return pruo
}

// SetValue sets the "value" field.
func (pruo *PlaylistRuleUpdateOne) SetValue(s string) *PlaylistRuleUpdateOne {
	pruo.mutation.SetValue(s)
	return pruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (pruo *PlaylistRuleUpdateOne) SetNillableValue(s *string) *PlaylistRuleUpdateOne {
	if s != nil {
		pruo.SetValue(*s)
	}
	return pruo
}

// SetPosition sets the "position" field.
func (pruo *PlaylistRuleUpdateOne) SetPosition(i int) *PlaylistRuleUpdateOne {
	pruo.mutation.ResetPosition()
	pruo.mutation.SetPosition(i)
	return pruo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (pruo *PlaylistRuleUpdateOne) SetNillablePosition(i *int) *PlaylistRuleUpdateOne {
	if i != nil {
		pruo.SetPosition(*i)
	}
	return pruo
}

// AddPosition adds i to the "position" field.
func (pruo *PlaylistRuleUpdateOne) AddPosition(i int) *PlaylistRuleUpdateOne {
	pruo.mutation.AddPosition(i)
	return pruo
}

// SetEnabled sets the "enabled" field.
func (pruo *PlaylistRuleUpdateOne) SetEnabled(b bool) *PlaylistRuleUpdateOne {
	pruo.mutation.SetEnabled(b)
	return pruo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (pruo *PlaylistRuleUpdateOne) SetNillableEnabled(b *bool) *PlaylistRuleUpdateOne {
	if b != nil {
		pruo.SetEnabled(*b)
	}
	return pruo
}

// SetGroupID sets the "group" edge to the PlaylistRuleGroup entity by ID.
func (pruo *PlaylistRuleUpdateOne) SetGroupID(id uuid.UUID) *PlaylistRuleUpdateOne {
	pruo.mutation.SetGroupID(id)
	return pruo
}

// SetGroup sets the "group" edge to the PlaylistRuleGroup entity.
func (pruo *PlaylistRuleUpdateOne) SetGroup(p *PlaylistRuleGroup) *PlaylistRuleUpdateOne {
	return pruo.SetGroupID(p.ID)
}

// Mutation returns the PlaylistRuleMutation object of the builder.
func (pruo *PlaylistRuleUpdateOne) Mutation() *PlaylistRuleMutation {
	return pruo.mutation
}

// ClearGroup clears the "group" edge to the PlaylistRuleGroup entity.
func (pruo *PlaylistRuleUpdateOne) ClearGroup() *PlaylistRuleUpdateOne {
	pruo.mutation.ClearGroup()
	return pruo
}

// Where appends a list predicates to the PlaylistRuleUpdate builder.
func (pruo *PlaylistRuleUpdateOne) Where(ps ...predicate.PlaylistRule) *PlaylistRuleUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PlaylistRuleUpdateOne) Select(field string, fields ...string) *PlaylistRuleUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PlaylistRule entity.
func (pruo *PlaylistRuleUpdateOne) Save(ctx context.Context) (*PlaylistRule, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PlaylistRuleUpdateOne) SaveX(ctx context.Context) *PlaylistRule {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PlaylistRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PlaylistRuleUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PlaylistRuleUpdateOne) check() error {
	if v, ok := pruo.mutation.GetField(); ok {
		if err := playlistrule.FieldValidator(v); err != nil {
			return &ValidationError{Name: "field", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.field": %w`, err)}
		}
	}
	if v, ok := pruo.mutation.Operator(); ok {
		if err := playlistrule.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.operator": %w`, err)}
		}
	}
	if pruo.mutation.GroupCleared() && len(pruo.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlaylistRule.group"`)
	}
	return nil
}

func (pruo *PlaylistRuleUpdateOne) sqlSave(ctx context.Context) (_node *PlaylistRule, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlistrule.Table, playlistrule.Columns, sqlgraph.NewFieldSpec(playlistrule.FieldID, field.TypeUUID))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaylistRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlistrule.FieldID)
		for _, f := range fields {
			if !playlistrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlistrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.Name(); ok {
		_spec.SetField(playlistrule.FieldName, field.TypeString, value)
	}
	if pruo.mutation.NameCleared() {
		_spec.ClearField(playlistrule.FieldName, field.TypeString)
	}
	if value, ok := pruo.mutation.GetField(); ok {
		_spec.SetField(playlistrule.FieldField, field.TypeEnum, value)
	}
	if value, ok := pruo.mutation.Operator(); ok {
		_spec.SetField(playlistrule.FieldOperator, field.TypeEnum, value)
	}
	if value, ok := pruo.mutation.Value(); ok {
		_spec.SetField(playlistrule.FieldValue, field.TypeString, value)
	}
	if value, ok := pruo.mutation.Position(); ok {
		_spec.SetField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedPosition(); ok {
		_spec.AddField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Enabled(); ok {
		_spec.SetField(playlistrule.FieldEnabled, field.TypeBool, value)
	}
	if pruo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaylistRule{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlistrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
