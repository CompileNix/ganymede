// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playlistrule"
	"github.com/zibbp/ganymede/ent/playlistrulegroup"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/internal/utils"
)

// PlaylistRuleUpdate is the builder for updating PlaylistRule entities.
type PlaylistRuleUpdate struct {
	config
	hooks    []Hook
	mutation *PlaylistRuleMutation
}

// Where appends a list predicates to the PlaylistRuleUpdate builder.
func (_u *PlaylistRuleUpdate) Where(ps ...predicate.PlaylistRule) *PlaylistRuleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *PlaylistRuleUpdate) SetName(v string) *PlaylistRuleUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlaylistRuleUpdate) SetNillableName(v *string) *PlaylistRuleUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *PlaylistRuleUpdate) ClearName() *PlaylistRuleUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetField sets the "field" field.
func (_u *PlaylistRuleUpdate) SetField(v utils.PlaylistRuleField) *PlaylistRuleUpdate {
	_u.mutation.SetFieldField(v)
	return _u
}

// SetNillableField sets the "field" field if the given value is not nil.
func (_u *PlaylistRuleUpdate) SetNillableField(v *utils.PlaylistRuleField) *PlaylistRuleUpdate {
	if v != nil {
		_u.SetField(*v)
	}
	return _u
}

// SetOperator sets the "operator" field.
func (_u *PlaylistRuleUpdate) SetOperator(v utils.PlaylistRuleOperator) *PlaylistRuleUpdate {
	_u.mutation.SetOperator(v)
	return _u
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (_u *PlaylistRuleUpdate) SetNillableOperator(v *utils.PlaylistRuleOperator) *PlaylistRuleUpdate {
	if v != nil {
		_u.SetOperator(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *PlaylistRuleUpdate) SetValue(v string) *PlaylistRuleUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *PlaylistRuleUpdate) SetNillableValue(v *string) *PlaylistRuleUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetPosition sets the "position" field.
func (_u *PlaylistRuleUpdate) SetPosition(v int) *PlaylistRuleUpdate {
	_u.mutation.ResetPosition()
	_u.mutation.SetPosition(v)
	return _u
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_u *PlaylistRuleUpdate) SetNillablePosition(v *int) *PlaylistRuleUpdate {
	if v != nil {
		_u.SetPosition(*v)
	}
	return _u
}

// AddPosition adds value to the "position" field.
func (_u *PlaylistRuleUpdate) AddPosition(v int) *PlaylistRuleUpdate {
	_u.mutation.AddPosition(v)
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *PlaylistRuleUpdate) SetEnabled(v bool) *PlaylistRuleUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *PlaylistRuleUpdate) SetNillableEnabled(v *bool) *PlaylistRuleUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetGroupID sets the "group" edge to the PlaylistRuleGroup entity by ID.
func (_u *PlaylistRuleUpdate) SetGroupID(id uuid.UUID) *PlaylistRuleUpdate {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetGroup sets the "group" edge to the PlaylistRuleGroup entity.
func (_u *PlaylistRuleUpdate) SetGroup(v *PlaylistRuleGroup) *PlaylistRuleUpdate {
	return _u.SetGroupID(v.ID)
}

// Mutation returns the PlaylistRuleMutation object of the builder.
func (_u *PlaylistRuleUpdate) Mutation() *PlaylistRuleMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the PlaylistRuleGroup entity.
func (_u *PlaylistRuleUpdate) ClearGroup() *PlaylistRuleUpdate {
	_u.mutation.ClearGroup()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *PlaylistRuleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlaylistRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *PlaylistRuleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlaylistRuleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlaylistRuleUpdate) check() error {
	if v, ok := _u.mutation.GetField(); ok {
		if err := playlistrule.FieldValidator(v); err != nil {
			return &ValidationError{Name: "field", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.field": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Operator(); ok {
		if err := playlistrule.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.operator": %w`, err)}
		}
	}
	if _u.mutation.GroupCleared() && len(_u.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlaylistRule.group"`)
	}
	return nil
}

func (_u *PlaylistRuleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlistrule.Table, playlistrule.Columns, sqlgraph.NewFieldSpec(playlistrule.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(playlistrule.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(playlistrule.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.GetField(); ok {
		_spec.SetField(playlistrule.FieldField, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Operator(); ok {
		_spec.SetField(playlistrule.FieldOperator, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(playlistrule.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPosition(); ok {
		_spec.AddField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(playlistrule.FieldEnabled, field.TypeBool, value)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlistrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// PlaylistRuleUpdateOne is the builder for updating a single PlaylistRule entity.
type PlaylistRuleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlaylistRuleMutation
}

// SetName sets the "name" field.
func (_u *PlaylistRuleUpdateOne) SetName(v string) *PlaylistRuleUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *PlaylistRuleUpdateOne) SetNillableName(v *string) *PlaylistRuleUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *PlaylistRuleUpdateOne) ClearName() *PlaylistRuleUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetField sets the "field" field.
func (_u *PlaylistRuleUpdateOne) SetField(v utils.PlaylistRuleField) *PlaylistRuleUpdateOne {
	_u.mutation.SetFieldField(v)
	return _u
}

// SetNillableField sets the "field" field if the given value is not nil.
func (_u *PlaylistRuleUpdateOne) SetNillableField(v *utils.PlaylistRuleField) *PlaylistRuleUpdateOne {
	if v != nil {
		_u.SetField(*v)
	}
	return _u
}

// SetOperator sets the "operator" field.
func (_u *PlaylistRuleUpdateOne) SetOperator(v utils.PlaylistRuleOperator) *PlaylistRuleUpdateOne {
	_u.mutation.SetOperator(v)
	return _u
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (_u *PlaylistRuleUpdateOne) SetNillableOperator(v *utils.PlaylistRuleOperator) *PlaylistRuleUpdateOne {
	if v != nil {
		_u.SetOperator(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *PlaylistRuleUpdateOne) SetValue(v string) *PlaylistRuleUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *PlaylistRuleUpdateOne) SetNillableValue(v *string) *PlaylistRuleUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetPosition sets the "position" field.
func (_u *PlaylistRuleUpdateOne) SetPosition(v int) *PlaylistRuleUpdateOne {
	_u.mutation.ResetPosition()
	_u.mutation.SetPosition(v)
	return _u
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (_u *PlaylistRuleUpdateOne) SetNillablePosition(v *int) *PlaylistRuleUpdateOne {
	if v != nil {
		_u.SetPosition(*v)
	}
	return _u
}

// AddPosition adds value to the "position" field.
func (_u *PlaylistRuleUpdateOne) AddPosition(v int) *PlaylistRuleUpdateOne {
	_u.mutation.AddPosition(v)
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *PlaylistRuleUpdateOne) SetEnabled(v bool) *PlaylistRuleUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *PlaylistRuleUpdateOne) SetNillableEnabled(v *bool) *PlaylistRuleUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetGroupID sets the "group" edge to the PlaylistRuleGroup entity by ID.
func (_u *PlaylistRuleUpdateOne) SetGroupID(id uuid.UUID) *PlaylistRuleUpdateOne {
	_u.mutation.SetGroupID(id)
	return _u
}

// SetGroup sets the "group" edge to the PlaylistRuleGroup entity.
func (_u *PlaylistRuleUpdateOne) SetGroup(v *PlaylistRuleGroup) *PlaylistRuleUpdateOne {
	return _u.SetGroupID(v.ID)
}

// Mutation returns the PlaylistRuleMutation object of the builder.
func (_u *PlaylistRuleUpdateOne) Mutation() *PlaylistRuleMutation {
	return _u.mutation
}

// ClearGroup clears the "group" edge to the PlaylistRuleGroup entity.
func (_u *PlaylistRuleUpdateOne) ClearGroup() *PlaylistRuleUpdateOne {
	_u.mutation.ClearGroup()
	return _u
}

// Where appends a list predicates to the PlaylistRuleUpdate builder.
func (_u *PlaylistRuleUpdateOne) Where(ps ...predicate.PlaylistRule) *PlaylistRuleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *PlaylistRuleUpdateOne) Select(field string, fields ...string) *PlaylistRuleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated PlaylistRule entity.
func (_u *PlaylistRuleUpdateOne) Save(ctx context.Context) (*PlaylistRule, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *PlaylistRuleUpdateOne) SaveX(ctx context.Context) *PlaylistRule {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *PlaylistRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *PlaylistRuleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *PlaylistRuleUpdateOne) check() error {
	if v, ok := _u.mutation.GetField(); ok {
		if err := playlistrule.FieldValidator(v); err != nil {
			return &ValidationError{Name: "field", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.field": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Operator(); ok {
		if err := playlistrule.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "PlaylistRule.operator": %w`, err)}
		}
	}
	if _u.mutation.GroupCleared() && len(_u.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PlaylistRule.group"`)
	}
	return nil
}

func (_u *PlaylistRuleUpdateOne) sqlSave(ctx context.Context) (_node *PlaylistRule, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playlistrule.Table, playlistrule.Columns, sqlgraph.NewFieldSpec(playlistrule.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlaylistRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playlistrule.FieldID)
		for _, f := range fields {
			if !playlistrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playlistrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(playlistrule.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(playlistrule.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.GetField(); ok {
		_spec.SetField(playlistrule.FieldField, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Operator(); ok {
		_spec.SetField(playlistrule.FieldOperator, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(playlistrule.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Position(); ok {
		_spec.SetField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedPosition(); ok {
		_spec.AddField(playlistrule.FieldPosition, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(playlistrule.FieldEnabled, field.TypeBool, value)
	}
	if _u.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playlistrule.GroupTable,
			Columns: []string{playlistrule.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playlistrulegroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlaylistRule{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playlistrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
